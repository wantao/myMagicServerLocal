// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MagicCard.proto

#ifndef PROTOBUF_MagicCard_2eproto__INCLUDED
#define PROTOBUF_MagicCard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MagicCard_2eproto();
void protobuf_AssignDesc_MagicCard_2eproto();
void protobuf_ShutdownFile_MagicCard_2eproto();

class PBServer;
class PBSystemInfoReceive;
class PBCard;
class PBAllCard;
class PBBattleCard;
class PBFriend;
class PBAllFriend;
class PBHelpFriend;
class PBWaitingFriend;
class PBFriendSend;
class PBFriendAgreeReceive;
class PBAddFriendReceive;
class PBActivityBattle;
class PBBattle;
class PBGem;
class PBAllGem;
class PBMission;
class PBAllMission;
class PBMissionAwardSend;
class PBUser;
class PBMissionAwardReceive;
class PBRunningAfficheReceive;
class PBAwardSend;
class PBAwardReceive;
class PBUseEnergyReceive;
class PBRegisterCheckSend;
class PBRegisterCheckReceive;
class PBRegisterSend;
class PBLoginSend;
class PBLoginReceive;
class PBCardLevelUpSend;
class PBCardLevelUpReceive;
class PBCardEvolutionSend;
class PBCardEvolutionRecieve;
class PBSkillLevelUpSend;
class PBSkillLevelUpReceive;
class PBCardFormSend;
class PBCardFormReceive;
class PBBattleSend;
class PBBattleAward;
class PBBattleReceive;
class PBSkillExpAdd;
class PBCardDBInfo;
class PBBattleResultSend;
class PBBattleResultReceive;
class PBSoldCardSend;
class PBSoldCardReceive;
class PBGetFriendValueReceive;
class PBShopBuySend;
class PBShopBuySendReceive;
class PBSearchFriendSend;
class PBSearchFriendReceive;
class PBDownloadSend;
class PBInvitationCodeSend;
class PBInvitationCodeReceive;
class PBEnergyReceive;
class PBIAPSend;
class PBIAPRecv;
class PBMainServerRegisterSend;
class PBMainServerRegisterReceive;
class PBMainServerLoginSend;
class PBMainServerLoginReceive;
class PBRankSend;
class PBRankPlayerInfo;
class PBRankRecv;
class PBFiveSixStarCard;
class PBEvolutionSuccess;
class PBPassLevelPlayerInfo;
class PBCapacity;
class PBGameNotice;

// ===================================================================

class PBServer : public ::google::protobuf::Message {
 public:
  PBServer();
  virtual ~PBServer();
  
  PBServer(const PBServer& from);
  
  inline PBServer& operator=(const PBServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBServer& default_instance();
  
  void Swap(PBServer* other);
  
  // implements Message ----------------------------------------------
  
  PBServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBServer& from);
  void MergeFrom(const PBServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string serverName = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  
  // optional string serverUrl = 2;
  inline bool has_serverurl() const;
  inline void clear_serverurl();
  static const int kServerUrlFieldNumber = 2;
  inline const ::std::string& serverurl() const;
  inline void set_serverurl(const ::std::string& value);
  inline void set_serverurl(const char* value);
  inline void set_serverurl(const char* value, size_t size);
  inline ::std::string* mutable_serverurl();
  inline ::std::string* release_serverurl();
  
  // optional int32 serverPort = 3;
  inline bool has_serverport() const;
  inline void clear_serverport();
  static const int kServerPortFieldNumber = 3;
  inline ::google::protobuf::int32 serverport() const;
  inline void set_serverport(::google::protobuf::int32 value);
  
  // optional int32 serverStatus = 4;
  inline bool has_serverstatus() const;
  inline void clear_serverstatus();
  static const int kServerStatusFieldNumber = 4;
  inline ::google::protobuf::int32 serverstatus() const;
  inline void set_serverstatus(::google::protobuf::int32 value);
  
  // optional string payServerUrl = 5;
  inline bool has_payserverurl() const;
  inline void clear_payserverurl();
  static const int kPayServerUrlFieldNumber = 5;
  inline const ::std::string& payserverurl() const;
  inline void set_payserverurl(const ::std::string& value);
  inline void set_payserverurl(const char* value);
  inline void set_payserverurl(const char* value, size_t size);
  inline ::std::string* mutable_payserverurl();
  inline ::std::string* release_payserverurl();
  
  // optional int32 payServerPort = 6;
  inline bool has_payserverport() const;
  inline void clear_payserverport();
  static const int kPayServerPortFieldNumber = 6;
  inline ::google::protobuf::int32 payserverport() const;
  inline void set_payserverport(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBServer)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serverurl();
  inline void clear_has_serverurl();
  inline void set_has_serverport();
  inline void clear_has_serverport();
  inline void set_has_serverstatus();
  inline void clear_has_serverstatus();
  inline void set_has_payserverurl();
  inline void clear_has_payserverurl();
  inline void set_has_payserverport();
  inline void clear_has_payserverport();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* servername_;
  ::std::string* serverurl_;
  ::google::protobuf::int32 serverport_;
  ::google::protobuf::int32 serverstatus_;
  ::std::string* payserverurl_;
  ::google::protobuf::int32 payserverport_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBServer* default_instance_;
};
// -------------------------------------------------------------------

class PBSystemInfoReceive : public ::google::protobuf::Message {
 public:
  PBSystemInfoReceive();
  virtual ~PBSystemInfoReceive();
  
  PBSystemInfoReceive(const PBSystemInfoReceive& from);
  
  inline PBSystemInfoReceive& operator=(const PBSystemInfoReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSystemInfoReceive& default_instance();
  
  void Swap(PBSystemInfoReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBSystemInfoReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSystemInfoReceive& from);
  void MergeFrom(const PBSystemInfoReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string affiche = 1;
  inline bool has_affiche() const;
  inline void clear_affiche();
  static const int kAfficheFieldNumber = 1;
  inline const ::std::string& affiche() const;
  inline void set_affiche(const ::std::string& value);
  inline void set_affiche(const char* value);
  inline void set_affiche(const char* value, size_t size);
  inline ::std::string* mutable_affiche();
  inline ::std::string* release_affiche();
  
  // repeated .PBServer allServer = 2;
  inline int allserver_size() const;
  inline void clear_allserver();
  static const int kAllServerFieldNumber = 2;
  inline const ::PBServer& allserver(int index) const;
  inline ::PBServer* mutable_allserver(int index);
  inline ::PBServer* add_allserver();
  inline const ::google::protobuf::RepeatedPtrField< ::PBServer >&
      allserver() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBServer >*
      mutable_allserver();
  
  // optional string gameVersion = 3;
  inline bool has_gameversion() const;
  inline void clear_gameversion();
  static const int kGameVersionFieldNumber = 3;
  inline const ::std::string& gameversion() const;
  inline void set_gameversion(const ::std::string& value);
  inline void set_gameversion(const char* value);
  inline void set_gameversion(const char* value, size_t size);
  inline ::std::string* mutable_gameversion();
  inline ::std::string* release_gameversion();
  
  // optional string resourceVersion = 4;
  inline bool has_resourceversion() const;
  inline void clear_resourceversion();
  static const int kResourceVersionFieldNumber = 4;
  inline const ::std::string& resourceversion() const;
  inline void set_resourceversion(const ::std::string& value);
  inline void set_resourceversion(const char* value);
  inline void set_resourceversion(const char* value, size_t size);
  inline ::std::string* mutable_resourceversion();
  inline ::std::string* release_resourceversion();
  
  // optional string battleVersion = 5;
  inline bool has_battleversion() const;
  inline void clear_battleversion();
  static const int kBattleVersionFieldNumber = 5;
  inline const ::std::string& battleversion() const;
  inline void set_battleversion(const ::std::string& value);
  inline void set_battleversion(const char* value);
  inline void set_battleversion(const char* value, size_t size);
  inline ::std::string* mutable_battleversion();
  inline ::std::string* release_battleversion();
  
  // @@protoc_insertion_point(class_scope:PBSystemInfoReceive)
 private:
  inline void set_has_affiche();
  inline void clear_has_affiche();
  inline void set_has_gameversion();
  inline void clear_has_gameversion();
  inline void set_has_resourceversion();
  inline void clear_has_resourceversion();
  inline void set_has_battleversion();
  inline void clear_has_battleversion();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* affiche_;
  ::google::protobuf::RepeatedPtrField< ::PBServer > allserver_;
  ::std::string* gameversion_;
  ::std::string* resourceversion_;
  ::std::string* battleversion_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSystemInfoReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBCard : public ::google::protobuf::Message {
 public:
  PBCard();
  virtual ~PBCard();
  
  PBCard(const PBCard& from);
  
  inline PBCard& operator=(const PBCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCard& default_instance();
  
  void Swap(PBCard* other);
  
  // implements Message ----------------------------------------------
  
  PBCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCard& from);
  void MergeFrom(const PBCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // optional string cardID = 2;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIDFieldNumber = 2;
  inline const ::std::string& cardid() const;
  inline void set_cardid(const ::std::string& value);
  inline void set_cardid(const char* value);
  inline void set_cardid(const char* value, size_t size);
  inline ::std::string* mutable_cardid();
  inline ::std::string* release_cardid();
  
  // optional int32 cardLevel = 3;
  inline bool has_cardlevel() const;
  inline void clear_cardlevel();
  static const int kCardLevelFieldNumber = 3;
  inline ::google::protobuf::int32 cardlevel() const;
  inline void set_cardlevel(::google::protobuf::int32 value);
  
  // optional int32 cardExp = 4;
  inline bool has_cardexp() const;
  inline void clear_cardexp();
  static const int kCardExpFieldNumber = 4;
  inline ::google::protobuf::int32 cardexp() const;
  inline void set_cardexp(::google::protobuf::int32 value);
  
  // optional int32 skillExp = 5;
  inline bool has_skillexp() const;
  inline void clear_skillexp();
  static const int kSkillExpFieldNumber = 5;
  inline ::google::protobuf::int32 skillexp() const;
  inline void set_skillexp(::google::protobuf::int32 value);
  
  // optional int32 skillLevel = 6;
  inline bool has_skilllevel() const;
  inline void clear_skilllevel();
  static const int kSkillLevelFieldNumber = 6;
  inline ::google::protobuf::int32 skilllevel() const;
  inline void set_skilllevel(::google::protobuf::int32 value);
  
  // optional int32 weaponID = 7;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 7;
  inline ::google::protobuf::int32 weaponid() const;
  inline void set_weaponid(::google::protobuf::int32 value);
  
  // optional int32 battlePosition = 8;
  inline bool has_battleposition() const;
  inline void clear_battleposition();
  static const int kBattlePositionFieldNumber = 8;
  inline ::google::protobuf::int32 battleposition() const;
  inline void set_battleposition(::google::protobuf::int32 value);
  
  // optional int32 VTLGrow = 9;
  inline bool has_vtlgrow() const;
  inline void clear_vtlgrow();
  static const int kVTLGrowFieldNumber = 9;
  inline ::google::protobuf::int32 vtlgrow() const;
  inline void set_vtlgrow(::google::protobuf::int32 value);
  
  // optional int32 STRGrow = 10;
  inline bool has_strgrow() const;
  inline void clear_strgrow();
  static const int kSTRGrowFieldNumber = 10;
  inline ::google::protobuf::int32 strgrow() const;
  inline void set_strgrow(::google::protobuf::int32 value);
  
  // optional int32 TGHGrow = 11;
  inline bool has_tghgrow() const;
  inline void clear_tghgrow();
  static const int kTGHGrowFieldNumber = 11;
  inline ::google::protobuf::int32 tghgrow() const;
  inline void set_tghgrow(::google::protobuf::int32 value);
  
  // optional int32 QUIGrow = 12;
  inline bool has_quigrow() const;
  inline void clear_quigrow();
  static const int kQUIGrowFieldNumber = 12;
  inline ::google::protobuf::int32 quigrow() const;
  inline void set_quigrow(::google::protobuf::int32 value);
  
  // optional int32 MGCGrow = 13;
  inline bool has_mgcgrow() const;
  inline void clear_mgcgrow();
  static const int kMGCGrowFieldNumber = 13;
  inline ::google::protobuf::int32 mgcgrow() const;
  inline void set_mgcgrow(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBCard)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_cardlevel();
  inline void clear_has_cardlevel();
  inline void set_has_cardexp();
  inline void clear_has_cardexp();
  inline void set_has_skillexp();
  inline void clear_has_skillexp();
  inline void set_has_skilllevel();
  inline void clear_has_skilllevel();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_battleposition();
  inline void clear_has_battleposition();
  inline void set_has_vtlgrow();
  inline void clear_has_vtlgrow();
  inline void set_has_strgrow();
  inline void clear_has_strgrow();
  inline void set_has_tghgrow();
  inline void clear_has_tghgrow();
  inline void set_has_quigrow();
  inline void clear_has_quigrow();
  inline void set_has_mgcgrow();
  inline void clear_has_mgcgrow();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* cardid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 cardlevel_;
  ::google::protobuf::int32 cardexp_;
  ::google::protobuf::int32 skillexp_;
  ::google::protobuf::int32 skilllevel_;
  ::google::protobuf::int32 weaponid_;
  ::google::protobuf::int32 battleposition_;
  ::google::protobuf::int32 vtlgrow_;
  ::google::protobuf::int32 strgrow_;
  ::google::protobuf::int32 tghgrow_;
  ::google::protobuf::int32 quigrow_;
  ::google::protobuf::int32 mgcgrow_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCard* default_instance_;
};
// -------------------------------------------------------------------

class PBAllCard : public ::google::protobuf::Message {
 public:
  PBAllCard();
  virtual ~PBAllCard();
  
  PBAllCard(const PBAllCard& from);
  
  inline PBAllCard& operator=(const PBAllCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAllCard& default_instance();
  
  void Swap(PBAllCard* other);
  
  // implements Message ----------------------------------------------
  
  PBAllCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAllCard& from);
  void MergeFrom(const PBAllCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBCard allCard = 1;
  inline int allcard_size() const;
  inline void clear_allcard();
  static const int kAllCardFieldNumber = 1;
  inline const ::PBCard& allcard(int index) const;
  inline ::PBCard* mutable_allcard(int index);
  inline ::PBCard* add_allcard();
  inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
      allcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
      mutable_allcard();
  
  // @@protoc_insertion_point(class_scope:PBAllCard)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBCard > allcard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAllCard* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleCard : public ::google::protobuf::Message {
 public:
  PBBattleCard();
  virtual ~PBBattleCard();
  
  PBBattleCard(const PBBattleCard& from);
  
  inline PBBattleCard& operator=(const PBBattleCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleCard& default_instance();
  
  void Swap(PBBattleCard* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleCard& from);
  void MergeFrom(const PBBattleCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBCard battleCard = 1;
  inline int battlecard_size() const;
  inline void clear_battlecard();
  static const int kBattleCardFieldNumber = 1;
  inline const ::PBCard& battlecard(int index) const;
  inline ::PBCard* mutable_battlecard(int index);
  inline ::PBCard* add_battlecard();
  inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
      battlecard() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
      mutable_battlecard();
  
  // @@protoc_insertion_point(class_scope:PBBattleCard)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBCard > battlecard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleCard* default_instance_;
};
// -------------------------------------------------------------------

class PBFriend : public ::google::protobuf::Message {
 public:
  PBFriend();
  virtual ~PBFriend();
  
  PBFriend(const PBFriend& from);
  
  inline PBFriend& operator=(const PBFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFriend& default_instance();
  
  void Swap(PBFriend* other);
  
  // implements Message ----------------------------------------------
  
  PBFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFriend& from);
  void MergeFrom(const PBFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 friendID = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIDFieldNumber = 1;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);
  
  // optional string friendName = 2;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 2;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  
  // optional int32 friendLevel = 3;
  inline bool has_friendlevel() const;
  inline void clear_friendlevel();
  static const int kFriendLevelFieldNumber = 3;
  inline ::google::protobuf::int32 friendlevel() const;
  inline void set_friendlevel(::google::protobuf::int32 value);
  
  // optional .PBCard friendCard = 4;
  inline bool has_friendcard() const;
  inline void clear_friendcard();
  static const int kFriendCardFieldNumber = 4;
  inline const ::PBCard& friendcard() const;
  inline ::PBCard* mutable_friendcard();
  inline ::PBCard* release_friendcard();
  
  // optional int32 FriendStatus = 5;
  inline bool has_friendstatus() const;
  inline void clear_friendstatus();
  static const int kFriendStatusFieldNumber = 5;
  inline ::google::protobuf::int32 friendstatus() const;
  inline void set_friendstatus(::google::protobuf::int32 value);
  
  // optional bool isFriend = 6;
  inline bool has_isfriend() const;
  inline void clear_isfriend();
  static const int kIsFriendFieldNumber = 6;
  inline bool isfriend() const;
  inline void set_isfriend(bool value);
  
  // optional bool isGetFriendValue = 7;
  inline bool has_isgetfriendvalue() const;
  inline void clear_isgetfriendvalue();
  static const int kIsGetFriendValueFieldNumber = 7;
  inline bool isgetfriendvalue() const;
  inline void set_isgetfriendvalue(bool value);
  
  // optional int32 fightCapacity = 8;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightCapacityFieldNumber = 8;
  inline ::google::protobuf::int32 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::int32 value);
  
  // optional int32 capitorCardFightCapacity = 9;
  inline bool has_capitorcardfightcapacity() const;
  inline void clear_capitorcardfightcapacity();
  static const int kCapitorCardFightCapacityFieldNumber = 9;
  inline ::google::protobuf::int32 capitorcardfightcapacity() const;
  inline void set_capitorcardfightcapacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBFriend)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_friendlevel();
  inline void clear_has_friendlevel();
  inline void set_has_friendcard();
  inline void clear_has_friendcard();
  inline void set_has_friendstatus();
  inline void clear_has_friendstatus();
  inline void set_has_isfriend();
  inline void clear_has_isfriend();
  inline void set_has_isgetfriendvalue();
  inline void clear_has_isgetfriendvalue();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();
  inline void set_has_capitorcardfightcapacity();
  inline void clear_has_capitorcardfightcapacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* friendname_;
  ::google::protobuf::int32 friendid_;
  ::google::protobuf::int32 friendlevel_;
  ::PBCard* friendcard_;
  ::google::protobuf::int32 friendstatus_;
  bool isfriend_;
  bool isgetfriendvalue_;
  ::google::protobuf::int32 fightcapacity_;
  ::google::protobuf::int32 capitorcardfightcapacity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBFriend* default_instance_;
};
// -------------------------------------------------------------------

class PBAllFriend : public ::google::protobuf::Message {
 public:
  PBAllFriend();
  virtual ~PBAllFriend();
  
  PBAllFriend(const PBAllFriend& from);
  
  inline PBAllFriend& operator=(const PBAllFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAllFriend& default_instance();
  
  void Swap(PBAllFriend* other);
  
  // implements Message ----------------------------------------------
  
  PBAllFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAllFriend& from);
  void MergeFrom(const PBAllFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFriend allFriend = 1;
  inline int allfriend_size() const;
  inline void clear_allfriend();
  static const int kAllFriendFieldNumber = 1;
  inline const ::PBFriend& allfriend(int index) const;
  inline ::PBFriend* mutable_allfriend(int index);
  inline ::PBFriend* add_allfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
      allfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
      mutable_allfriend();
  
  // @@protoc_insertion_point(class_scope:PBAllFriend)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFriend > allfriend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAllFriend* default_instance_;
};
// -------------------------------------------------------------------

class PBHelpFriend : public ::google::protobuf::Message {
 public:
  PBHelpFriend();
  virtual ~PBHelpFriend();
  
  PBHelpFriend(const PBHelpFriend& from);
  
  inline PBHelpFriend& operator=(const PBHelpFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBHelpFriend& default_instance();
  
  void Swap(PBHelpFriend* other);
  
  // implements Message ----------------------------------------------
  
  PBHelpFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBHelpFriend& from);
  void MergeFrom(const PBHelpFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFriend helpFriend = 1;
  inline int helpfriend_size() const;
  inline void clear_helpfriend();
  static const int kHelpFriendFieldNumber = 1;
  inline const ::PBFriend& helpfriend(int index) const;
  inline ::PBFriend* mutable_helpfriend(int index);
  inline ::PBFriend* add_helpfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
      helpfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
      mutable_helpfriend();
  
  // @@protoc_insertion_point(class_scope:PBHelpFriend)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFriend > helpfriend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBHelpFriend* default_instance_;
};
// -------------------------------------------------------------------

class PBWaitingFriend : public ::google::protobuf::Message {
 public:
  PBWaitingFriend();
  virtual ~PBWaitingFriend();
  
  PBWaitingFriend(const PBWaitingFriend& from);
  
  inline PBWaitingFriend& operator=(const PBWaitingFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBWaitingFriend& default_instance();
  
  void Swap(PBWaitingFriend* other);
  
  // implements Message ----------------------------------------------
  
  PBWaitingFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBWaitingFriend& from);
  void MergeFrom(const PBWaitingFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFriend waitingFriend = 1;
  inline int waitingfriend_size() const;
  inline void clear_waitingfriend();
  static const int kWaitingFriendFieldNumber = 1;
  inline const ::PBFriend& waitingfriend(int index) const;
  inline ::PBFriend* mutable_waitingfriend(int index);
  inline ::PBFriend* add_waitingfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
      waitingfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
      mutable_waitingfriend();
  
  // @@protoc_insertion_point(class_scope:PBWaitingFriend)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFriend > waitingfriend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBWaitingFriend* default_instance_;
};
// -------------------------------------------------------------------

class PBFriendSend : public ::google::protobuf::Message {
 public:
  PBFriendSend();
  virtual ~PBFriendSend();
  
  PBFriendSend(const PBFriendSend& from);
  
  inline PBFriendSend& operator=(const PBFriendSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFriendSend& default_instance();
  
  void Swap(PBFriendSend* other);
  
  // implements Message ----------------------------------------------
  
  PBFriendSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFriendSend& from);
  void MergeFrom(const PBFriendSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 friendID = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIDFieldNumber = 1;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBFriendSend)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 friendid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBFriendSend* default_instance_;
};
// -------------------------------------------------------------------

class PBFriendAgreeReceive : public ::google::protobuf::Message {
 public:
  PBFriendAgreeReceive();
  virtual ~PBFriendAgreeReceive();
  
  PBFriendAgreeReceive(const PBFriendAgreeReceive& from);
  
  inline PBFriendAgreeReceive& operator=(const PBFriendAgreeReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFriendAgreeReceive& default_instance();
  
  void Swap(PBFriendAgreeReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBFriendAgreeReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFriendAgreeReceive& from);
  void MergeFrom(const PBFriendAgreeReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 agreeResult = 1;
  inline bool has_agreeresult() const;
  inline void clear_agreeresult();
  static const int kAgreeResultFieldNumber = 1;
  inline ::google::protobuf::int32 agreeresult() const;
  inline void set_agreeresult(::google::protobuf::int32 value);
  
  // optional .PBWaitingFriend waitings = 2;
  inline bool has_waitings() const;
  inline void clear_waitings();
  static const int kWaitingsFieldNumber = 2;
  inline const ::PBWaitingFriend& waitings() const;
  inline ::PBWaitingFriend* mutable_waitings();
  inline ::PBWaitingFriend* release_waitings();
  
  // optional .PBAllFriend friends = 3;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 3;
  inline const ::PBAllFriend& friends() const;
  inline ::PBAllFriend* mutable_friends();
  inline ::PBAllFriend* release_friends();
  
  // @@protoc_insertion_point(class_scope:PBFriendAgreeReceive)
 private:
  inline void set_has_agreeresult();
  inline void clear_has_agreeresult();
  inline void set_has_waitings();
  inline void clear_has_waitings();
  inline void set_has_friends();
  inline void clear_has_friends();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBWaitingFriend* waitings_;
  ::PBAllFriend* friends_;
  ::google::protobuf::int32 agreeresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBFriendAgreeReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBAddFriendReceive : public ::google::protobuf::Message {
 public:
  PBAddFriendReceive();
  virtual ~PBAddFriendReceive();
  
  PBAddFriendReceive(const PBAddFriendReceive& from);
  
  inline PBAddFriendReceive& operator=(const PBAddFriendReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAddFriendReceive& default_instance();
  
  void Swap(PBAddFriendReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBAddFriendReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAddFriendReceive& from);
  void MergeFrom(const PBAddFriendReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 addResult = 1;
  inline bool has_addresult() const;
  inline void clear_addresult();
  static const int kAddResultFieldNumber = 1;
  inline ::google::protobuf::int32 addresult() const;
  inline void set_addresult(::google::protobuf::int32 value);
  
  // optional .PBAllFriend friends = 2;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 2;
  inline const ::PBAllFriend& friends() const;
  inline ::PBAllFriend* mutable_friends();
  inline ::PBAllFriend* release_friends();
  
  // @@protoc_insertion_point(class_scope:PBAddFriendReceive)
 private:
  inline void set_has_addresult();
  inline void clear_has_addresult();
  inline void set_has_friends();
  inline void clear_has_friends();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllFriend* friends_;
  ::google::protobuf::int32 addresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAddFriendReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBActivityBattle : public ::google::protobuf::Message {
 public:
  PBActivityBattle();
  virtual ~PBActivityBattle();
  
  PBActivityBattle(const PBActivityBattle& from);
  
  inline PBActivityBattle& operator=(const PBActivityBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBActivityBattle& default_instance();
  
  void Swap(PBActivityBattle* other);
  
  // implements Message ----------------------------------------------
  
  PBActivityBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBActivityBattle& from);
  void MergeFrom(const PBActivityBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string activityBattleID = 1;
  inline bool has_activitybattleid() const;
  inline void clear_activitybattleid();
  static const int kActivityBattleIDFieldNumber = 1;
  inline const ::std::string& activitybattleid() const;
  inline void set_activitybattleid(const ::std::string& value);
  inline void set_activitybattleid(const char* value);
  inline void set_activitybattleid(const char* value, size_t size);
  inline ::std::string* mutable_activitybattleid();
  inline ::std::string* release_activitybattleid();
  
  // optional int32 fightCount = 2;
  inline bool has_fightcount() const;
  inline void clear_fightcount();
  static const int kFightCountFieldNumber = 2;
  inline ::google::protobuf::int32 fightcount() const;
  inline void set_fightcount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBActivityBattle)
 private:
  inline void set_has_activitybattleid();
  inline void clear_has_activitybattleid();
  inline void set_has_fightcount();
  inline void clear_has_fightcount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* activitybattleid_;
  ::google::protobuf::int32 fightcount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBActivityBattle* default_instance_;
};
// -------------------------------------------------------------------

class PBBattle : public ::google::protobuf::Message {
 public:
  PBBattle();
  virtual ~PBBattle();
  
  PBBattle(const PBBattle& from);
  
  inline PBBattle& operator=(const PBBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattle& default_instance();
  
  void Swap(PBBattle* other);
  
  // implements Message ----------------------------------------------
  
  PBBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattle& from);
  void MergeFrom(const PBBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string pveProgress = 1;
  inline bool has_pveprogress() const;
  inline void clear_pveprogress();
  static const int kPveProgressFieldNumber = 1;
  inline const ::std::string& pveprogress() const;
  inline void set_pveprogress(const ::std::string& value);
  inline void set_pveprogress(const char* value);
  inline void set_pveprogress(const char* value, size_t size);
  inline ::std::string* mutable_pveprogress();
  inline ::std::string* release_pveprogress();
  
  // repeated .PBActivityBattle allActivityBattle = 2;
  inline int allactivitybattle_size() const;
  inline void clear_allactivitybattle();
  static const int kAllActivityBattleFieldNumber = 2;
  inline const ::PBActivityBattle& allactivitybattle(int index) const;
  inline ::PBActivityBattle* mutable_allactivitybattle(int index);
  inline ::PBActivityBattle* add_allactivitybattle();
  inline const ::google::protobuf::RepeatedPtrField< ::PBActivityBattle >&
      allactivitybattle() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBActivityBattle >*
      mutable_allactivitybattle();
  
  // @@protoc_insertion_point(class_scope:PBBattle)
 private:
  inline void set_has_pveprogress();
  inline void clear_has_pveprogress();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pveprogress_;
  ::google::protobuf::RepeatedPtrField< ::PBActivityBattle > allactivitybattle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattle* default_instance_;
};
// -------------------------------------------------------------------

class PBGem : public ::google::protobuf::Message {
 public:
  PBGem();
  virtual ~PBGem();
  
  PBGem(const PBGem& from);
  
  inline PBGem& operator=(const PBGem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGem& default_instance();
  
  void Swap(PBGem* other);
  
  // implements Message ----------------------------------------------
  
  PBGem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGem& from);
  void MergeFrom(const PBGem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string gemID = 1;
  inline bool has_gemid() const;
  inline void clear_gemid();
  static const int kGemIDFieldNumber = 1;
  inline const ::std::string& gemid() const;
  inline void set_gemid(const ::std::string& value);
  inline void set_gemid(const char* value);
  inline void set_gemid(const char* value, size_t size);
  inline ::std::string* mutable_gemid();
  inline ::std::string* release_gemid();
  
  // optional int32 gemNumber = 2;
  inline bool has_gemnumber() const;
  inline void clear_gemnumber();
  static const int kGemNumberFieldNumber = 2;
  inline ::google::protobuf::int32 gemnumber() const;
  inline void set_gemnumber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBGem)
 private:
  inline void set_has_gemid();
  inline void clear_has_gemid();
  inline void set_has_gemnumber();
  inline void clear_has_gemnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* gemid_;
  ::google::protobuf::int32 gemnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBGem* default_instance_;
};
// -------------------------------------------------------------------

class PBAllGem : public ::google::protobuf::Message {
 public:
  PBAllGem();
  virtual ~PBAllGem();
  
  PBAllGem(const PBAllGem& from);
  
  inline PBAllGem& operator=(const PBAllGem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAllGem& default_instance();
  
  void Swap(PBAllGem* other);
  
  // implements Message ----------------------------------------------
  
  PBAllGem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAllGem& from);
  void MergeFrom(const PBAllGem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBGem allGem = 1;
  inline int allgem_size() const;
  inline void clear_allgem();
  static const int kAllGemFieldNumber = 1;
  inline const ::PBGem& allgem(int index) const;
  inline ::PBGem* mutable_allgem(int index);
  inline ::PBGem* add_allgem();
  inline const ::google::protobuf::RepeatedPtrField< ::PBGem >&
      allgem() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBGem >*
      mutable_allgem();
  
  // @@protoc_insertion_point(class_scope:PBAllGem)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBGem > allgem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAllGem* default_instance_;
};
// -------------------------------------------------------------------

class PBMission : public ::google::protobuf::Message {
 public:
  PBMission();
  virtual ~PBMission();
  
  PBMission(const PBMission& from);
  
  inline PBMission& operator=(const PBMission& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMission& default_instance();
  
  void Swap(PBMission* other);
  
  // implements Message ----------------------------------------------
  
  PBMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMission& from);
  void MergeFrom(const PBMission& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 missionID = 1;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionIDFieldNumber = 1;
  inline ::google::protobuf::int32 missionid() const;
  inline void set_missionid(::google::protobuf::int32 value);
  
  // optional bool isMissinFinished = 2;
  inline bool has_ismissinfinished() const;
  inline void clear_ismissinfinished();
  static const int kIsMissinFinishedFieldNumber = 2;
  inline bool ismissinfinished() const;
  inline void set_ismissinfinished(bool value);
  
  // optional string missonProgress = 3;
  inline bool has_missonprogress() const;
  inline void clear_missonprogress();
  static const int kMissonProgressFieldNumber = 3;
  inline const ::std::string& missonprogress() const;
  inline void set_missonprogress(const ::std::string& value);
  inline void set_missonprogress(const char* value);
  inline void set_missonprogress(const char* value, size_t size);
  inline ::std::string* mutable_missonprogress();
  inline ::std::string* release_missonprogress();
  
  // @@protoc_insertion_point(class_scope:PBMission)
 private:
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_ismissinfinished();
  inline void clear_has_ismissinfinished();
  inline void set_has_missonprogress();
  inline void clear_has_missonprogress();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 missionid_;
  bool ismissinfinished_;
  ::std::string* missonprogress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMission* default_instance_;
};
// -------------------------------------------------------------------

class PBAllMission : public ::google::protobuf::Message {
 public:
  PBAllMission();
  virtual ~PBAllMission();
  
  PBAllMission(const PBAllMission& from);
  
  inline PBAllMission& operator=(const PBAllMission& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAllMission& default_instance();
  
  void Swap(PBAllMission* other);
  
  // implements Message ----------------------------------------------
  
  PBAllMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAllMission& from);
  void MergeFrom(const PBAllMission& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBMission allMission = 1;
  inline int allmission_size() const;
  inline void clear_allmission();
  static const int kAllMissionFieldNumber = 1;
  inline const ::PBMission& allmission(int index) const;
  inline ::PBMission* mutable_allmission(int index);
  inline ::PBMission* add_allmission();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMission >&
      allmission() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMission >*
      mutable_allmission();
  
  // @@protoc_insertion_point(class_scope:PBAllMission)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBMission > allmission_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAllMission* default_instance_;
};
// -------------------------------------------------------------------

class PBMissionAwardSend : public ::google::protobuf::Message {
 public:
  PBMissionAwardSend();
  virtual ~PBMissionAwardSend();
  
  PBMissionAwardSend(const PBMissionAwardSend& from);
  
  inline PBMissionAwardSend& operator=(const PBMissionAwardSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMissionAwardSend& default_instance();
  
  void Swap(PBMissionAwardSend* other);
  
  // implements Message ----------------------------------------------
  
  PBMissionAwardSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMissionAwardSend& from);
  void MergeFrom(const PBMissionAwardSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 missionID = 1;
  inline int missionid_size() const;
  inline void clear_missionid();
  static const int kMissionIDFieldNumber = 1;
  inline ::google::protobuf::int32 missionid(int index) const;
  inline void set_missionid(int index, ::google::protobuf::int32 value);
  inline void add_missionid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      missionid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_missionid();
  
  // @@protoc_insertion_point(class_scope:PBMissionAwardSend)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > missionid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMissionAwardSend* default_instance_;
};
// -------------------------------------------------------------------

class PBUser : public ::google::protobuf::Message {
 public:
  PBUser();
  virtual ~PBUser();
  
  PBUser(const PBUser& from);
  
  inline PBUser& operator=(const PBUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUser& default_instance();
  
  void Swap(PBUser* other);
  
  // implements Message ----------------------------------------------
  
  PBUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUser& from);
  void MergeFrom(const PBUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);
  
  // optional string userName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional int32 userLevel = 3;
  inline bool has_userlevel() const;
  inline void clear_userlevel();
  static const int kUserLevelFieldNumber = 3;
  inline ::google::protobuf::int32 userlevel() const;
  inline void set_userlevel(::google::protobuf::int32 value);
  
  // optional int32 userExp = 4;
  inline bool has_userexp() const;
  inline void clear_userexp();
  static const int kUserExpFieldNumber = 4;
  inline ::google::protobuf::int32 userexp() const;
  inline void set_userexp(::google::protobuf::int32 value);
  
  // optional int32 energy = 5;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 5;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);
  
  // optional int32 nextEnergyTime = 6;
  inline bool has_nextenergytime() const;
  inline void clear_nextenergytime();
  static const int kNextEnergyTimeFieldNumber = 6;
  inline ::google::protobuf::int32 nextenergytime() const;
  inline void set_nextenergytime(::google::protobuf::int32 value);
  
  // optional int32 buyEnergyTime = 7;
  inline bool has_buyenergytime() const;
  inline void clear_buyenergytime();
  static const int kBuyEnergyTimeFieldNumber = 7;
  inline ::google::protobuf::int32 buyenergytime() const;
  inline void set_buyenergytime(::google::protobuf::int32 value);
  
  // optional int32 diamondNumber = 8;
  inline bool has_diamondnumber() const;
  inline void clear_diamondnumber();
  static const int kDiamondNumberFieldNumber = 8;
  inline ::google::protobuf::int32 diamondnumber() const;
  inline void set_diamondnumber(::google::protobuf::int32 value);
  
  // optional int32 friendValue = 9;
  inline bool has_friendvalue() const;
  inline void clear_friendvalue();
  static const int kFriendValueFieldNumber = 9;
  inline ::google::protobuf::int32 friendvalue() const;
  inline void set_friendvalue(::google::protobuf::int32 value);
  
  // optional int32 goldNumber = 10;
  inline bool has_goldnumber() const;
  inline void clear_goldnumber();
  static const int kGoldNumberFieldNumber = 10;
  inline ::google::protobuf::int32 goldnumber() const;
  inline void set_goldnumber(::google::protobuf::int32 value);
  
  // optional int32 leaderValue = 11;
  inline bool has_leadervalue() const;
  inline void clear_leadervalue();
  static const int kLeaderValueFieldNumber = 11;
  inline ::google::protobuf::int32 leadervalue() const;
  inline void set_leadervalue(::google::protobuf::int32 value);
  
  // optional bool hasMissionFinished = 12;
  inline bool has_hasmissionfinished() const;
  inline void clear_hasmissionfinished();
  static const int kHasMissionFinishedFieldNumber = 12;
  inline bool hasmissionfinished() const;
  inline void set_hasmissionfinished(bool value);
  
  // optional int32 bagMaxCount = 13;
  inline bool has_bagmaxcount() const;
  inline void clear_bagmaxcount();
  static const int kBagMaxCountFieldNumber = 13;
  inline ::google::protobuf::int32 bagmaxcount() const;
  inline void set_bagmaxcount(::google::protobuf::int32 value);
  
  // optional int32 energyAgentiaCount = 14;
  inline bool has_energyagentiacount() const;
  inline void clear_energyagentiacount();
  static const int kEnergyAgentiaCountFieldNumber = 14;
  inline ::google::protobuf::int32 energyagentiacount() const;
  inline void set_energyagentiacount(::google::protobuf::int32 value);
  
  // optional int32 captainIndex = 15;
  inline bool has_captainindex() const;
  inline void clear_captainindex();
  static const int kCaptainIndexFieldNumber = 15;
  inline ::google::protobuf::int32 captainindex() const;
  inline void set_captainindex(::google::protobuf::int32 value);
  
  // optional int32 rechargedDiamond = 16;
  inline bool has_rechargeddiamond() const;
  inline void clear_rechargeddiamond();
  static const int kRechargedDiamondFieldNumber = 16;
  inline ::google::protobuf::int32 rechargeddiamond() const;
  inline void set_rechargeddiamond(::google::protobuf::int32 value);
  
  // optional int32 wipeOutCount = 17;
  inline bool has_wipeoutcount() const;
  inline void clear_wipeoutcount();
  static const int kWipeOutCountFieldNumber = 17;
  inline ::google::protobuf::int32 wipeoutcount() const;
  inline void set_wipeoutcount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBUser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userlevel();
  inline void clear_has_userlevel();
  inline void set_has_userexp();
  inline void clear_has_userexp();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_nextenergytime();
  inline void clear_has_nextenergytime();
  inline void set_has_buyenergytime();
  inline void clear_has_buyenergytime();
  inline void set_has_diamondnumber();
  inline void clear_has_diamondnumber();
  inline void set_has_friendvalue();
  inline void clear_has_friendvalue();
  inline void set_has_goldnumber();
  inline void clear_has_goldnumber();
  inline void set_has_leadervalue();
  inline void clear_has_leadervalue();
  inline void set_has_hasmissionfinished();
  inline void clear_has_hasmissionfinished();
  inline void set_has_bagmaxcount();
  inline void clear_has_bagmaxcount();
  inline void set_has_energyagentiacount();
  inline void clear_has_energyagentiacount();
  inline void set_has_captainindex();
  inline void clear_has_captainindex();
  inline void set_has_rechargeddiamond();
  inline void clear_has_rechargeddiamond();
  inline void set_has_wipeoutcount();
  inline void clear_has_wipeoutcount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 userlevel_;
  ::google::protobuf::int32 userexp_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 nextenergytime_;
  ::google::protobuf::int32 buyenergytime_;
  ::google::protobuf::int32 diamondnumber_;
  ::google::protobuf::int32 friendvalue_;
  ::google::protobuf::int32 goldnumber_;
  ::google::protobuf::int32 leadervalue_;
  bool hasmissionfinished_;
  ::google::protobuf::int32 bagmaxcount_;
  ::google::protobuf::int32 energyagentiacount_;
  ::google::protobuf::int32 captainindex_;
  ::google::protobuf::int32 rechargeddiamond_;
  ::google::protobuf::int32 wipeoutcount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBUser* default_instance_;
};
// -------------------------------------------------------------------

class PBMissionAwardReceive : public ::google::protobuf::Message {
 public:
  PBMissionAwardReceive();
  virtual ~PBMissionAwardReceive();
  
  PBMissionAwardReceive(const PBMissionAwardReceive& from);
  
  inline PBMissionAwardReceive& operator=(const PBMissionAwardReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMissionAwardReceive& default_instance();
  
  void Swap(PBMissionAwardReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBMissionAwardReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMissionAwardReceive& from);
  void MergeFrom(const PBMissionAwardReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBUser user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // optional .PBAllCard cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // optional .PBAllGem gems = 3;
  inline bool has_gems() const;
  inline void clear_gems();
  static const int kGemsFieldNumber = 3;
  inline const ::PBAllGem& gems() const;
  inline ::PBAllGem* mutable_gems();
  inline ::PBAllGem* release_gems();
  
  // @@protoc_insertion_point(class_scope:PBMissionAwardReceive)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_gems();
  inline void clear_has_gems();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  ::PBAllCard* cards_;
  ::PBAllGem* gems_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMissionAwardReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBRunningAfficheReceive : public ::google::protobuf::Message {
 public:
  PBRunningAfficheReceive();
  virtual ~PBRunningAfficheReceive();
  
  PBRunningAfficheReceive(const PBRunningAfficheReceive& from);
  
  inline PBRunningAfficheReceive& operator=(const PBRunningAfficheReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRunningAfficheReceive& default_instance();
  
  void Swap(PBRunningAfficheReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBRunningAfficheReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRunningAfficheReceive& from);
  void MergeFrom(const PBRunningAfficheReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string affiches = 1;
  inline int affiches_size() const;
  inline void clear_affiches();
  static const int kAffichesFieldNumber = 1;
  inline const ::std::string& affiches(int index) const;
  inline ::std::string* mutable_affiches(int index);
  inline void set_affiches(int index, const ::std::string& value);
  inline void set_affiches(int index, const char* value);
  inline void set_affiches(int index, const char* value, size_t size);
  inline ::std::string* add_affiches();
  inline void add_affiches(const ::std::string& value);
  inline void add_affiches(const char* value);
  inline void add_affiches(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& affiches() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_affiches();
  
  // @@protoc_insertion_point(class_scope:PBRunningAfficheReceive)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> affiches_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBRunningAfficheReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBAwardSend : public ::google::protobuf::Message {
 public:
  PBAwardSend();
  virtual ~PBAwardSend();
  
  PBAwardSend(const PBAwardSend& from);
  
  inline PBAwardSend& operator=(const PBAwardSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAwardSend& default_instance();
  
  void Swap(PBAwardSend* other);
  
  // implements Message ----------------------------------------------
  
  PBAwardSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAwardSend& from);
  void MergeFrom(const PBAwardSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 awardType = 1;
  inline bool has_awardtype() const;
  inline void clear_awardtype();
  static const int kAwardTypeFieldNumber = 1;
  inline ::google::protobuf::int32 awardtype() const;
  inline void set_awardtype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBAwardSend)
 private:
  inline void set_has_awardtype();
  inline void clear_has_awardtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 awardtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAwardSend* default_instance_;
};
// -------------------------------------------------------------------

class PBAwardReceive : public ::google::protobuf::Message {
 public:
  PBAwardReceive();
  virtual ~PBAwardReceive();
  
  PBAwardReceive(const PBAwardReceive& from);
  
  inline PBAwardReceive& operator=(const PBAwardReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAwardReceive& default_instance();
  
  void Swap(PBAwardReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBAwardReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAwardReceive& from);
  void MergeFrom(const PBAwardReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 awardResult = 1;
  inline bool has_awardresult() const;
  inline void clear_awardresult();
  static const int kAwardResultFieldNumber = 1;
  inline ::google::protobuf::int32 awardresult() const;
  inline void set_awardresult(::google::protobuf::int32 value);
  
  // optional .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // optional .PBAllCard cards = 3;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // repeated .PBCard awardCard = 4;
  inline int awardcard_size() const;
  inline void clear_awardcard();
  static const int kAwardCardFieldNumber = 4;
  inline const ::PBCard& awardcard(int index) const;
  inline ::PBCard* mutable_awardcard(int index);
  inline ::PBCard* add_awardcard();
  inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
      awardcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
      mutable_awardcard();
  
  // optional .PBAllGem gems = 5;
  inline bool has_gems() const;
  inline void clear_gems();
  static const int kGemsFieldNumber = 5;
  inline const ::PBAllGem& gems() const;
  inline ::PBAllGem* mutable_gems();
  inline ::PBAllGem* release_gems();
  
  // repeated .PBGem awardGem = 6;
  inline int awardgem_size() const;
  inline void clear_awardgem();
  static const int kAwardGemFieldNumber = 6;
  inline const ::PBGem& awardgem(int index) const;
  inline ::PBGem* mutable_awardgem(int index);
  inline ::PBGem* add_awardgem();
  inline const ::google::protobuf::RepeatedPtrField< ::PBGem >&
      awardgem() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBGem >*
      mutable_awardgem();
  
  // @@protoc_insertion_point(class_scope:PBAwardReceive)
 private:
  inline void set_has_awardresult();
  inline void clear_has_awardresult();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_gems();
  inline void clear_has_gems();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  ::PBAllCard* cards_;
  ::google::protobuf::RepeatedPtrField< ::PBCard > awardcard_;
  ::PBAllGem* gems_;
  ::google::protobuf::RepeatedPtrField< ::PBGem > awardgem_;
  ::google::protobuf::int32 awardresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAwardReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBUseEnergyReceive : public ::google::protobuf::Message {
 public:
  PBUseEnergyReceive();
  virtual ~PBUseEnergyReceive();
  
  PBUseEnergyReceive(const PBUseEnergyReceive& from);
  
  inline PBUseEnergyReceive& operator=(const PBUseEnergyReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUseEnergyReceive& default_instance();
  
  void Swap(PBUseEnergyReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBUseEnergyReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUseEnergyReceive& from);
  void MergeFrom(const PBUseEnergyReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // @@protoc_insertion_point(class_scope:PBUseEnergyReceive)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBUseEnergyReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBRegisterCheckSend : public ::google::protobuf::Message {
 public:
  PBRegisterCheckSend();
  virtual ~PBRegisterCheckSend();
  
  PBRegisterCheckSend(const PBRegisterCheckSend& from);
  
  inline PBRegisterCheckSend& operator=(const PBRegisterCheckSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRegisterCheckSend& default_instance();
  
  void Swap(PBRegisterCheckSend* other);
  
  // implements Message ----------------------------------------------
  
  PBRegisterCheckSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRegisterCheckSend& from);
  void MergeFrom(const PBRegisterCheckSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string macAddress = 1;
  inline bool has_macaddress() const;
  inline void clear_macaddress();
  static const int kMacAddressFieldNumber = 1;
  inline const ::std::string& macaddress() const;
  inline void set_macaddress(const ::std::string& value);
  inline void set_macaddress(const char* value);
  inline void set_macaddress(const char* value, size_t size);
  inline ::std::string* mutable_macaddress();
  inline ::std::string* release_macaddress();
  
  // optional int32 userSourceType = 2;
  inline bool has_usersourcetype() const;
  inline void clear_usersourcetype();
  static const int kUserSourceTypeFieldNumber = 2;
  inline ::google::protobuf::int32 usersourcetype() const;
  inline void set_usersourcetype(::google::protobuf::int32 value);
  
  // optional string userAccount = 3;
  inline bool has_useraccount() const;
  inline void clear_useraccount();
  static const int kUserAccountFieldNumber = 3;
  inline const ::std::string& useraccount() const;
  inline void set_useraccount(const ::std::string& value);
  inline void set_useraccount(const char* value);
  inline void set_useraccount(const char* value, size_t size);
  inline ::std::string* mutable_useraccount();
  inline ::std::string* release_useraccount();
  
  // optional string userPasswd = 4;
  inline bool has_userpasswd() const;
  inline void clear_userpasswd();
  static const int kUserPasswdFieldNumber = 4;
  inline const ::std::string& userpasswd() const;
  inline void set_userpasswd(const ::std::string& value);
  inline void set_userpasswd(const char* value);
  inline void set_userpasswd(const char* value, size_t size);
  inline ::std::string* mutable_userpasswd();
  inline ::std::string* release_userpasswd();
  
  // optional string userName = 5;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 5;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // @@protoc_insertion_point(class_scope:PBRegisterCheckSend)
 private:
  inline void set_has_macaddress();
  inline void clear_has_macaddress();
  inline void set_has_usersourcetype();
  inline void clear_has_usersourcetype();
  inline void set_has_useraccount();
  inline void clear_has_useraccount();
  inline void set_has_userpasswd();
  inline void clear_has_userpasswd();
  inline void set_has_username();
  inline void clear_has_username();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* macaddress_;
  ::std::string* useraccount_;
  ::std::string* userpasswd_;
  ::std::string* username_;
  ::google::protobuf::int32 usersourcetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBRegisterCheckSend* default_instance_;
};
// -------------------------------------------------------------------

class PBRegisterCheckReceive : public ::google::protobuf::Message {
 public:
  PBRegisterCheckReceive();
  virtual ~PBRegisterCheckReceive();
  
  PBRegisterCheckReceive(const PBRegisterCheckReceive& from);
  
  inline PBRegisterCheckReceive& operator=(const PBRegisterCheckReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRegisterCheckReceive& default_instance();
  
  void Swap(PBRegisterCheckReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBRegisterCheckReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRegisterCheckReceive& from);
  void MergeFrom(const PBRegisterCheckReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBRegisterCheckReceive)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBRegisterCheckReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBRegisterSend : public ::google::protobuf::Message {
 public:
  PBRegisterSend();
  virtual ~PBRegisterSend();
  
  PBRegisterSend(const PBRegisterSend& from);
  
  inline PBRegisterSend& operator=(const PBRegisterSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRegisterSend& default_instance();
  
  void Swap(PBRegisterSend* other);
  
  // implements Message ----------------------------------------------
  
  PBRegisterSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRegisterSend& from);
  void MergeFrom(const PBRegisterSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string macAddress = 1;
  inline bool has_macaddress() const;
  inline void clear_macaddress();
  static const int kMacAddressFieldNumber = 1;
  inline const ::std::string& macaddress() const;
  inline void set_macaddress(const ::std::string& value);
  inline void set_macaddress(const char* value);
  inline void set_macaddress(const char* value, size_t size);
  inline ::std::string* mutable_macaddress();
  inline ::std::string* release_macaddress();
  
  // optional int32 userSourceType = 2;
  inline bool has_usersourcetype() const;
  inline void clear_usersourcetype();
  static const int kUserSourceTypeFieldNumber = 2;
  inline ::google::protobuf::int32 usersourcetype() const;
  inline void set_usersourcetype(::google::protobuf::int32 value);
  
  // optional string userAccount = 3;
  inline bool has_useraccount() const;
  inline void clear_useraccount();
  static const int kUserAccountFieldNumber = 3;
  inline const ::std::string& useraccount() const;
  inline void set_useraccount(const ::std::string& value);
  inline void set_useraccount(const char* value);
  inline void set_useraccount(const char* value, size_t size);
  inline ::std::string* mutable_useraccount();
  inline ::std::string* release_useraccount();
  
  // optional string userPasswd = 4;
  inline bool has_userpasswd() const;
  inline void clear_userpasswd();
  static const int kUserPasswdFieldNumber = 4;
  inline const ::std::string& userpasswd() const;
  inline void set_userpasswd(const ::std::string& value);
  inline void set_userpasswd(const char* value);
  inline void set_userpasswd(const char* value, size_t size);
  inline ::std::string* mutable_userpasswd();
  inline ::std::string* release_userpasswd();
  
  // optional string userName = 5;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 5;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional int32 captainIndex = 6;
  inline bool has_captainindex() const;
  inline void clear_captainindex();
  static const int kCaptainIndexFieldNumber = 6;
  inline ::google::protobuf::int32 captainindex() const;
  inline void set_captainindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBRegisterSend)
 private:
  inline void set_has_macaddress();
  inline void clear_has_macaddress();
  inline void set_has_usersourcetype();
  inline void clear_has_usersourcetype();
  inline void set_has_useraccount();
  inline void clear_has_useraccount();
  inline void set_has_userpasswd();
  inline void clear_has_userpasswd();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_captainindex();
  inline void clear_has_captainindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* macaddress_;
  ::std::string* useraccount_;
  ::std::string* userpasswd_;
  ::google::protobuf::int32 usersourcetype_;
  ::google::protobuf::int32 captainindex_;
  ::std::string* username_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBRegisterSend* default_instance_;
};
// -------------------------------------------------------------------

class PBLoginSend : public ::google::protobuf::Message {
 public:
  PBLoginSend();
  virtual ~PBLoginSend();
  
  PBLoginSend(const PBLoginSend& from);
  
  inline PBLoginSend& operator=(const PBLoginSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBLoginSend& default_instance();
  
  void Swap(PBLoginSend* other);
  
  // implements Message ----------------------------------------------
  
  PBLoginSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBLoginSend& from);
  void MergeFrom(const PBLoginSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string macAddress = 1;
  inline bool has_macaddress() const;
  inline void clear_macaddress();
  static const int kMacAddressFieldNumber = 1;
  inline const ::std::string& macaddress() const;
  inline void set_macaddress(const ::std::string& value);
  inline void set_macaddress(const char* value);
  inline void set_macaddress(const char* value, size_t size);
  inline ::std::string* mutable_macaddress();
  inline ::std::string* release_macaddress();
  
  // optional int32 userSourceType = 2;
  inline bool has_usersourcetype() const;
  inline void clear_usersourcetype();
  static const int kUserSourceTypeFieldNumber = 2;
  inline ::google::protobuf::int32 usersourcetype() const;
  inline void set_usersourcetype(::google::protobuf::int32 value);
  
  // optional string userAccount = 3;
  inline bool has_useraccount() const;
  inline void clear_useraccount();
  static const int kUserAccountFieldNumber = 3;
  inline const ::std::string& useraccount() const;
  inline void set_useraccount(const ::std::string& value);
  inline void set_useraccount(const char* value);
  inline void set_useraccount(const char* value, size_t size);
  inline ::std::string* mutable_useraccount();
  inline ::std::string* release_useraccount();
  
  // optional string userPasswd = 4;
  inline bool has_userpasswd() const;
  inline void clear_userpasswd();
  static const int kUserPasswdFieldNumber = 4;
  inline const ::std::string& userpasswd() const;
  inline void set_userpasswd(const ::std::string& value);
  inline void set_userpasswd(const char* value);
  inline void set_userpasswd(const char* value, size_t size);
  inline ::std::string* mutable_userpasswd();
  inline ::std::string* release_userpasswd();
  
  // @@protoc_insertion_point(class_scope:PBLoginSend)
 private:
  inline void set_has_macaddress();
  inline void clear_has_macaddress();
  inline void set_has_usersourcetype();
  inline void clear_has_usersourcetype();
  inline void set_has_useraccount();
  inline void clear_has_useraccount();
  inline void set_has_userpasswd();
  inline void clear_has_userpasswd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* macaddress_;
  ::std::string* useraccount_;
  ::std::string* userpasswd_;
  ::google::protobuf::int32 usersourcetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBLoginSend* default_instance_;
};
// -------------------------------------------------------------------

class PBLoginReceive : public ::google::protobuf::Message {
 public:
  PBLoginReceive();
  virtual ~PBLoginReceive();
  
  PBLoginReceive(const PBLoginReceive& from);
  
  inline PBLoginReceive& operator=(const PBLoginReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBLoginReceive& default_instance();
  
  void Swap(PBLoginReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBLoginReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBLoginReceive& from);
  void MergeFrom(const PBLoginReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // optional .PBBattle battle = 3;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 3;
  inline const ::PBBattle& battle() const;
  inline ::PBBattle* mutable_battle();
  inline ::PBBattle* release_battle();
  
  // optional .PBAllCard cards = 4;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 4;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // optional .PBAllMission missions = 5;
  inline bool has_missions() const;
  inline void clear_missions();
  static const int kMissionsFieldNumber = 5;
  inline const ::PBAllMission& missions() const;
  inline ::PBAllMission* mutable_missions();
  inline ::PBAllMission* release_missions();
  
  // optional .PBBattleCard battleCards = 6;
  inline bool has_battlecards() const;
  inline void clear_battlecards();
  static const int kBattleCardsFieldNumber = 6;
  inline const ::PBBattleCard& battlecards() const;
  inline ::PBBattleCard* mutable_battlecards();
  inline ::PBBattleCard* release_battlecards();
  
  // optional .PBAllGem gems = 7;
  inline bool has_gems() const;
  inline void clear_gems();
  static const int kGemsFieldNumber = 7;
  inline const ::PBAllGem& gems() const;
  inline ::PBAllGem* mutable_gems();
  inline ::PBAllGem* release_gems();
  
  // optional string token = 8;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 8;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // optional int32 fightCapacity = 9;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightCapacityFieldNumber = 9;
  inline ::google::protobuf::int32 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBLoginReceive)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_missions();
  inline void clear_has_missions();
  inline void set_has_battlecards();
  inline void clear_has_battlecards();
  inline void set_has_gems();
  inline void clear_has_gems();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  ::PBBattle* battle_;
  ::PBAllCard* cards_;
  ::PBAllMission* missions_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 fightcapacity_;
  ::PBBattleCard* battlecards_;
  ::PBAllGem* gems_;
  ::std::string* token_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBLoginReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBCardLevelUpSend : public ::google::protobuf::Message {
 public:
  PBCardLevelUpSend();
  virtual ~PBCardLevelUpSend();
  
  PBCardLevelUpSend(const PBCardLevelUpSend& from);
  
  inline PBCardLevelUpSend& operator=(const PBCardLevelUpSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardLevelUpSend& default_instance();
  
  void Swap(PBCardLevelUpSend* other);
  
  // implements Message ----------------------------------------------
  
  PBCardLevelUpSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardLevelUpSend& from);
  void MergeFrom(const PBCardLevelUpSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 upCardItemID = 1;
  inline bool has_upcarditemid() const;
  inline void clear_upcarditemid();
  static const int kUpCardItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 upcarditemid() const;
  inline void set_upcarditemid(::google::protobuf::int32 value);
  
  // repeated int32 eatCardItemIDs = 2;
  inline int eatcarditemids_size() const;
  inline void clear_eatcarditemids();
  static const int kEatCardItemIDsFieldNumber = 2;
  inline ::google::protobuf::int32 eatcarditemids(int index) const;
  inline void set_eatcarditemids(int index, ::google::protobuf::int32 value);
  inline void add_eatcarditemids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      eatcarditemids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_eatcarditemids();
  
  // @@protoc_insertion_point(class_scope:PBCardLevelUpSend)
 private:
  inline void set_has_upcarditemid();
  inline void clear_has_upcarditemid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > eatcarditemids_;
  ::google::protobuf::int32 upcarditemid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardLevelUpSend* default_instance_;
};
// -------------------------------------------------------------------

class PBCardLevelUpReceive : public ::google::protobuf::Message {
 public:
  PBCardLevelUpReceive();
  virtual ~PBCardLevelUpReceive();
  
  PBCardLevelUpReceive(const PBCardLevelUpReceive& from);
  
  inline PBCardLevelUpReceive& operator=(const PBCardLevelUpReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardLevelUpReceive& default_instance();
  
  void Swap(PBCardLevelUpReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBCardLevelUpReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardLevelUpReceive& from);
  void MergeFrom(const PBCardLevelUpReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 upResult = 1;
  inline bool has_upresult() const;
  inline void clear_upresult();
  static const int kUpResultFieldNumber = 1;
  inline ::google::protobuf::int32 upresult() const;
  inline void set_upresult(::google::protobuf::int32 value);
  
  // optional .PBAllCard cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // optional int32 goldNumber = 3;
  inline bool has_goldnumber() const;
  inline void clear_goldnumber();
  static const int kGoldNumberFieldNumber = 3;
  inline ::google::protobuf::int32 goldnumber() const;
  inline void set_goldnumber(::google::protobuf::int32 value);
  
  // optional .PBCard targetCard = 4;
  inline bool has_targetcard() const;
  inline void clear_targetcard();
  static const int kTargetCardFieldNumber = 4;
  inline const ::PBCard& targetcard() const;
  inline ::PBCard* mutable_targetcard();
  inline ::PBCard* release_targetcard();
  
  // optional int32 fightCapacity = 5;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightCapacityFieldNumber = 5;
  inline ::google::protobuf::int32 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBCardLevelUpReceive)
 private:
  inline void set_has_upresult();
  inline void clear_has_upresult();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_goldnumber();
  inline void clear_has_goldnumber();
  inline void set_has_targetcard();
  inline void clear_has_targetcard();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllCard* cards_;
  ::google::protobuf::int32 upresult_;
  ::google::protobuf::int32 goldnumber_;
  ::PBCard* targetcard_;
  ::google::protobuf::int32 fightcapacity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardLevelUpReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBCardEvolutionSend : public ::google::protobuf::Message {
 public:
  PBCardEvolutionSend();
  virtual ~PBCardEvolutionSend();
  
  PBCardEvolutionSend(const PBCardEvolutionSend& from);
  
  inline PBCardEvolutionSend& operator=(const PBCardEvolutionSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardEvolutionSend& default_instance();
  
  void Swap(PBCardEvolutionSend* other);
  
  // implements Message ----------------------------------------------
  
  PBCardEvolutionSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardEvolutionSend& from);
  void MergeFrom(const PBCardEvolutionSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 targetCardItemID = 1;
  inline bool has_targetcarditemid() const;
  inline void clear_targetcarditemid();
  static const int kTargetCardItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 targetcarditemid() const;
  inline void set_targetcarditemid(::google::protobuf::int32 value);
  
  // optional string targetGemId = 2;
  inline bool has_targetgemid() const;
  inline void clear_targetgemid();
  static const int kTargetGemIdFieldNumber = 2;
  inline const ::std::string& targetgemid() const;
  inline void set_targetgemid(const ::std::string& value);
  inline void set_targetgemid(const char* value);
  inline void set_targetgemid(const char* value, size_t size);
  inline ::std::string* mutable_targetgemid();
  inline ::std::string* release_targetgemid();
  
  // repeated int32 materialCardItemIDs = 3;
  inline int materialcarditemids_size() const;
  inline void clear_materialcarditemids();
  static const int kMaterialCardItemIDsFieldNumber = 3;
  inline ::google::protobuf::int32 materialcarditemids(int index) const;
  inline void set_materialcarditemids(int index, ::google::protobuf::int32 value);
  inline void add_materialcarditemids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      materialcarditemids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_materialcarditemids();
  
  // optional string gemID = 4;
  inline bool has_gemid() const;
  inline void clear_gemid();
  static const int kGemIDFieldNumber = 4;
  inline const ::std::string& gemid() const;
  inline void set_gemid(const ::std::string& value);
  inline void set_gemid(const char* value);
  inline void set_gemid(const char* value, size_t size);
  inline ::std::string* mutable_gemid();
  inline ::std::string* release_gemid();
  
  // @@protoc_insertion_point(class_scope:PBCardEvolutionSend)
 private:
  inline void set_has_targetcarditemid();
  inline void clear_has_targetcarditemid();
  inline void set_has_targetgemid();
  inline void clear_has_targetgemid();
  inline void set_has_gemid();
  inline void clear_has_gemid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* targetgemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > materialcarditemids_;
  ::std::string* gemid_;
  ::google::protobuf::int32 targetcarditemid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardEvolutionSend* default_instance_;
};
// -------------------------------------------------------------------

class PBCardEvolutionRecieve : public ::google::protobuf::Message {
 public:
  PBCardEvolutionRecieve();
  virtual ~PBCardEvolutionRecieve();
  
  PBCardEvolutionRecieve(const PBCardEvolutionRecieve& from);
  
  inline PBCardEvolutionRecieve& operator=(const PBCardEvolutionRecieve& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardEvolutionRecieve& default_instance();
  
  void Swap(PBCardEvolutionRecieve* other);
  
  // implements Message ----------------------------------------------
  
  PBCardEvolutionRecieve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardEvolutionRecieve& from);
  void MergeFrom(const PBCardEvolutionRecieve& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 evolutionResult = 1;
  inline bool has_evolutionresult() const;
  inline void clear_evolutionresult();
  static const int kEvolutionResultFieldNumber = 1;
  inline ::google::protobuf::int32 evolutionresult() const;
  inline void set_evolutionresult(::google::protobuf::int32 value);
  
  // optional .PBCard targetCard = 2;
  inline bool has_targetcard() const;
  inline void clear_targetcard();
  static const int kTargetCardFieldNumber = 2;
  inline const ::PBCard& targetcard() const;
  inline ::PBCard* mutable_targetcard();
  inline ::PBCard* release_targetcard();
  
  // optional .PBAllCard cards = 3;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // optional .PBAllGem gems = 4;
  inline bool has_gems() const;
  inline void clear_gems();
  static const int kGemsFieldNumber = 4;
  inline const ::PBAllGem& gems() const;
  inline ::PBAllGem* mutable_gems();
  inline ::PBAllGem* release_gems();
  
  // optional int32 allGoldNumber = 5;
  inline bool has_allgoldnumber() const;
  inline void clear_allgoldnumber();
  static const int kAllGoldNumberFieldNumber = 5;
  inline ::google::protobuf::int32 allgoldnumber() const;
  inline void set_allgoldnumber(::google::protobuf::int32 value);
  
  // optional int32 fightCapacity = 6;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightCapacityFieldNumber = 6;
  inline ::google::protobuf::int32 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBCardEvolutionRecieve)
 private:
  inline void set_has_evolutionresult();
  inline void clear_has_evolutionresult();
  inline void set_has_targetcard();
  inline void clear_has_targetcard();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_gems();
  inline void clear_has_gems();
  inline void set_has_allgoldnumber();
  inline void clear_has_allgoldnumber();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCard* targetcard_;
  ::PBAllCard* cards_;
  ::google::protobuf::int32 evolutionresult_;
  ::google::protobuf::int32 allgoldnumber_;
  ::PBAllGem* gems_;
  ::google::protobuf::int32 fightcapacity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardEvolutionRecieve* default_instance_;
};
// -------------------------------------------------------------------

class PBSkillLevelUpSend : public ::google::protobuf::Message {
 public:
  PBSkillLevelUpSend();
  virtual ~PBSkillLevelUpSend();
  
  PBSkillLevelUpSend(const PBSkillLevelUpSend& from);
  
  inline PBSkillLevelUpSend& operator=(const PBSkillLevelUpSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSkillLevelUpSend& default_instance();
  
  void Swap(PBSkillLevelUpSend* other);
  
  // implements Message ----------------------------------------------
  
  PBSkillLevelUpSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSkillLevelUpSend& from);
  void MergeFrom(const PBSkillLevelUpSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 upCardItemID = 1;
  inline bool has_upcarditemid() const;
  inline void clear_upcarditemid();
  static const int kUpCardItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 upcarditemid() const;
  inline void set_upcarditemid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBSkillLevelUpSend)
 private:
  inline void set_has_upcarditemid();
  inline void clear_has_upcarditemid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 upcarditemid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSkillLevelUpSend* default_instance_;
};
// -------------------------------------------------------------------

class PBSkillLevelUpReceive : public ::google::protobuf::Message {
 public:
  PBSkillLevelUpReceive();
  virtual ~PBSkillLevelUpReceive();
  
  PBSkillLevelUpReceive(const PBSkillLevelUpReceive& from);
  
  inline PBSkillLevelUpReceive& operator=(const PBSkillLevelUpReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSkillLevelUpReceive& default_instance();
  
  void Swap(PBSkillLevelUpReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBSkillLevelUpReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSkillLevelUpReceive& from);
  void MergeFrom(const PBSkillLevelUpReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 skillUpResult = 1;
  inline bool has_skillupresult() const;
  inline void clear_skillupresult();
  static const int kSkillUpResultFieldNumber = 1;
  inline ::google::protobuf::int32 skillupresult() const;
  inline void set_skillupresult(::google::protobuf::int32 value);
  
  // optional .PBCard targetCard = 2;
  inline bool has_targetcard() const;
  inline void clear_targetcard();
  static const int kTargetCardFieldNumber = 2;
  inline const ::PBCard& targetcard() const;
  inline ::PBCard* mutable_targetcard();
  inline ::PBCard* release_targetcard();
  
  // optional .PBAllCard cards = 3;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // optional int32 fightCapacity = 4;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightCapacityFieldNumber = 4;
  inline ::google::protobuf::int32 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBSkillLevelUpReceive)
 private:
  inline void set_has_skillupresult();
  inline void clear_has_skillupresult();
  inline void set_has_targetcard();
  inline void clear_has_targetcard();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCard* targetcard_;
  ::google::protobuf::int32 skillupresult_;
  ::google::protobuf::int32 fightcapacity_;
  ::PBAllCard* cards_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSkillLevelUpReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBCardFormSend : public ::google::protobuf::Message {
 public:
  PBCardFormSend();
  virtual ~PBCardFormSend();
  
  PBCardFormSend(const PBCardFormSend& from);
  
  inline PBCardFormSend& operator=(const PBCardFormSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardFormSend& default_instance();
  
  void Swap(PBCardFormSend* other);
  
  // implements Message ----------------------------------------------
  
  PBCardFormSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardFormSend& from);
  void MergeFrom(const PBCardFormSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 captainCardID = 1;
  inline bool has_captaincardid() const;
  inline void clear_captaincardid();
  static const int kCaptainCardIDFieldNumber = 1;
  inline ::google::protobuf::int32 captaincardid() const;
  inline void set_captaincardid(::google::protobuf::int32 value);
  
  // optional int32 cardOneID = 2;
  inline bool has_cardoneid() const;
  inline void clear_cardoneid();
  static const int kCardOneIDFieldNumber = 2;
  inline ::google::protobuf::int32 cardoneid() const;
  inline void set_cardoneid(::google::protobuf::int32 value);
  
  // optional int32 cardTwoID = 3;
  inline bool has_cardtwoid() const;
  inline void clear_cardtwoid();
  static const int kCardTwoIDFieldNumber = 3;
  inline ::google::protobuf::int32 cardtwoid() const;
  inline void set_cardtwoid(::google::protobuf::int32 value);
  
  // optional int32 cardThreeID = 4;
  inline bool has_cardthreeid() const;
  inline void clear_cardthreeid();
  static const int kCardThreeIDFieldNumber = 4;
  inline ::google::protobuf::int32 cardthreeid() const;
  inline void set_cardthreeid(::google::protobuf::int32 value);
  
  // optional int32 cardFourID = 5;
  inline bool has_cardfourid() const;
  inline void clear_cardfourid();
  static const int kCardFourIDFieldNumber = 5;
  inline ::google::protobuf::int32 cardfourid() const;
  inline void set_cardfourid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBCardFormSend)
 private:
  inline void set_has_captaincardid();
  inline void clear_has_captaincardid();
  inline void set_has_cardoneid();
  inline void clear_has_cardoneid();
  inline void set_has_cardtwoid();
  inline void clear_has_cardtwoid();
  inline void set_has_cardthreeid();
  inline void clear_has_cardthreeid();
  inline void set_has_cardfourid();
  inline void clear_has_cardfourid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 captaincardid_;
  ::google::protobuf::int32 cardoneid_;
  ::google::protobuf::int32 cardtwoid_;
  ::google::protobuf::int32 cardthreeid_;
  ::google::protobuf::int32 cardfourid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardFormSend* default_instance_;
};
// -------------------------------------------------------------------

class PBCardFormReceive : public ::google::protobuf::Message {
 public:
  PBCardFormReceive();
  virtual ~PBCardFormReceive();
  
  PBCardFormReceive(const PBCardFormReceive& from);
  
  inline PBCardFormReceive& operator=(const PBCardFormReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardFormReceive& default_instance();
  
  void Swap(PBCardFormReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBCardFormReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardFormReceive& from);
  void MergeFrom(const PBCardFormReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 formResult = 1;
  inline bool has_formresult() const;
  inline void clear_formresult();
  static const int kFormResultFieldNumber = 1;
  inline ::google::protobuf::int32 formresult() const;
  inline void set_formresult(::google::protobuf::int32 value);
  
  // optional .PBAllCard cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // optional int32 fightCapacity = 3;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightCapacityFieldNumber = 3;
  inline ::google::protobuf::int32 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBCardFormReceive)
 private:
  inline void set_has_formresult();
  inline void clear_has_formresult();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllCard* cards_;
  ::google::protobuf::int32 formresult_;
  ::google::protobuf::int32 fightcapacity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardFormReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleSend : public ::google::protobuf::Message {
 public:
  PBBattleSend();
  virtual ~PBBattleSend();
  
  PBBattleSend(const PBBattleSend& from);
  
  inline PBBattleSend& operator=(const PBBattleSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleSend& default_instance();
  
  void Swap(PBBattleSend* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleSend& from);
  void MergeFrom(const PBBattleSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string battleID = 1;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIDFieldNumber = 1;
  inline const ::std::string& battleid() const;
  inline void set_battleid(const ::std::string& value);
  inline void set_battleid(const char* value);
  inline void set_battleid(const char* value, size_t size);
  inline ::std::string* mutable_battleid();
  inline ::std::string* release_battleid();
  
  // optional int32 isWipeOut = 2;
  inline bool has_iswipeout() const;
  inline void clear_iswipeout();
  static const int kIsWipeOutFieldNumber = 2;
  inline ::google::protobuf::int32 iswipeout() const;
  inline void set_iswipeout(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBBattleSend)
 private:
  inline void set_has_battleid();
  inline void clear_has_battleid();
  inline void set_has_iswipeout();
  inline void clear_has_iswipeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* battleid_;
  ::google::protobuf::int32 iswipeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleSend* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleAward : public ::google::protobuf::Message {
 public:
  PBBattleAward();
  virtual ~PBBattleAward();
  
  PBBattleAward(const PBBattleAward& from);
  
  inline PBBattleAward& operator=(const PBBattleAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleAward& default_instance();
  
  void Swap(PBBattleAward* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleAward& from);
  void MergeFrom(const PBBattleAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string awardID = 1;
  inline bool has_awardid() const;
  inline void clear_awardid();
  static const int kAwardIDFieldNumber = 1;
  inline const ::std::string& awardid() const;
  inline void set_awardid(const ::std::string& value);
  inline void set_awardid(const char* value);
  inline void set_awardid(const char* value, size_t size);
  inline ::std::string* mutable_awardid();
  inline ::std::string* release_awardid();
  
  // optional int32 awardType = 2;
  inline bool has_awardtype() const;
  inline void clear_awardtype();
  static const int kAwardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 awardtype() const;
  inline void set_awardtype(::google::protobuf::int32 value);
  
  // optional int32 awardNumber = 3;
  inline bool has_awardnumber() const;
  inline void clear_awardnumber();
  static const int kAwardNumberFieldNumber = 3;
  inline ::google::protobuf::int32 awardnumber() const;
  inline void set_awardnumber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBBattleAward)
 private:
  inline void set_has_awardid();
  inline void clear_has_awardid();
  inline void set_has_awardtype();
  inline void clear_has_awardtype();
  inline void set_has_awardnumber();
  inline void clear_has_awardnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* awardid_;
  ::google::protobuf::int32 awardtype_;
  ::google::protobuf::int32 awardnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleAward* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleReceive : public ::google::protobuf::Message {
 public:
  PBBattleReceive();
  virtual ~PBBattleReceive();
  
  PBBattleReceive(const PBBattleReceive& from);
  
  inline PBBattleReceive& operator=(const PBBattleReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleReceive& default_instance();
  
  void Swap(PBBattleReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleReceive& from);
  void MergeFrom(const PBBattleReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBBattleAward allBattleAwards = 1;
  inline int allbattleawards_size() const;
  inline void clear_allbattleawards();
  static const int kAllBattleAwardsFieldNumber = 1;
  inline const ::PBBattleAward& allbattleawards(int index) const;
  inline ::PBBattleAward* mutable_allbattleawards(int index);
  inline ::PBBattleAward* add_allbattleawards();
  inline const ::google::protobuf::RepeatedPtrField< ::PBBattleAward >&
      allbattleawards() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBBattleAward >*
      mutable_allbattleawards();
  
  // optional .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // @@protoc_insertion_point(class_scope:PBBattleReceive)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBBattleAward > allbattleawards_;
  ::PBUser* user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBSkillExpAdd : public ::google::protobuf::Message {
 public:
  PBSkillExpAdd();
  virtual ~PBSkillExpAdd();
  
  PBSkillExpAdd(const PBSkillExpAdd& from);
  
  inline PBSkillExpAdd& operator=(const PBSkillExpAdd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSkillExpAdd& default_instance();
  
  void Swap(PBSkillExpAdd* other);
  
  // implements Message ----------------------------------------------
  
  PBSkillExpAdd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSkillExpAdd& from);
  void MergeFrom(const PBSkillExpAdd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cardItemId = 1;
  inline bool has_carditemid() const;
  inline void clear_carditemid();
  static const int kCardItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 carditemid() const;
  inline void set_carditemid(::google::protobuf::int32 value);
  
  // optional int32 skillExp = 2;
  inline bool has_skillexp() const;
  inline void clear_skillexp();
  static const int kSkillExpFieldNumber = 2;
  inline ::google::protobuf::int32 skillexp() const;
  inline void set_skillexp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBSkillExpAdd)
 private:
  inline void set_has_carditemid();
  inline void clear_has_carditemid();
  inline void set_has_skillexp();
  inline void clear_has_skillexp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 carditemid_;
  ::google::protobuf::int32 skillexp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSkillExpAdd* default_instance_;
};
// -------------------------------------------------------------------

class PBCardDBInfo : public ::google::protobuf::Message {
 public:
  PBCardDBInfo();
  virtual ~PBCardDBInfo();
  
  PBCardDBInfo(const PBCardDBInfo& from);
  
  inline PBCardDBInfo& operator=(const PBCardDBInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardDBInfo& default_instance();
  
  void Swap(PBCardDBInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBCardDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardDBInfo& from);
  void MergeFrom(const PBCardDBInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string cardID = 1;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIDFieldNumber = 1;
  inline const ::std::string& cardid() const;
  inline void set_cardid(const ::std::string& value);
  inline void set_cardid(const char* value);
  inline void set_cardid(const char* value, size_t size);
  inline ::std::string* mutable_cardid();
  inline ::std::string* release_cardid();
  
  // optional string cardSkillA = 2;
  inline bool has_cardskilla() const;
  inline void clear_cardskilla();
  static const int kCardSkillAFieldNumber = 2;
  inline const ::std::string& cardskilla() const;
  inline void set_cardskilla(const ::std::string& value);
  inline void set_cardskilla(const char* value);
  inline void set_cardskilla(const char* value, size_t size);
  inline ::std::string* mutable_cardskilla();
  inline ::std::string* release_cardskilla();
  
  // optional string cardSkillP = 3;
  inline bool has_cardskillp() const;
  inline void clear_cardskillp();
  static const int kCardSkillPFieldNumber = 3;
  inline const ::std::string& cardskillp() const;
  inline void set_cardskillp(const ::std::string& value);
  inline void set_cardskillp(const char* value);
  inline void set_cardskillp(const char* value, size_t size);
  inline ::std::string* mutable_cardskillp();
  inline ::std::string* release_cardskillp();
  
  // optional int32 VTLStar = 4;
  inline bool has_vtlstar() const;
  inline void clear_vtlstar();
  static const int kVTLStarFieldNumber = 4;
  inline ::google::protobuf::int32 vtlstar() const;
  inline void set_vtlstar(::google::protobuf::int32 value);
  
  // optional int32 STRStar = 5;
  inline bool has_strstar() const;
  inline void clear_strstar();
  static const int kSTRStarFieldNumber = 5;
  inline ::google::protobuf::int32 strstar() const;
  inline void set_strstar(::google::protobuf::int32 value);
  
  // optional int32 TGHStar = 6;
  inline bool has_tghstar() const;
  inline void clear_tghstar();
  static const int kTGHStarFieldNumber = 6;
  inline ::google::protobuf::int32 tghstar() const;
  inline void set_tghstar(::google::protobuf::int32 value);
  
  // optional int32 QUIStar = 7;
  inline bool has_quistar() const;
  inline void clear_quistar();
  static const int kQUIStarFieldNumber = 7;
  inline ::google::protobuf::int32 quistar() const;
  inline void set_quistar(::google::protobuf::int32 value);
  
  // optional int32 MGCStar = 8;
  inline bool has_mgcstar() const;
  inline void clear_mgcstar();
  static const int kMGCStarFieldNumber = 8;
  inline ::google::protobuf::int32 mgcstar() const;
  inline void set_mgcstar(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBCardDBInfo)
 private:
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_cardskilla();
  inline void clear_has_cardskilla();
  inline void set_has_cardskillp();
  inline void clear_has_cardskillp();
  inline void set_has_vtlstar();
  inline void clear_has_vtlstar();
  inline void set_has_strstar();
  inline void clear_has_strstar();
  inline void set_has_tghstar();
  inline void clear_has_tghstar();
  inline void set_has_quistar();
  inline void clear_has_quistar();
  inline void set_has_mgcstar();
  inline void clear_has_mgcstar();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* cardid_;
  ::std::string* cardskilla_;
  ::std::string* cardskillp_;
  ::google::protobuf::int32 vtlstar_;
  ::google::protobuf::int32 strstar_;
  ::google::protobuf::int32 tghstar_;
  ::google::protobuf::int32 quistar_;
  ::google::protobuf::int32 mgcstar_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleResultSend : public ::google::protobuf::Message {
 public:
  PBBattleResultSend();
  virtual ~PBBattleResultSend();
  
  PBBattleResultSend(const PBBattleResultSend& from);
  
  inline PBBattleResultSend& operator=(const PBBattleResultSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleResultSend& default_instance();
  
  void Swap(PBBattleResultSend* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleResultSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleResultSend& from);
  void MergeFrom(const PBBattleResultSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 battleResult = 1;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 1;
  inline ::google::protobuf::int32 battleresult() const;
  inline void set_battleresult(::google::protobuf::int32 value);
  
  // repeated .PBSkillExpAdd skillExpAdd = 2;
  inline int skillexpadd_size() const;
  inline void clear_skillexpadd();
  static const int kSkillExpAddFieldNumber = 2;
  inline const ::PBSkillExpAdd& skillexpadd(int index) const;
  inline ::PBSkillExpAdd* mutable_skillexpadd(int index);
  inline ::PBSkillExpAdd* add_skillexpadd();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd >&
      skillexpadd() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd >*
      mutable_skillexpadd();
  
  // optional bool isfriend = 3;
  inline bool has_isfriend() const;
  inline void clear_isfriend();
  static const int kIsfriendFieldNumber = 3;
  inline bool isfriend() const;
  inline void set_isfriend(bool value);
  
  // optional string battleProgress = 4;
  inline bool has_battleprogress() const;
  inline void clear_battleprogress();
  static const int kBattleProgressFieldNumber = 4;
  inline const ::std::string& battleprogress() const;
  inline void set_battleprogress(const ::std::string& value);
  inline void set_battleprogress(const char* value);
  inline void set_battleprogress(const char* value, size_t size);
  inline ::std::string* mutable_battleprogress();
  inline ::std::string* release_battleprogress();
  
  // optional int32 friendId = 5;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 5;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);
  
  // repeated .PBCardDBInfo cardInfo = 6;
  inline int cardinfo_size() const;
  inline void clear_cardinfo();
  static const int kCardInfoFieldNumber = 6;
  inline const ::PBCardDBInfo& cardinfo(int index) const;
  inline ::PBCardDBInfo* mutable_cardinfo(int index);
  inline ::PBCardDBInfo* add_cardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBCardDBInfo >&
      cardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCardDBInfo >*
      mutable_cardinfo();
  
  // @@protoc_insertion_point(class_scope:PBBattleResultSend)
 private:
  inline void set_has_battleresult();
  inline void clear_has_battleresult();
  inline void set_has_isfriend();
  inline void clear_has_isfriend();
  inline void set_has_battleprogress();
  inline void clear_has_battleprogress();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd > skillexpadd_;
  ::google::protobuf::int32 battleresult_;
  bool isfriend_;
  ::std::string* battleprogress_;
  ::google::protobuf::RepeatedPtrField< ::PBCardDBInfo > cardinfo_;
  ::google::protobuf::int32 friendid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleResultSend* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleResultReceive : public ::google::protobuf::Message {
 public:
  PBBattleResultReceive();
  virtual ~PBBattleResultReceive();
  
  PBBattleResultReceive(const PBBattleResultReceive& from);
  
  inline PBBattleResultReceive& operator=(const PBBattleResultReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleResultReceive& default_instance();
  
  void Swap(PBBattleResultReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleResultReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleResultReceive& from);
  void MergeFrom(const PBBattleResultReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBAllCard cards = 1;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // optional .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // optional .PBAllGem gems = 3;
  inline bool has_gems() const;
  inline void clear_gems();
  static const int kGemsFieldNumber = 3;
  inline const ::PBAllGem& gems() const;
  inline ::PBAllGem* mutable_gems();
  inline ::PBAllGem* release_gems();
  
  // optional .PBBattle battle = 4;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 4;
  inline const ::PBBattle& battle() const;
  inline ::PBBattle* mutable_battle();
  inline ::PBBattle* release_battle();
  
  // optional bool hasFinishedTask = 5;
  inline bool has_hasfinishedtask() const;
  inline void clear_hasfinishedtask();
  static const int kHasFinishedTaskFieldNumber = 5;
  inline bool hasfinishedtask() const;
  inline void set_hasfinishedtask(bool value);
  
  // optional int32 DBInfoResult = 6;
  inline bool has_dbinforesult() const;
  inline void clear_dbinforesult();
  static const int kDBInfoResultFieldNumber = 6;
  inline ::google::protobuf::int32 dbinforesult() const;
  inline void set_dbinforesult(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBBattleResultReceive)
 private:
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_gems();
  inline void clear_has_gems();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_hasfinishedtask();
  inline void clear_has_hasfinishedtask();
  inline void set_has_dbinforesult();
  inline void clear_has_dbinforesult();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllCard* cards_;
  ::PBUser* user_;
  ::PBAllGem* gems_;
  ::PBBattle* battle_;
  bool hasfinishedtask_;
  ::google::protobuf::int32 dbinforesult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleResultReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBSoldCardSend : public ::google::protobuf::Message {
 public:
  PBSoldCardSend();
  virtual ~PBSoldCardSend();
  
  PBSoldCardSend(const PBSoldCardSend& from);
  
  inline PBSoldCardSend& operator=(const PBSoldCardSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSoldCardSend& default_instance();
  
  void Swap(PBSoldCardSend* other);
  
  // implements Message ----------------------------------------------
  
  PBSoldCardSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSoldCardSend& from);
  void MergeFrom(const PBSoldCardSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 cardItemId = 1;
  inline int carditemid_size() const;
  inline void clear_carditemid();
  static const int kCardItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 carditemid(int index) const;
  inline void set_carditemid(int index, ::google::protobuf::int32 value);
  inline void add_carditemid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      carditemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_carditemid();
  
  // @@protoc_insertion_point(class_scope:PBSoldCardSend)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > carditemid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSoldCardSend* default_instance_;
};
// -------------------------------------------------------------------

class PBSoldCardReceive : public ::google::protobuf::Message {
 public:
  PBSoldCardReceive();
  virtual ~PBSoldCardReceive();
  
  PBSoldCardReceive(const PBSoldCardReceive& from);
  
  inline PBSoldCardReceive& operator=(const PBSoldCardReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSoldCardReceive& default_instance();
  
  void Swap(PBSoldCardReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBSoldCardReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSoldCardReceive& from);
  void MergeFrom(const PBSoldCardReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 soldResult = 1;
  inline bool has_soldresult() const;
  inline void clear_soldresult();
  static const int kSoldResultFieldNumber = 1;
  inline ::google::protobuf::int32 soldresult() const;
  inline void set_soldresult(::google::protobuf::int32 value);
  
  // optional .PBAllCard cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // optional int32 goldNumber = 3;
  inline bool has_goldnumber() const;
  inline void clear_goldnumber();
  static const int kGoldNumberFieldNumber = 3;
  inline ::google::protobuf::int32 goldnumber() const;
  inline void set_goldnumber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBSoldCardReceive)
 private:
  inline void set_has_soldresult();
  inline void clear_has_soldresult();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_goldnumber();
  inline void clear_has_goldnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllCard* cards_;
  ::google::protobuf::int32 soldresult_;
  ::google::protobuf::int32 goldnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSoldCardReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBGetFriendValueReceive : public ::google::protobuf::Message {
 public:
  PBGetFriendValueReceive();
  virtual ~PBGetFriendValueReceive();
  
  PBGetFriendValueReceive(const PBGetFriendValueReceive& from);
  
  inline PBGetFriendValueReceive& operator=(const PBGetFriendValueReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGetFriendValueReceive& default_instance();
  
  void Swap(PBGetFriendValueReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBGetFriendValueReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGetFriendValueReceive& from);
  void MergeFrom(const PBGetFriendValueReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBAllFriend friends = 1;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::PBAllFriend& friends() const;
  inline ::PBAllFriend* mutable_friends();
  inline ::PBAllFriend* release_friends();
  
  // optional int32 friendValue = 2;
  inline bool has_friendvalue() const;
  inline void clear_friendvalue();
  static const int kFriendValueFieldNumber = 2;
  inline ::google::protobuf::int32 friendvalue() const;
  inline void set_friendvalue(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBGetFriendValueReceive)
 private:
  inline void set_has_friends();
  inline void clear_has_friends();
  inline void set_has_friendvalue();
  inline void clear_has_friendvalue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllFriend* friends_;
  ::google::protobuf::int32 friendvalue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBGetFriendValueReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBShopBuySend : public ::google::protobuf::Message {
 public:
  PBShopBuySend();
  virtual ~PBShopBuySend();
  
  PBShopBuySend(const PBShopBuySend& from);
  
  inline PBShopBuySend& operator=(const PBShopBuySend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBShopBuySend& default_instance();
  
  void Swap(PBShopBuySend* other);
  
  // implements Message ----------------------------------------------
  
  PBShopBuySend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBShopBuySend& from);
  void MergeFrom(const PBShopBuySend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 buyType = 1;
  inline bool has_buytype() const;
  inline void clear_buytype();
  static const int kBuyTypeFieldNumber = 1;
  inline ::google::protobuf::int32 buytype() const;
  inline void set_buytype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBShopBuySend)
 private:
  inline void set_has_buytype();
  inline void clear_has_buytype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 buytype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBShopBuySend* default_instance_;
};
// -------------------------------------------------------------------

class PBShopBuySendReceive : public ::google::protobuf::Message {
 public:
  PBShopBuySendReceive();
  virtual ~PBShopBuySendReceive();
  
  PBShopBuySendReceive(const PBShopBuySendReceive& from);
  
  inline PBShopBuySendReceive& operator=(const PBShopBuySendReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBShopBuySendReceive& default_instance();
  
  void Swap(PBShopBuySendReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBShopBuySendReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBShopBuySendReceive& from);
  void MergeFrom(const PBShopBuySendReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBUser user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // @@protoc_insertion_point(class_scope:PBShopBuySendReceive)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBShopBuySendReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBSearchFriendSend : public ::google::protobuf::Message {
 public:
  PBSearchFriendSend();
  virtual ~PBSearchFriendSend();
  
  PBSearchFriendSend(const PBSearchFriendSend& from);
  
  inline PBSearchFriendSend& operator=(const PBSearchFriendSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSearchFriendSend& default_instance();
  
  void Swap(PBSearchFriendSend* other);
  
  // implements Message ----------------------------------------------
  
  PBSearchFriendSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSearchFriendSend& from);
  void MergeFrom(const PBSearchFriendSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string searchKey = 1;
  inline bool has_searchkey() const;
  inline void clear_searchkey();
  static const int kSearchKeyFieldNumber = 1;
  inline const ::std::string& searchkey() const;
  inline void set_searchkey(const ::std::string& value);
  inline void set_searchkey(const char* value);
  inline void set_searchkey(const char* value, size_t size);
  inline ::std::string* mutable_searchkey();
  inline ::std::string* release_searchkey();
  
  // @@protoc_insertion_point(class_scope:PBSearchFriendSend)
 private:
  inline void set_has_searchkey();
  inline void clear_has_searchkey();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* searchkey_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSearchFriendSend* default_instance_;
};
// -------------------------------------------------------------------

class PBSearchFriendReceive : public ::google::protobuf::Message {
 public:
  PBSearchFriendReceive();
  virtual ~PBSearchFriendReceive();
  
  PBSearchFriendReceive(const PBSearchFriendReceive& from);
  
  inline PBSearchFriendReceive& operator=(const PBSearchFriendReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSearchFriendReceive& default_instance();
  
  void Swap(PBSearchFriendReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBSearchFriendReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSearchFriendReceive& from);
  void MergeFrom(const PBSearchFriendReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFriend friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::PBFriend& friends(int index) const;
  inline ::PBFriend* mutable_friends(int index);
  inline ::PBFriend* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
      mutable_friends();
  
  // @@protoc_insertion_point(class_scope:PBSearchFriendReceive)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFriend > friends_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSearchFriendReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBDownloadSend : public ::google::protobuf::Message {
 public:
  PBDownloadSend();
  virtual ~PBDownloadSend();
  
  PBDownloadSend(const PBDownloadSend& from);
  
  inline PBDownloadSend& operator=(const PBDownloadSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDownloadSend& default_instance();
  
  void Swap(PBDownloadSend* other);
  
  // implements Message ----------------------------------------------
  
  PBDownloadSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDownloadSend& from);
  void MergeFrom(const PBDownloadSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string resourceVersion = 1;
  inline bool has_resourceversion() const;
  inline void clear_resourceversion();
  static const int kResourceVersionFieldNumber = 1;
  inline const ::std::string& resourceversion() const;
  inline void set_resourceversion(const ::std::string& value);
  inline void set_resourceversion(const char* value);
  inline void set_resourceversion(const char* value, size_t size);
  inline ::std::string* mutable_resourceversion();
  inline ::std::string* release_resourceversion();
  
  // optional int32 pointMark = 2;
  inline bool has_pointmark() const;
  inline void clear_pointmark();
  static const int kPointMarkFieldNumber = 2;
  inline ::google::protobuf::int32 pointmark() const;
  inline void set_pointmark(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBDownloadSend)
 private:
  inline void set_has_resourceversion();
  inline void clear_has_resourceversion();
  inline void set_has_pointmark();
  inline void clear_has_pointmark();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* resourceversion_;
  ::google::protobuf::int32 pointmark_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBDownloadSend* default_instance_;
};
// -------------------------------------------------------------------

class PBInvitationCodeSend : public ::google::protobuf::Message {
 public:
  PBInvitationCodeSend();
  virtual ~PBInvitationCodeSend();
  
  PBInvitationCodeSend(const PBInvitationCodeSend& from);
  
  inline PBInvitationCodeSend& operator=(const PBInvitationCodeSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBInvitationCodeSend& default_instance();
  
  void Swap(PBInvitationCodeSend* other);
  
  // implements Message ----------------------------------------------
  
  PBInvitationCodeSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBInvitationCodeSend& from);
  void MergeFrom(const PBInvitationCodeSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string invitationCode = 1;
  inline bool has_invitationcode() const;
  inline void clear_invitationcode();
  static const int kInvitationCodeFieldNumber = 1;
  inline const ::std::string& invitationcode() const;
  inline void set_invitationcode(const ::std::string& value);
  inline void set_invitationcode(const char* value);
  inline void set_invitationcode(const char* value, size_t size);
  inline ::std::string* mutable_invitationcode();
  inline ::std::string* release_invitationcode();
  
  // @@protoc_insertion_point(class_scope:PBInvitationCodeSend)
 private:
  inline void set_has_invitationcode();
  inline void clear_has_invitationcode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* invitationcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBInvitationCodeSend* default_instance_;
};
// -------------------------------------------------------------------

class PBInvitationCodeReceive : public ::google::protobuf::Message {
 public:
  PBInvitationCodeReceive();
  virtual ~PBInvitationCodeReceive();
  
  PBInvitationCodeReceive(const PBInvitationCodeReceive& from);
  
  inline PBInvitationCodeReceive& operator=(const PBInvitationCodeReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBInvitationCodeReceive& default_instance();
  
  void Swap(PBInvitationCodeReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBInvitationCodeReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBInvitationCodeReceive& from);
  void MergeFrom(const PBInvitationCodeReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBInvitationCodeReceive)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBInvitationCodeReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBEnergyReceive : public ::google::protobuf::Message {
 public:
  PBEnergyReceive();
  virtual ~PBEnergyReceive();
  
  PBEnergyReceive(const PBEnergyReceive& from);
  
  inline PBEnergyReceive& operator=(const PBEnergyReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBEnergyReceive& default_instance();
  
  void Swap(PBEnergyReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBEnergyReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBEnergyReceive& from);
  void MergeFrom(const PBEnergyReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 energy = 1;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 1;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);
  
  // optional int32 nextEnergyTime = 2;
  inline bool has_nextenergytime() const;
  inline void clear_nextenergytime();
  static const int kNextEnergyTimeFieldNumber = 2;
  inline ::google::protobuf::int32 nextenergytime() const;
  inline void set_nextenergytime(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBEnergyReceive)
 private:
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_nextenergytime();
  inline void clear_has_nextenergytime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 nextenergytime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBEnergyReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBIAPSend : public ::google::protobuf::Message {
 public:
  PBIAPSend();
  virtual ~PBIAPSend();
  
  PBIAPSend(const PBIAPSend& from);
  
  inline PBIAPSend& operator=(const PBIAPSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBIAPSend& default_instance();
  
  void Swap(PBIAPSend* other);
  
  // implements Message ----------------------------------------------
  
  PBIAPSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBIAPSend& from);
  void MergeFrom(const PBIAPSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string macAddress = 1;
  inline bool has_macaddress() const;
  inline void clear_macaddress();
  static const int kMacAddressFieldNumber = 1;
  inline const ::std::string& macaddress() const;
  inline void set_macaddress(const ::std::string& value);
  inline void set_macaddress(const char* value);
  inline void set_macaddress(const char* value, size_t size);
  inline ::std::string* mutable_macaddress();
  inline ::std::string* release_macaddress();
  
  // optional string serverUrl = 2;
  inline bool has_serverurl() const;
  inline void clear_serverurl();
  static const int kServerUrlFieldNumber = 2;
  inline const ::std::string& serverurl() const;
  inline void set_serverurl(const ::std::string& value);
  inline void set_serverurl(const char* value);
  inline void set_serverurl(const char* value, size_t size);
  inline ::std::string* mutable_serverurl();
  inline ::std::string* release_serverurl();
  
  // optional string orderId = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  
  // optional int32 userSourceType = 4;
  inline bool has_usersourcetype() const;
  inline void clear_usersourcetype();
  static const int kUserSourceTypeFieldNumber = 4;
  inline ::google::protobuf::int32 usersourcetype() const;
  inline void set_usersourcetype(::google::protobuf::int32 value);
  
  // optional string authorizationData = 5;
  inline bool has_authorizationdata() const;
  inline void clear_authorizationdata();
  static const int kAuthorizationDataFieldNumber = 5;
  inline const ::std::string& authorizationdata() const;
  inline void set_authorizationdata(const ::std::string& value);
  inline void set_authorizationdata(const char* value);
  inline void set_authorizationdata(const char* value, size_t size);
  inline ::std::string* mutable_authorizationdata();
  inline ::std::string* release_authorizationdata();
  
  // @@protoc_insertion_point(class_scope:PBIAPSend)
 private:
  inline void set_has_macaddress();
  inline void clear_has_macaddress();
  inline void set_has_serverurl();
  inline void clear_has_serverurl();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_usersourcetype();
  inline void clear_has_usersourcetype();
  inline void set_has_authorizationdata();
  inline void clear_has_authorizationdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* macaddress_;
  ::std::string* serverurl_;
  ::std::string* orderid_;
  ::std::string* authorizationdata_;
  ::google::protobuf::int32 usersourcetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBIAPSend* default_instance_;
};
// -------------------------------------------------------------------

class PBIAPRecv : public ::google::protobuf::Message {
 public:
  PBIAPRecv();
  virtual ~PBIAPRecv();
  
  PBIAPRecv(const PBIAPRecv& from);
  
  inline PBIAPRecv& operator=(const PBIAPRecv& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBIAPRecv& default_instance();
  
  void Swap(PBIAPRecv* other);
  
  // implements Message ----------------------------------------------
  
  PBIAPRecv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBIAPRecv& from);
  void MergeFrom(const PBIAPRecv& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // optional string orderID = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  
  // @@protoc_insertion_point(class_scope:PBIAPRecv)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  ::std::string* orderid_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBIAPRecv* default_instance_;
};
// -------------------------------------------------------------------

class PBMainServerRegisterSend : public ::google::protobuf::Message {
 public:
  PBMainServerRegisterSend();
  virtual ~PBMainServerRegisterSend();
  
  PBMainServerRegisterSend(const PBMainServerRegisterSend& from);
  
  inline PBMainServerRegisterSend& operator=(const PBMainServerRegisterSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMainServerRegisterSend& default_instance();
  
  void Swap(PBMainServerRegisterSend* other);
  
  // implements Message ----------------------------------------------
  
  PBMainServerRegisterSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMainServerRegisterSend& from);
  void MergeFrom(const PBMainServerRegisterSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userAccount = 1;
  inline bool has_useraccount() const;
  inline void clear_useraccount();
  static const int kUserAccountFieldNumber = 1;
  inline const ::std::string& useraccount() const;
  inline void set_useraccount(const ::std::string& value);
  inline void set_useraccount(const char* value);
  inline void set_useraccount(const char* value, size_t size);
  inline ::std::string* mutable_useraccount();
  inline ::std::string* release_useraccount();
  
  // optional string userPasswd = 2;
  inline bool has_userpasswd() const;
  inline void clear_userpasswd();
  static const int kUserPasswdFieldNumber = 2;
  inline const ::std::string& userpasswd() const;
  inline void set_userpasswd(const ::std::string& value);
  inline void set_userpasswd(const char* value);
  inline void set_userpasswd(const char* value, size_t size);
  inline ::std::string* mutable_userpasswd();
  inline ::std::string* release_userpasswd();
  
  // optional int32 userSourceType = 3;
  inline bool has_usersourcetype() const;
  inline void clear_usersourcetype();
  static const int kUserSourceTypeFieldNumber = 3;
  inline ::google::protobuf::int32 usersourcetype() const;
  inline void set_usersourcetype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBMainServerRegisterSend)
 private:
  inline void set_has_useraccount();
  inline void clear_has_useraccount();
  inline void set_has_userpasswd();
  inline void clear_has_userpasswd();
  inline void set_has_usersourcetype();
  inline void clear_has_usersourcetype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* useraccount_;
  ::std::string* userpasswd_;
  ::google::protobuf::int32 usersourcetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMainServerRegisterSend* default_instance_;
};
// -------------------------------------------------------------------

class PBMainServerRegisterReceive : public ::google::protobuf::Message {
 public:
  PBMainServerRegisterReceive();
  virtual ~PBMainServerRegisterReceive();
  
  PBMainServerRegisterReceive(const PBMainServerRegisterReceive& from);
  
  inline PBMainServerRegisterReceive& operator=(const PBMainServerRegisterReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMainServerRegisterReceive& default_instance();
  
  void Swap(PBMainServerRegisterReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBMainServerRegisterReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMainServerRegisterReceive& from);
  void MergeFrom(const PBMainServerRegisterReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 registerResult = 1;
  inline bool has_registerresult() const;
  inline void clear_registerresult();
  static const int kRegisterResultFieldNumber = 1;
  inline ::google::protobuf::int32 registerresult() const;
  inline void set_registerresult(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBMainServerRegisterReceive)
 private:
  inline void set_has_registerresult();
  inline void clear_has_registerresult();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 registerresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMainServerRegisterReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBMainServerLoginSend : public ::google::protobuf::Message {
 public:
  PBMainServerLoginSend();
  virtual ~PBMainServerLoginSend();
  
  PBMainServerLoginSend(const PBMainServerLoginSend& from);
  
  inline PBMainServerLoginSend& operator=(const PBMainServerLoginSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMainServerLoginSend& default_instance();
  
  void Swap(PBMainServerLoginSend* other);
  
  // implements Message ----------------------------------------------
  
  PBMainServerLoginSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMainServerLoginSend& from);
  void MergeFrom(const PBMainServerLoginSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userAccount = 1;
  inline bool has_useraccount() const;
  inline void clear_useraccount();
  static const int kUserAccountFieldNumber = 1;
  inline const ::std::string& useraccount() const;
  inline void set_useraccount(const ::std::string& value);
  inline void set_useraccount(const char* value);
  inline void set_useraccount(const char* value, size_t size);
  inline ::std::string* mutable_useraccount();
  inline ::std::string* release_useraccount();
  
  // optional string userPasswd = 2;
  inline bool has_userpasswd() const;
  inline void clear_userpasswd();
  static const int kUserPasswdFieldNumber = 2;
  inline const ::std::string& userpasswd() const;
  inline void set_userpasswd(const ::std::string& value);
  inline void set_userpasswd(const char* value);
  inline void set_userpasswd(const char* value, size_t size);
  inline ::std::string* mutable_userpasswd();
  inline ::std::string* release_userpasswd();
  
  // optional int32 userSourceType = 3;
  inline bool has_usersourcetype() const;
  inline void clear_usersourcetype();
  static const int kUserSourceTypeFieldNumber = 3;
  inline ::google::protobuf::int32 usersourcetype() const;
  inline void set_usersourcetype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBMainServerLoginSend)
 private:
  inline void set_has_useraccount();
  inline void clear_has_useraccount();
  inline void set_has_userpasswd();
  inline void clear_has_userpasswd();
  inline void set_has_usersourcetype();
  inline void clear_has_usersourcetype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* useraccount_;
  ::std::string* userpasswd_;
  ::google::protobuf::int32 usersourcetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMainServerLoginSend* default_instance_;
};
// -------------------------------------------------------------------

class PBMainServerLoginReceive : public ::google::protobuf::Message {
 public:
  PBMainServerLoginReceive();
  virtual ~PBMainServerLoginReceive();
  
  PBMainServerLoginReceive(const PBMainServerLoginReceive& from);
  
  inline PBMainServerLoginReceive& operator=(const PBMainServerLoginReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMainServerLoginReceive& default_instance();
  
  void Swap(PBMainServerLoginReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBMainServerLoginReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMainServerLoginReceive& from);
  void MergeFrom(const PBMainServerLoginReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 loginResult = 1;
  inline bool has_loginresult() const;
  inline void clear_loginresult();
  static const int kLoginResultFieldNumber = 1;
  inline ::google::protobuf::int32 loginresult() const;
  inline void set_loginresult(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBMainServerLoginReceive)
 private:
  inline void set_has_loginresult();
  inline void clear_has_loginresult();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 loginresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMainServerLoginReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBRankSend : public ::google::protobuf::Message {
 public:
  PBRankSend();
  virtual ~PBRankSend();
  
  PBRankSend(const PBRankSend& from);
  
  inline PBRankSend& operator=(const PBRankSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRankSend& default_instance();
  
  void Swap(PBRankSend* other);
  
  // implements Message ----------------------------------------------
  
  PBRankSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRankSend& from);
  void MergeFrom(const PBRankSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rankWays = 1;
  inline bool has_rankways() const;
  inline void clear_rankways();
  static const int kRankWaysFieldNumber = 1;
  inline ::google::protobuf::int32 rankways() const;
  inline void set_rankways(::google::protobuf::int32 value);
  
  // optional int32 reqWays = 2;
  inline bool has_reqways() const;
  inline void clear_reqways();
  static const int kReqWaysFieldNumber = 2;
  inline ::google::protobuf::int32 reqways() const;
  inline void set_reqways(::google::protobuf::int32 value);
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBRankSend)
 private:
  inline void set_has_rankways();
  inline void clear_has_rankways();
  inline void set_has_reqways();
  inline void clear_has_reqways();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 rankways_;
  ::google::protobuf::int32 reqways_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBRankSend* default_instance_;
};
// -------------------------------------------------------------------

class PBRankPlayerInfo : public ::google::protobuf::Message {
 public:
  PBRankPlayerInfo();
  virtual ~PBRankPlayerInfo();
  
  PBRankPlayerInfo(const PBRankPlayerInfo& from);
  
  inline PBRankPlayerInfo& operator=(const PBRankPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRankPlayerInfo& default_instance();
  
  void Swap(PBRankPlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBRankPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRankPlayerInfo& from);
  void MergeFrom(const PBRankPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional int32 userLevel = 2;
  inline bool has_userlevel() const;
  inline void clear_userlevel();
  static const int kUserLevelFieldNumber = 2;
  inline ::google::protobuf::int32 userlevel() const;
  inline void set_userlevel(::google::protobuf::int32 value);
  
  // optional .PBCard userCard = 3;
  inline bool has_usercard() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 3;
  inline const ::PBCard& usercard() const;
  inline ::PBCard* mutable_usercard();
  inline ::PBCard* release_usercard();
  
  // optional int32 fightCapacity = 4;
  inline bool has_fightcapacity() const;
  inline void clear_fightcapacity();
  static const int kFightCapacityFieldNumber = 4;
  inline ::google::protobuf::int32 fightcapacity() const;
  inline void set_fightcapacity(::google::protobuf::int32 value);
  
  // optional int32 capitorCardFightCapacity = 5;
  inline bool has_capitorcardfightcapacity() const;
  inline void clear_capitorcardfightcapacity();
  static const int kCapitorCardFightCapacityFieldNumber = 5;
  inline ::google::protobuf::int32 capitorcardfightcapacity() const;
  inline void set_capitorcardfightcapacity(::google::protobuf::int32 value);
  
  // optional int32 playerRank = 6;
  inline bool has_playerrank() const;
  inline void clear_playerrank();
  static const int kPlayerRankFieldNumber = 6;
  inline ::google::protobuf::int32 playerrank() const;
  inline void set_playerrank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBRankPlayerInfo)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userlevel();
  inline void clear_has_userlevel();
  inline void set_has_usercard();
  inline void clear_has_usercard();
  inline void set_has_fightcapacity();
  inline void clear_has_fightcapacity();
  inline void set_has_capitorcardfightcapacity();
  inline void clear_has_capitorcardfightcapacity();
  inline void set_has_playerrank();
  inline void clear_has_playerrank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::PBCard* usercard_;
  ::google::protobuf::int32 userlevel_;
  ::google::protobuf::int32 fightcapacity_;
  ::google::protobuf::int32 capitorcardfightcapacity_;
  ::google::protobuf::int32 playerrank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBRankPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBRankRecv : public ::google::protobuf::Message {
 public:
  PBRankRecv();
  virtual ~PBRankRecv();
  
  PBRankRecv(const PBRankRecv& from);
  
  inline PBRankRecv& operator=(const PBRankRecv& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRankRecv& default_instance();
  
  void Swap(PBRankRecv* other);
  
  // implements Message ----------------------------------------------
  
  PBRankRecv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRankRecv& from);
  void MergeFrom(const PBRankRecv& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBRankPlayerInfo randPlayerInfo = 1;
  inline int randplayerinfo_size() const;
  inline void clear_randplayerinfo();
  static const int kRandPlayerInfoFieldNumber = 1;
  inline const ::PBRankPlayerInfo& randplayerinfo(int index) const;
  inline ::PBRankPlayerInfo* mutable_randplayerinfo(int index);
  inline ::PBRankPlayerInfo* add_randplayerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBRankPlayerInfo >&
      randplayerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBRankPlayerInfo >*
      mutable_randplayerinfo();
  
  // optional int32 resultStatus = 2;
  inline bool has_resultstatus() const;
  inline void clear_resultstatus();
  static const int kResultStatusFieldNumber = 2;
  inline ::google::protobuf::int32 resultstatus() const;
  inline void set_resultstatus(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBRankRecv)
 private:
  inline void set_has_resultstatus();
  inline void clear_has_resultstatus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBRankPlayerInfo > randplayerinfo_;
  ::google::protobuf::int32 resultstatus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBRankRecv* default_instance_;
};
// -------------------------------------------------------------------

class PBFiveSixStarCard : public ::google::protobuf::Message {
 public:
  PBFiveSixStarCard();
  virtual ~PBFiveSixStarCard();
  
  PBFiveSixStarCard(const PBFiveSixStarCard& from);
  
  inline PBFiveSixStarCard& operator=(const PBFiveSixStarCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFiveSixStarCard& default_instance();
  
  void Swap(PBFiveSixStarCard* other);
  
  // implements Message ----------------------------------------------
  
  PBFiveSixStarCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFiveSixStarCard& from);
  void MergeFrom(const PBFiveSixStarCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional string cardId = 2;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIdFieldNumber = 2;
  inline const ::std::string& cardid() const;
  inline void set_cardid(const ::std::string& value);
  inline void set_cardid(const char* value);
  inline void set_cardid(const char* value, size_t size);
  inline ::std::string* mutable_cardid();
  inline ::std::string* release_cardid();
  
  // optional int32 cardStar = 3;
  inline bool has_cardstar() const;
  inline void clear_cardstar();
  static const int kCardStarFieldNumber = 3;
  inline ::google::protobuf::int32 cardstar() const;
  inline void set_cardstar(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBFiveSixStarCard)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_cardstar();
  inline void clear_has_cardstar();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::std::string* cardid_;
  ::google::protobuf::int32 cardstar_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBFiveSixStarCard* default_instance_;
};
// -------------------------------------------------------------------

class PBEvolutionSuccess : public ::google::protobuf::Message {
 public:
  PBEvolutionSuccess();
  virtual ~PBEvolutionSuccess();
  
  PBEvolutionSuccess(const PBEvolutionSuccess& from);
  
  inline PBEvolutionSuccess& operator=(const PBEvolutionSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBEvolutionSuccess& default_instance();
  
  void Swap(PBEvolutionSuccess* other);
  
  // implements Message ----------------------------------------------
  
  PBEvolutionSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBEvolutionSuccess& from);
  void MergeFrom(const PBEvolutionSuccess& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional string preCardId = 2;
  inline bool has_precardid() const;
  inline void clear_precardid();
  static const int kPreCardIdFieldNumber = 2;
  inline const ::std::string& precardid() const;
  inline void set_precardid(const ::std::string& value);
  inline void set_precardid(const char* value);
  inline void set_precardid(const char* value, size_t size);
  inline ::std::string* mutable_precardid();
  inline ::std::string* release_precardid();
  
  // optional string cardId = 3;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIdFieldNumber = 3;
  inline const ::std::string& cardid() const;
  inline void set_cardid(const ::std::string& value);
  inline void set_cardid(const char* value);
  inline void set_cardid(const char* value, size_t size);
  inline ::std::string* mutable_cardid();
  inline ::std::string* release_cardid();
  
  // @@protoc_insertion_point(class_scope:PBEvolutionSuccess)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_precardid();
  inline void clear_has_precardid();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::std::string* precardid_;
  ::std::string* cardid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBEvolutionSuccess* default_instance_;
};
// -------------------------------------------------------------------

class PBPassLevelPlayerInfo : public ::google::protobuf::Message {
 public:
  PBPassLevelPlayerInfo();
  virtual ~PBPassLevelPlayerInfo();
  
  PBPassLevelPlayerInfo(const PBPassLevelPlayerInfo& from);
  
  inline PBPassLevelPlayerInfo& operator=(const PBPassLevelPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBPassLevelPlayerInfo& default_instance();
  
  void Swap(PBPassLevelPlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBPassLevelPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBPassLevelPlayerInfo& from);
  void MergeFrom(const PBPassLevelPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional string levelName = 3;
  inline bool has_levelname() const;
  inline void clear_levelname();
  static const int kLevelNameFieldNumber = 3;
  inline const ::std::string& levelname() const;
  inline void set_levelname(const ::std::string& value);
  inline void set_levelname(const char* value);
  inline void set_levelname(const char* value, size_t size);
  inline ::std::string* mutable_levelname();
  inline ::std::string* release_levelname();
  
  // @@protoc_insertion_point(class_scope:PBPassLevelPlayerInfo)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_levelname();
  inline void clear_has_levelname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::std::string* levelname_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBPassLevelPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBCapacity : public ::google::protobuf::Message {
 public:
  PBCapacity();
  virtual ~PBCapacity();
  
  PBCapacity(const PBCapacity& from);
  
  inline PBCapacity& operator=(const PBCapacity& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCapacity& default_instance();
  
  void Swap(PBCapacity* other);
  
  // implements Message ----------------------------------------------
  
  PBCapacity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCapacity& from);
  void MergeFrom(const PBCapacity& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional int32 capacityType = 2;
  inline bool has_capacitytype() const;
  inline void clear_capacitytype();
  static const int kCapacityTypeFieldNumber = 2;
  inline ::google::protobuf::int32 capacitytype() const;
  inline void set_capacitytype(::google::protobuf::int32 value);
  
  // optional int32 capacity = 3;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 3;
  inline ::google::protobuf::int32 capacity() const;
  inline void set_capacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBCapacity)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_capacitytype();
  inline void clear_has_capacitytype();
  inline void set_has_capacity();
  inline void clear_has_capacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::google::protobuf::int32 capacitytype_;
  ::google::protobuf::int32 capacity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCapacity* default_instance_;
};
// -------------------------------------------------------------------

class PBGameNotice : public ::google::protobuf::Message {
 public:
  PBGameNotice();
  virtual ~PBGameNotice();
  
  PBGameNotice(const PBGameNotice& from);
  
  inline PBGameNotice& operator=(const PBGameNotice& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGameNotice& default_instance();
  
  void Swap(PBGameNotice* other);
  
  // implements Message ----------------------------------------------
  
  PBGameNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGameNotice& from);
  void MergeFrom(const PBGameNotice& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFiveSixStarCard fiveSixStarCardNotice = 1;
  inline int fivesixstarcardnotice_size() const;
  inline void clear_fivesixstarcardnotice();
  static const int kFiveSixStarCardNoticeFieldNumber = 1;
  inline const ::PBFiveSixStarCard& fivesixstarcardnotice(int index) const;
  inline ::PBFiveSixStarCard* mutable_fivesixstarcardnotice(int index);
  inline ::PBFiveSixStarCard* add_fivesixstarcardnotice();
  inline const ::google::protobuf::RepeatedPtrField< ::PBFiveSixStarCard >&
      fivesixstarcardnotice() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFiveSixStarCard >*
      mutable_fivesixstarcardnotice();
  
  // repeated .PBEvolutionSuccess evolutionSuccessNotice = 2;
  inline int evolutionsuccessnotice_size() const;
  inline void clear_evolutionsuccessnotice();
  static const int kEvolutionSuccessNoticeFieldNumber = 2;
  inline const ::PBEvolutionSuccess& evolutionsuccessnotice(int index) const;
  inline ::PBEvolutionSuccess* mutable_evolutionsuccessnotice(int index);
  inline ::PBEvolutionSuccess* add_evolutionsuccessnotice();
  inline const ::google::protobuf::RepeatedPtrField< ::PBEvolutionSuccess >&
      evolutionsuccessnotice() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBEvolutionSuccess >*
      mutable_evolutionsuccessnotice();
  
  // repeated .PBPassLevelPlayerInfo passLevelNotice = 3;
  inline int passlevelnotice_size() const;
  inline void clear_passlevelnotice();
  static const int kPassLevelNoticeFieldNumber = 3;
  inline const ::PBPassLevelPlayerInfo& passlevelnotice(int index) const;
  inline ::PBPassLevelPlayerInfo* mutable_passlevelnotice(int index);
  inline ::PBPassLevelPlayerInfo* add_passlevelnotice();
  inline const ::google::protobuf::RepeatedPtrField< ::PBPassLevelPlayerInfo >&
      passlevelnotice() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBPassLevelPlayerInfo >*
      mutable_passlevelnotice();
  
  // repeated .PBCapacity capacityNotice = 4;
  inline int capacitynotice_size() const;
  inline void clear_capacitynotice();
  static const int kCapacityNoticeFieldNumber = 4;
  inline const ::PBCapacity& capacitynotice(int index) const;
  inline ::PBCapacity* mutable_capacitynotice(int index);
  inline ::PBCapacity* add_capacitynotice();
  inline const ::google::protobuf::RepeatedPtrField< ::PBCapacity >&
      capacitynotice() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCapacity >*
      mutable_capacitynotice();
  
  // repeated string gameActiveInfo = 5;
  inline int gameactiveinfo_size() const;
  inline void clear_gameactiveinfo();
  static const int kGameActiveInfoFieldNumber = 5;
  inline const ::std::string& gameactiveinfo(int index) const;
  inline ::std::string* mutable_gameactiveinfo(int index);
  inline void set_gameactiveinfo(int index, const ::std::string& value);
  inline void set_gameactiveinfo(int index, const char* value);
  inline void set_gameactiveinfo(int index, const char* value, size_t size);
  inline ::std::string* add_gameactiveinfo();
  inline void add_gameactiveinfo(const ::std::string& value);
  inline void add_gameactiveinfo(const char* value);
  inline void add_gameactiveinfo(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& gameactiveinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gameactiveinfo();
  
  // @@protoc_insertion_point(class_scope:PBGameNotice)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFiveSixStarCard > fivesixstarcardnotice_;
  ::google::protobuf::RepeatedPtrField< ::PBEvolutionSuccess > evolutionsuccessnotice_;
  ::google::protobuf::RepeatedPtrField< ::PBPassLevelPlayerInfo > passlevelnotice_;
  ::google::protobuf::RepeatedPtrField< ::PBCapacity > capacitynotice_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gameactiveinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBGameNotice* default_instance_;
};
// ===================================================================


// ===================================================================

// PBServer

// optional string serverName = 1;
inline bool PBServer::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBServer::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBServer::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBServer::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& PBServer::servername() const {
  return *servername_;
}
inline void PBServer::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void PBServer::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void PBServer::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBServer::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* PBServer::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string serverUrl = 2;
inline bool PBServer::has_serverurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBServer::set_has_serverurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBServer::clear_has_serverurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBServer::clear_serverurl() {
  if (serverurl_ != &::google::protobuf::internal::kEmptyString) {
    serverurl_->clear();
  }
  clear_has_serverurl();
}
inline const ::std::string& PBServer::serverurl() const {
  return *serverurl_;
}
inline void PBServer::set_serverurl(const ::std::string& value) {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  serverurl_->assign(value);
}
inline void PBServer::set_serverurl(const char* value) {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  serverurl_->assign(value);
}
inline void PBServer::set_serverurl(const char* value, size_t size) {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  serverurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBServer::mutable_serverurl() {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  return serverurl_;
}
inline ::std::string* PBServer::release_serverurl() {
  clear_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverurl_;
    serverurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 serverPort = 3;
inline bool PBServer::has_serverport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBServer::set_has_serverport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBServer::clear_has_serverport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBServer::clear_serverport() {
  serverport_ = 0;
  clear_has_serverport();
}
inline ::google::protobuf::int32 PBServer::serverport() const {
  return serverport_;
}
inline void PBServer::set_serverport(::google::protobuf::int32 value) {
  set_has_serverport();
  serverport_ = value;
}

// optional int32 serverStatus = 4;
inline bool PBServer::has_serverstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBServer::set_has_serverstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBServer::clear_has_serverstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBServer::clear_serverstatus() {
  serverstatus_ = 0;
  clear_has_serverstatus();
}
inline ::google::protobuf::int32 PBServer::serverstatus() const {
  return serverstatus_;
}
inline void PBServer::set_serverstatus(::google::protobuf::int32 value) {
  set_has_serverstatus();
  serverstatus_ = value;
}

// optional string payServerUrl = 5;
inline bool PBServer::has_payserverurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBServer::set_has_payserverurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBServer::clear_has_payserverurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBServer::clear_payserverurl() {
  if (payserverurl_ != &::google::protobuf::internal::kEmptyString) {
    payserverurl_->clear();
  }
  clear_has_payserverurl();
}
inline const ::std::string& PBServer::payserverurl() const {
  return *payserverurl_;
}
inline void PBServer::set_payserverurl(const ::std::string& value) {
  set_has_payserverurl();
  if (payserverurl_ == &::google::protobuf::internal::kEmptyString) {
    payserverurl_ = new ::std::string;
  }
  payserverurl_->assign(value);
}
inline void PBServer::set_payserverurl(const char* value) {
  set_has_payserverurl();
  if (payserverurl_ == &::google::protobuf::internal::kEmptyString) {
    payserverurl_ = new ::std::string;
  }
  payserverurl_->assign(value);
}
inline void PBServer::set_payserverurl(const char* value, size_t size) {
  set_has_payserverurl();
  if (payserverurl_ == &::google::protobuf::internal::kEmptyString) {
    payserverurl_ = new ::std::string;
  }
  payserverurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBServer::mutable_payserverurl() {
  set_has_payserverurl();
  if (payserverurl_ == &::google::protobuf::internal::kEmptyString) {
    payserverurl_ = new ::std::string;
  }
  return payserverurl_;
}
inline ::std::string* PBServer::release_payserverurl() {
  clear_has_payserverurl();
  if (payserverurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payserverurl_;
    payserverurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 payServerPort = 6;
inline bool PBServer::has_payserverport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBServer::set_has_payserverport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBServer::clear_has_payserverport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBServer::clear_payserverport() {
  payserverport_ = 0;
  clear_has_payserverport();
}
inline ::google::protobuf::int32 PBServer::payserverport() const {
  return payserverport_;
}
inline void PBServer::set_payserverport(::google::protobuf::int32 value) {
  set_has_payserverport();
  payserverport_ = value;
}

// -------------------------------------------------------------------

// PBSystemInfoReceive

// optional string affiche = 1;
inline bool PBSystemInfoReceive::has_affiche() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSystemInfoReceive::set_has_affiche() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSystemInfoReceive::clear_has_affiche() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSystemInfoReceive::clear_affiche() {
  if (affiche_ != &::google::protobuf::internal::kEmptyString) {
    affiche_->clear();
  }
  clear_has_affiche();
}
inline const ::std::string& PBSystemInfoReceive::affiche() const {
  return *affiche_;
}
inline void PBSystemInfoReceive::set_affiche(const ::std::string& value) {
  set_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    affiche_ = new ::std::string;
  }
  affiche_->assign(value);
}
inline void PBSystemInfoReceive::set_affiche(const char* value) {
  set_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    affiche_ = new ::std::string;
  }
  affiche_->assign(value);
}
inline void PBSystemInfoReceive::set_affiche(const char* value, size_t size) {
  set_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    affiche_ = new ::std::string;
  }
  affiche_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSystemInfoReceive::mutable_affiche() {
  set_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    affiche_ = new ::std::string;
  }
  return affiche_;
}
inline ::std::string* PBSystemInfoReceive::release_affiche() {
  clear_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = affiche_;
    affiche_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .PBServer allServer = 2;
inline int PBSystemInfoReceive::allserver_size() const {
  return allserver_.size();
}
inline void PBSystemInfoReceive::clear_allserver() {
  allserver_.Clear();
}
inline const ::PBServer& PBSystemInfoReceive::allserver(int index) const {
  return allserver_.Get(index);
}
inline ::PBServer* PBSystemInfoReceive::mutable_allserver(int index) {
  return allserver_.Mutable(index);
}
inline ::PBServer* PBSystemInfoReceive::add_allserver() {
  return allserver_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBServer >&
PBSystemInfoReceive::allserver() const {
  return allserver_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBServer >*
PBSystemInfoReceive::mutable_allserver() {
  return &allserver_;
}

// optional string gameVersion = 3;
inline bool PBSystemInfoReceive::has_gameversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSystemInfoReceive::set_has_gameversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSystemInfoReceive::clear_has_gameversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSystemInfoReceive::clear_gameversion() {
  if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
    gameversion_->clear();
  }
  clear_has_gameversion();
}
inline const ::std::string& PBSystemInfoReceive::gameversion() const {
  return *gameversion_;
}
inline void PBSystemInfoReceive::set_gameversion(const ::std::string& value) {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  gameversion_->assign(value);
}
inline void PBSystemInfoReceive::set_gameversion(const char* value) {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  gameversion_->assign(value);
}
inline void PBSystemInfoReceive::set_gameversion(const char* value, size_t size) {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  gameversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSystemInfoReceive::mutable_gameversion() {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  return gameversion_;
}
inline ::std::string* PBSystemInfoReceive::release_gameversion() {
  clear_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameversion_;
    gameversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string resourceVersion = 4;
inline bool PBSystemInfoReceive::has_resourceversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBSystemInfoReceive::set_has_resourceversion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBSystemInfoReceive::clear_has_resourceversion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBSystemInfoReceive::clear_resourceversion() {
  if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
    resourceversion_->clear();
  }
  clear_has_resourceversion();
}
inline const ::std::string& PBSystemInfoReceive::resourceversion() const {
  return *resourceversion_;
}
inline void PBSystemInfoReceive::set_resourceversion(const ::std::string& value) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(value);
}
inline void PBSystemInfoReceive::set_resourceversion(const char* value) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(value);
}
inline void PBSystemInfoReceive::set_resourceversion(const char* value, size_t size) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSystemInfoReceive::mutable_resourceversion() {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  return resourceversion_;
}
inline ::std::string* PBSystemInfoReceive::release_resourceversion() {
  clear_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resourceversion_;
    resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string battleVersion = 5;
inline bool PBSystemInfoReceive::has_battleversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBSystemInfoReceive::set_has_battleversion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBSystemInfoReceive::clear_has_battleversion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBSystemInfoReceive::clear_battleversion() {
  if (battleversion_ != &::google::protobuf::internal::kEmptyString) {
    battleversion_->clear();
  }
  clear_has_battleversion();
}
inline const ::std::string& PBSystemInfoReceive::battleversion() const {
  return *battleversion_;
}
inline void PBSystemInfoReceive::set_battleversion(const ::std::string& value) {
  set_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    battleversion_ = new ::std::string;
  }
  battleversion_->assign(value);
}
inline void PBSystemInfoReceive::set_battleversion(const char* value) {
  set_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    battleversion_ = new ::std::string;
  }
  battleversion_->assign(value);
}
inline void PBSystemInfoReceive::set_battleversion(const char* value, size_t size) {
  set_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    battleversion_ = new ::std::string;
  }
  battleversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSystemInfoReceive::mutable_battleversion() {
  set_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    battleversion_ = new ::std::string;
  }
  return battleversion_;
}
inline ::std::string* PBSystemInfoReceive::release_battleversion() {
  clear_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = battleversion_;
    battleversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBCard

// optional int32 itemID = 1;
inline bool PBCard::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCard::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCard::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCard::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 PBCard::itemid() const {
  return itemid_;
}
inline void PBCard::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string cardID = 2;
inline bool PBCard::has_cardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCard::set_has_cardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCard::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCard::clear_cardid() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    cardid_->clear();
  }
  clear_has_cardid();
}
inline const ::std::string& PBCard::cardid() const {
  return *cardid_;
}
inline void PBCard::set_cardid(const ::std::string& value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void PBCard::set_cardid(const char* value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void PBCard::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCard::mutable_cardid() {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  return cardid_;
}
inline ::std::string* PBCard::release_cardid() {
  clear_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardid_;
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 cardLevel = 3;
inline bool PBCard::has_cardlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCard::set_has_cardlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCard::clear_has_cardlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCard::clear_cardlevel() {
  cardlevel_ = 0;
  clear_has_cardlevel();
}
inline ::google::protobuf::int32 PBCard::cardlevel() const {
  return cardlevel_;
}
inline void PBCard::set_cardlevel(::google::protobuf::int32 value) {
  set_has_cardlevel();
  cardlevel_ = value;
}

// optional int32 cardExp = 4;
inline bool PBCard::has_cardexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCard::set_has_cardexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCard::clear_has_cardexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCard::clear_cardexp() {
  cardexp_ = 0;
  clear_has_cardexp();
}
inline ::google::protobuf::int32 PBCard::cardexp() const {
  return cardexp_;
}
inline void PBCard::set_cardexp(::google::protobuf::int32 value) {
  set_has_cardexp();
  cardexp_ = value;
}

// optional int32 skillExp = 5;
inline bool PBCard::has_skillexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCard::set_has_skillexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCard::clear_has_skillexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCard::clear_skillexp() {
  skillexp_ = 0;
  clear_has_skillexp();
}
inline ::google::protobuf::int32 PBCard::skillexp() const {
  return skillexp_;
}
inline void PBCard::set_skillexp(::google::protobuf::int32 value) {
  set_has_skillexp();
  skillexp_ = value;
}

// optional int32 skillLevel = 6;
inline bool PBCard::has_skilllevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBCard::set_has_skilllevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBCard::clear_has_skilllevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBCard::clear_skilllevel() {
  skilllevel_ = 0;
  clear_has_skilllevel();
}
inline ::google::protobuf::int32 PBCard::skilllevel() const {
  return skilllevel_;
}
inline void PBCard::set_skilllevel(::google::protobuf::int32 value) {
  set_has_skilllevel();
  skilllevel_ = value;
}

// optional int32 weaponID = 7;
inline bool PBCard::has_weaponid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBCard::set_has_weaponid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBCard::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBCard::clear_weaponid() {
  weaponid_ = 0;
  clear_has_weaponid();
}
inline ::google::protobuf::int32 PBCard::weaponid() const {
  return weaponid_;
}
inline void PBCard::set_weaponid(::google::protobuf::int32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional int32 battlePosition = 8;
inline bool PBCard::has_battleposition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBCard::set_has_battleposition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBCard::clear_has_battleposition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBCard::clear_battleposition() {
  battleposition_ = 0;
  clear_has_battleposition();
}
inline ::google::protobuf::int32 PBCard::battleposition() const {
  return battleposition_;
}
inline void PBCard::set_battleposition(::google::protobuf::int32 value) {
  set_has_battleposition();
  battleposition_ = value;
}

// optional int32 VTLGrow = 9;
inline bool PBCard::has_vtlgrow() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBCard::set_has_vtlgrow() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBCard::clear_has_vtlgrow() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBCard::clear_vtlgrow() {
  vtlgrow_ = 0;
  clear_has_vtlgrow();
}
inline ::google::protobuf::int32 PBCard::vtlgrow() const {
  return vtlgrow_;
}
inline void PBCard::set_vtlgrow(::google::protobuf::int32 value) {
  set_has_vtlgrow();
  vtlgrow_ = value;
}

// optional int32 STRGrow = 10;
inline bool PBCard::has_strgrow() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBCard::set_has_strgrow() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBCard::clear_has_strgrow() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBCard::clear_strgrow() {
  strgrow_ = 0;
  clear_has_strgrow();
}
inline ::google::protobuf::int32 PBCard::strgrow() const {
  return strgrow_;
}
inline void PBCard::set_strgrow(::google::protobuf::int32 value) {
  set_has_strgrow();
  strgrow_ = value;
}

// optional int32 TGHGrow = 11;
inline bool PBCard::has_tghgrow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBCard::set_has_tghgrow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBCard::clear_has_tghgrow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBCard::clear_tghgrow() {
  tghgrow_ = 0;
  clear_has_tghgrow();
}
inline ::google::protobuf::int32 PBCard::tghgrow() const {
  return tghgrow_;
}
inline void PBCard::set_tghgrow(::google::protobuf::int32 value) {
  set_has_tghgrow();
  tghgrow_ = value;
}

// optional int32 QUIGrow = 12;
inline bool PBCard::has_quigrow() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBCard::set_has_quigrow() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBCard::clear_has_quigrow() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBCard::clear_quigrow() {
  quigrow_ = 0;
  clear_has_quigrow();
}
inline ::google::protobuf::int32 PBCard::quigrow() const {
  return quigrow_;
}
inline void PBCard::set_quigrow(::google::protobuf::int32 value) {
  set_has_quigrow();
  quigrow_ = value;
}

// optional int32 MGCGrow = 13;
inline bool PBCard::has_mgcgrow() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PBCard::set_has_mgcgrow() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PBCard::clear_has_mgcgrow() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PBCard::clear_mgcgrow() {
  mgcgrow_ = 0;
  clear_has_mgcgrow();
}
inline ::google::protobuf::int32 PBCard::mgcgrow() const {
  return mgcgrow_;
}
inline void PBCard::set_mgcgrow(::google::protobuf::int32 value) {
  set_has_mgcgrow();
  mgcgrow_ = value;
}

// -------------------------------------------------------------------

// PBAllCard

// repeated .PBCard allCard = 1;
inline int PBAllCard::allcard_size() const {
  return allcard_.size();
}
inline void PBAllCard::clear_allcard() {
  allcard_.Clear();
}
inline const ::PBCard& PBAllCard::allcard(int index) const {
  return allcard_.Get(index);
}
inline ::PBCard* PBAllCard::mutable_allcard(int index) {
  return allcard_.Mutable(index);
}
inline ::PBCard* PBAllCard::add_allcard() {
  return allcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
PBAllCard::allcard() const {
  return allcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
PBAllCard::mutable_allcard() {
  return &allcard_;
}

// -------------------------------------------------------------------

// PBBattleCard

// repeated .PBCard battleCard = 1;
inline int PBBattleCard::battlecard_size() const {
  return battlecard_.size();
}
inline void PBBattleCard::clear_battlecard() {
  battlecard_.Clear();
}
inline const ::PBCard& PBBattleCard::battlecard(int index) const {
  return battlecard_.Get(index);
}
inline ::PBCard* PBBattleCard::mutable_battlecard(int index) {
  return battlecard_.Mutable(index);
}
inline ::PBCard* PBBattleCard::add_battlecard() {
  return battlecard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
PBBattleCard::battlecard() const {
  return battlecard_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
PBBattleCard::mutable_battlecard() {
  return &battlecard_;
}

// -------------------------------------------------------------------

// PBFriend

// optional int32 friendID = 1;
inline bool PBFriend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBFriend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBFriend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBFriend::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 PBFriend::friendid() const {
  return friendid_;
}
inline void PBFriend::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
}

// optional string friendName = 2;
inline bool PBFriend::has_friendname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBFriend::set_has_friendname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBFriend::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBFriend::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& PBFriend::friendname() const {
  return *friendname_;
}
inline void PBFriend::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void PBFriend::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void PBFriend::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFriend::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* PBFriend::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 friendLevel = 3;
inline bool PBFriend::has_friendlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBFriend::set_has_friendlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBFriend::clear_has_friendlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBFriend::clear_friendlevel() {
  friendlevel_ = 0;
  clear_has_friendlevel();
}
inline ::google::protobuf::int32 PBFriend::friendlevel() const {
  return friendlevel_;
}
inline void PBFriend::set_friendlevel(::google::protobuf::int32 value) {
  set_has_friendlevel();
  friendlevel_ = value;
}

// optional .PBCard friendCard = 4;
inline bool PBFriend::has_friendcard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBFriend::set_has_friendcard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBFriend::clear_has_friendcard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBFriend::clear_friendcard() {
  if (friendcard_ != NULL) friendcard_->::PBCard::Clear();
  clear_has_friendcard();
}
inline const ::PBCard& PBFriend::friendcard() const {
  return friendcard_ != NULL ? *friendcard_ : *default_instance_->friendcard_;
}
inline ::PBCard* PBFriend::mutable_friendcard() {
  set_has_friendcard();
  if (friendcard_ == NULL) friendcard_ = new ::PBCard;
  return friendcard_;
}
inline ::PBCard* PBFriend::release_friendcard() {
  clear_has_friendcard();
  ::PBCard* temp = friendcard_;
  friendcard_ = NULL;
  return temp;
}

// optional int32 FriendStatus = 5;
inline bool PBFriend::has_friendstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBFriend::set_has_friendstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBFriend::clear_has_friendstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBFriend::clear_friendstatus() {
  friendstatus_ = 0;
  clear_has_friendstatus();
}
inline ::google::protobuf::int32 PBFriend::friendstatus() const {
  return friendstatus_;
}
inline void PBFriend::set_friendstatus(::google::protobuf::int32 value) {
  set_has_friendstatus();
  friendstatus_ = value;
}

// optional bool isFriend = 6;
inline bool PBFriend::has_isfriend() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBFriend::set_has_isfriend() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBFriend::clear_has_isfriend() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBFriend::clear_isfriend() {
  isfriend_ = false;
  clear_has_isfriend();
}
inline bool PBFriend::isfriend() const {
  return isfriend_;
}
inline void PBFriend::set_isfriend(bool value) {
  set_has_isfriend();
  isfriend_ = value;
}

// optional bool isGetFriendValue = 7;
inline bool PBFriend::has_isgetfriendvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBFriend::set_has_isgetfriendvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBFriend::clear_has_isgetfriendvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBFriend::clear_isgetfriendvalue() {
  isgetfriendvalue_ = false;
  clear_has_isgetfriendvalue();
}
inline bool PBFriend::isgetfriendvalue() const {
  return isgetfriendvalue_;
}
inline void PBFriend::set_isgetfriendvalue(bool value) {
  set_has_isgetfriendvalue();
  isgetfriendvalue_ = value;
}

// optional int32 fightCapacity = 8;
inline bool PBFriend::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBFriend::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBFriend::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBFriend::clear_fightcapacity() {
  fightcapacity_ = 0;
  clear_has_fightcapacity();
}
inline ::google::protobuf::int32 PBFriend::fightcapacity() const {
  return fightcapacity_;
}
inline void PBFriend::set_fightcapacity(::google::protobuf::int32 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// optional int32 capitorCardFightCapacity = 9;
inline bool PBFriend::has_capitorcardfightcapacity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBFriend::set_has_capitorcardfightcapacity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBFriend::clear_has_capitorcardfightcapacity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBFriend::clear_capitorcardfightcapacity() {
  capitorcardfightcapacity_ = 0;
  clear_has_capitorcardfightcapacity();
}
inline ::google::protobuf::int32 PBFriend::capitorcardfightcapacity() const {
  return capitorcardfightcapacity_;
}
inline void PBFriend::set_capitorcardfightcapacity(::google::protobuf::int32 value) {
  set_has_capitorcardfightcapacity();
  capitorcardfightcapacity_ = value;
}

// -------------------------------------------------------------------

// PBAllFriend

// repeated .PBFriend allFriend = 1;
inline int PBAllFriend::allfriend_size() const {
  return allfriend_.size();
}
inline void PBAllFriend::clear_allfriend() {
  allfriend_.Clear();
}
inline const ::PBFriend& PBAllFriend::allfriend(int index) const {
  return allfriend_.Get(index);
}
inline ::PBFriend* PBAllFriend::mutable_allfriend(int index) {
  return allfriend_.Mutable(index);
}
inline ::PBFriend* PBAllFriend::add_allfriend() {
  return allfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
PBAllFriend::allfriend() const {
  return allfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
PBAllFriend::mutable_allfriend() {
  return &allfriend_;
}

// -------------------------------------------------------------------

// PBHelpFriend

// repeated .PBFriend helpFriend = 1;
inline int PBHelpFriend::helpfriend_size() const {
  return helpfriend_.size();
}
inline void PBHelpFriend::clear_helpfriend() {
  helpfriend_.Clear();
}
inline const ::PBFriend& PBHelpFriend::helpfriend(int index) const {
  return helpfriend_.Get(index);
}
inline ::PBFriend* PBHelpFriend::mutable_helpfriend(int index) {
  return helpfriend_.Mutable(index);
}
inline ::PBFriend* PBHelpFriend::add_helpfriend() {
  return helpfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
PBHelpFriend::helpfriend() const {
  return helpfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
PBHelpFriend::mutable_helpfriend() {
  return &helpfriend_;
}

// -------------------------------------------------------------------

// PBWaitingFriend

// repeated .PBFriend waitingFriend = 1;
inline int PBWaitingFriend::waitingfriend_size() const {
  return waitingfriend_.size();
}
inline void PBWaitingFriend::clear_waitingfriend() {
  waitingfriend_.Clear();
}
inline const ::PBFriend& PBWaitingFriend::waitingfriend(int index) const {
  return waitingfriend_.Get(index);
}
inline ::PBFriend* PBWaitingFriend::mutable_waitingfriend(int index) {
  return waitingfriend_.Mutable(index);
}
inline ::PBFriend* PBWaitingFriend::add_waitingfriend() {
  return waitingfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
PBWaitingFriend::waitingfriend() const {
  return waitingfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
PBWaitingFriend::mutable_waitingfriend() {
  return &waitingfriend_;
}

// -------------------------------------------------------------------

// PBFriendSend

// optional int32 friendID = 1;
inline bool PBFriendSend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBFriendSend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBFriendSend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBFriendSend::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 PBFriendSend::friendid() const {
  return friendid_;
}
inline void PBFriendSend::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
}

// -------------------------------------------------------------------

// PBFriendAgreeReceive

// optional int32 agreeResult = 1;
inline bool PBFriendAgreeReceive::has_agreeresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBFriendAgreeReceive::set_has_agreeresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBFriendAgreeReceive::clear_has_agreeresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBFriendAgreeReceive::clear_agreeresult() {
  agreeresult_ = 0;
  clear_has_agreeresult();
}
inline ::google::protobuf::int32 PBFriendAgreeReceive::agreeresult() const {
  return agreeresult_;
}
inline void PBFriendAgreeReceive::set_agreeresult(::google::protobuf::int32 value) {
  set_has_agreeresult();
  agreeresult_ = value;
}

// optional .PBWaitingFriend waitings = 2;
inline bool PBFriendAgreeReceive::has_waitings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBFriendAgreeReceive::set_has_waitings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBFriendAgreeReceive::clear_has_waitings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBFriendAgreeReceive::clear_waitings() {
  if (waitings_ != NULL) waitings_->::PBWaitingFriend::Clear();
  clear_has_waitings();
}
inline const ::PBWaitingFriend& PBFriendAgreeReceive::waitings() const {
  return waitings_ != NULL ? *waitings_ : *default_instance_->waitings_;
}
inline ::PBWaitingFriend* PBFriendAgreeReceive::mutable_waitings() {
  set_has_waitings();
  if (waitings_ == NULL) waitings_ = new ::PBWaitingFriend;
  return waitings_;
}
inline ::PBWaitingFriend* PBFriendAgreeReceive::release_waitings() {
  clear_has_waitings();
  ::PBWaitingFriend* temp = waitings_;
  waitings_ = NULL;
  return temp;
}

// optional .PBAllFriend friends = 3;
inline bool PBFriendAgreeReceive::has_friends() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBFriendAgreeReceive::set_has_friends() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBFriendAgreeReceive::clear_has_friends() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBFriendAgreeReceive::clear_friends() {
  if (friends_ != NULL) friends_->::PBAllFriend::Clear();
  clear_has_friends();
}
inline const ::PBAllFriend& PBFriendAgreeReceive::friends() const {
  return friends_ != NULL ? *friends_ : *default_instance_->friends_;
}
inline ::PBAllFriend* PBFriendAgreeReceive::mutable_friends() {
  set_has_friends();
  if (friends_ == NULL) friends_ = new ::PBAllFriend;
  return friends_;
}
inline ::PBAllFriend* PBFriendAgreeReceive::release_friends() {
  clear_has_friends();
  ::PBAllFriend* temp = friends_;
  friends_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBAddFriendReceive

// optional int32 addResult = 1;
inline bool PBAddFriendReceive::has_addresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAddFriendReceive::set_has_addresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAddFriendReceive::clear_has_addresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAddFriendReceive::clear_addresult() {
  addresult_ = 0;
  clear_has_addresult();
}
inline ::google::protobuf::int32 PBAddFriendReceive::addresult() const {
  return addresult_;
}
inline void PBAddFriendReceive::set_addresult(::google::protobuf::int32 value) {
  set_has_addresult();
  addresult_ = value;
}

// optional .PBAllFriend friends = 2;
inline bool PBAddFriendReceive::has_friends() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAddFriendReceive::set_has_friends() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAddFriendReceive::clear_has_friends() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAddFriendReceive::clear_friends() {
  if (friends_ != NULL) friends_->::PBAllFriend::Clear();
  clear_has_friends();
}
inline const ::PBAllFriend& PBAddFriendReceive::friends() const {
  return friends_ != NULL ? *friends_ : *default_instance_->friends_;
}
inline ::PBAllFriend* PBAddFriendReceive::mutable_friends() {
  set_has_friends();
  if (friends_ == NULL) friends_ = new ::PBAllFriend;
  return friends_;
}
inline ::PBAllFriend* PBAddFriendReceive::release_friends() {
  clear_has_friends();
  ::PBAllFriend* temp = friends_;
  friends_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBActivityBattle

// optional string activityBattleID = 1;
inline bool PBActivityBattle::has_activitybattleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBActivityBattle::set_has_activitybattleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBActivityBattle::clear_has_activitybattleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBActivityBattle::clear_activitybattleid() {
  if (activitybattleid_ != &::google::protobuf::internal::kEmptyString) {
    activitybattleid_->clear();
  }
  clear_has_activitybattleid();
}
inline const ::std::string& PBActivityBattle::activitybattleid() const {
  return *activitybattleid_;
}
inline void PBActivityBattle::set_activitybattleid(const ::std::string& value) {
  set_has_activitybattleid();
  if (activitybattleid_ == &::google::protobuf::internal::kEmptyString) {
    activitybattleid_ = new ::std::string;
  }
  activitybattleid_->assign(value);
}
inline void PBActivityBattle::set_activitybattleid(const char* value) {
  set_has_activitybattleid();
  if (activitybattleid_ == &::google::protobuf::internal::kEmptyString) {
    activitybattleid_ = new ::std::string;
  }
  activitybattleid_->assign(value);
}
inline void PBActivityBattle::set_activitybattleid(const char* value, size_t size) {
  set_has_activitybattleid();
  if (activitybattleid_ == &::google::protobuf::internal::kEmptyString) {
    activitybattleid_ = new ::std::string;
  }
  activitybattleid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBActivityBattle::mutable_activitybattleid() {
  set_has_activitybattleid();
  if (activitybattleid_ == &::google::protobuf::internal::kEmptyString) {
    activitybattleid_ = new ::std::string;
  }
  return activitybattleid_;
}
inline ::std::string* PBActivityBattle::release_activitybattleid() {
  clear_has_activitybattleid();
  if (activitybattleid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activitybattleid_;
    activitybattleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 fightCount = 2;
inline bool PBActivityBattle::has_fightcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBActivityBattle::set_has_fightcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBActivityBattle::clear_has_fightcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBActivityBattle::clear_fightcount() {
  fightcount_ = 0;
  clear_has_fightcount();
}
inline ::google::protobuf::int32 PBActivityBattle::fightcount() const {
  return fightcount_;
}
inline void PBActivityBattle::set_fightcount(::google::protobuf::int32 value) {
  set_has_fightcount();
  fightcount_ = value;
}

// -------------------------------------------------------------------

// PBBattle

// optional string pveProgress = 1;
inline bool PBBattle::has_pveprogress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattle::set_has_pveprogress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattle::clear_has_pveprogress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattle::clear_pveprogress() {
  if (pveprogress_ != &::google::protobuf::internal::kEmptyString) {
    pveprogress_->clear();
  }
  clear_has_pveprogress();
}
inline const ::std::string& PBBattle::pveprogress() const {
  return *pveprogress_;
}
inline void PBBattle::set_pveprogress(const ::std::string& value) {
  set_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    pveprogress_ = new ::std::string;
  }
  pveprogress_->assign(value);
}
inline void PBBattle::set_pveprogress(const char* value) {
  set_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    pveprogress_ = new ::std::string;
  }
  pveprogress_->assign(value);
}
inline void PBBattle::set_pveprogress(const char* value, size_t size) {
  set_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    pveprogress_ = new ::std::string;
  }
  pveprogress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattle::mutable_pveprogress() {
  set_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    pveprogress_ = new ::std::string;
  }
  return pveprogress_;
}
inline ::std::string* PBBattle::release_pveprogress() {
  clear_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pveprogress_;
    pveprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .PBActivityBattle allActivityBattle = 2;
inline int PBBattle::allactivitybattle_size() const {
  return allactivitybattle_.size();
}
inline void PBBattle::clear_allactivitybattle() {
  allactivitybattle_.Clear();
}
inline const ::PBActivityBattle& PBBattle::allactivitybattle(int index) const {
  return allactivitybattle_.Get(index);
}
inline ::PBActivityBattle* PBBattle::mutable_allactivitybattle(int index) {
  return allactivitybattle_.Mutable(index);
}
inline ::PBActivityBattle* PBBattle::add_allactivitybattle() {
  return allactivitybattle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBActivityBattle >&
PBBattle::allactivitybattle() const {
  return allactivitybattle_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBActivityBattle >*
PBBattle::mutable_allactivitybattle() {
  return &allactivitybattle_;
}

// -------------------------------------------------------------------

// PBGem

// optional string gemID = 1;
inline bool PBGem::has_gemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGem::set_has_gemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGem::clear_has_gemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGem::clear_gemid() {
  if (gemid_ != &::google::protobuf::internal::kEmptyString) {
    gemid_->clear();
  }
  clear_has_gemid();
}
inline const ::std::string& PBGem::gemid() const {
  return *gemid_;
}
inline void PBGem::set_gemid(const ::std::string& value) {
  set_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    gemid_ = new ::std::string;
  }
  gemid_->assign(value);
}
inline void PBGem::set_gemid(const char* value) {
  set_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    gemid_ = new ::std::string;
  }
  gemid_->assign(value);
}
inline void PBGem::set_gemid(const char* value, size_t size) {
  set_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    gemid_ = new ::std::string;
  }
  gemid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGem::mutable_gemid() {
  set_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    gemid_ = new ::std::string;
  }
  return gemid_;
}
inline ::std::string* PBGem::release_gemid() {
  clear_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gemid_;
    gemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 gemNumber = 2;
inline bool PBGem::has_gemnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGem::set_has_gemnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGem::clear_has_gemnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGem::clear_gemnumber() {
  gemnumber_ = 0;
  clear_has_gemnumber();
}
inline ::google::protobuf::int32 PBGem::gemnumber() const {
  return gemnumber_;
}
inline void PBGem::set_gemnumber(::google::protobuf::int32 value) {
  set_has_gemnumber();
  gemnumber_ = value;
}

// -------------------------------------------------------------------

// PBAllGem

// repeated .PBGem allGem = 1;
inline int PBAllGem::allgem_size() const {
  return allgem_.size();
}
inline void PBAllGem::clear_allgem() {
  allgem_.Clear();
}
inline const ::PBGem& PBAllGem::allgem(int index) const {
  return allgem_.Get(index);
}
inline ::PBGem* PBAllGem::mutable_allgem(int index) {
  return allgem_.Mutable(index);
}
inline ::PBGem* PBAllGem::add_allgem() {
  return allgem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBGem >&
PBAllGem::allgem() const {
  return allgem_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBGem >*
PBAllGem::mutable_allgem() {
  return &allgem_;
}

// -------------------------------------------------------------------

// PBMission

// optional int32 missionID = 1;
inline bool PBMission::has_missionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMission::set_has_missionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMission::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMission::clear_missionid() {
  missionid_ = 0;
  clear_has_missionid();
}
inline ::google::protobuf::int32 PBMission::missionid() const {
  return missionid_;
}
inline void PBMission::set_missionid(::google::protobuf::int32 value) {
  set_has_missionid();
  missionid_ = value;
}

// optional bool isMissinFinished = 2;
inline bool PBMission::has_ismissinfinished() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMission::set_has_ismissinfinished() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMission::clear_has_ismissinfinished() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMission::clear_ismissinfinished() {
  ismissinfinished_ = false;
  clear_has_ismissinfinished();
}
inline bool PBMission::ismissinfinished() const {
  return ismissinfinished_;
}
inline void PBMission::set_ismissinfinished(bool value) {
  set_has_ismissinfinished();
  ismissinfinished_ = value;
}

// optional string missonProgress = 3;
inline bool PBMission::has_missonprogress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMission::set_has_missonprogress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMission::clear_has_missonprogress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMission::clear_missonprogress() {
  if (missonprogress_ != &::google::protobuf::internal::kEmptyString) {
    missonprogress_->clear();
  }
  clear_has_missonprogress();
}
inline const ::std::string& PBMission::missonprogress() const {
  return *missonprogress_;
}
inline void PBMission::set_missonprogress(const ::std::string& value) {
  set_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    missonprogress_ = new ::std::string;
  }
  missonprogress_->assign(value);
}
inline void PBMission::set_missonprogress(const char* value) {
  set_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    missonprogress_ = new ::std::string;
  }
  missonprogress_->assign(value);
}
inline void PBMission::set_missonprogress(const char* value, size_t size) {
  set_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    missonprogress_ = new ::std::string;
  }
  missonprogress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMission::mutable_missonprogress() {
  set_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    missonprogress_ = new ::std::string;
  }
  return missonprogress_;
}
inline ::std::string* PBMission::release_missonprogress() {
  clear_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = missonprogress_;
    missonprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBAllMission

// repeated .PBMission allMission = 1;
inline int PBAllMission::allmission_size() const {
  return allmission_.size();
}
inline void PBAllMission::clear_allmission() {
  allmission_.Clear();
}
inline const ::PBMission& PBAllMission::allmission(int index) const {
  return allmission_.Get(index);
}
inline ::PBMission* PBAllMission::mutable_allmission(int index) {
  return allmission_.Mutable(index);
}
inline ::PBMission* PBAllMission::add_allmission() {
  return allmission_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMission >&
PBAllMission::allmission() const {
  return allmission_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMission >*
PBAllMission::mutable_allmission() {
  return &allmission_;
}

// -------------------------------------------------------------------

// PBMissionAwardSend

// repeated int32 missionID = 1;
inline int PBMissionAwardSend::missionid_size() const {
  return missionid_.size();
}
inline void PBMissionAwardSend::clear_missionid() {
  missionid_.Clear();
}
inline ::google::protobuf::int32 PBMissionAwardSend::missionid(int index) const {
  return missionid_.Get(index);
}
inline void PBMissionAwardSend::set_missionid(int index, ::google::protobuf::int32 value) {
  missionid_.Set(index, value);
}
inline void PBMissionAwardSend::add_missionid(::google::protobuf::int32 value) {
  missionid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBMissionAwardSend::missionid() const {
  return missionid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBMissionAwardSend::mutable_missionid() {
  return &missionid_;
}

// -------------------------------------------------------------------

// PBUser

// optional int32 userID = 1;
inline bool PBUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBUser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PBUser::userid() const {
  return userid_;
}
inline void PBUser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string userName = 2;
inline bool PBUser::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBUser::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBUser::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBUser::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBUser::username() const {
  return *username_;
}
inline void PBUser::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBUser::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBUser::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBUser::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBUser::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 userLevel = 3;
inline bool PBUser::has_userlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBUser::set_has_userlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBUser::clear_has_userlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBUser::clear_userlevel() {
  userlevel_ = 0;
  clear_has_userlevel();
}
inline ::google::protobuf::int32 PBUser::userlevel() const {
  return userlevel_;
}
inline void PBUser::set_userlevel(::google::protobuf::int32 value) {
  set_has_userlevel();
  userlevel_ = value;
}

// optional int32 userExp = 4;
inline bool PBUser::has_userexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBUser::set_has_userexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBUser::clear_has_userexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBUser::clear_userexp() {
  userexp_ = 0;
  clear_has_userexp();
}
inline ::google::protobuf::int32 PBUser::userexp() const {
  return userexp_;
}
inline void PBUser::set_userexp(::google::protobuf::int32 value) {
  set_has_userexp();
  userexp_ = value;
}

// optional int32 energy = 5;
inline bool PBUser::has_energy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBUser::set_has_energy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBUser::clear_has_energy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBUser::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 PBUser::energy() const {
  return energy_;
}
inline void PBUser::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// optional int32 nextEnergyTime = 6;
inline bool PBUser::has_nextenergytime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBUser::set_has_nextenergytime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBUser::clear_has_nextenergytime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBUser::clear_nextenergytime() {
  nextenergytime_ = 0;
  clear_has_nextenergytime();
}
inline ::google::protobuf::int32 PBUser::nextenergytime() const {
  return nextenergytime_;
}
inline void PBUser::set_nextenergytime(::google::protobuf::int32 value) {
  set_has_nextenergytime();
  nextenergytime_ = value;
}

// optional int32 buyEnergyTime = 7;
inline bool PBUser::has_buyenergytime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBUser::set_has_buyenergytime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBUser::clear_has_buyenergytime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBUser::clear_buyenergytime() {
  buyenergytime_ = 0;
  clear_has_buyenergytime();
}
inline ::google::protobuf::int32 PBUser::buyenergytime() const {
  return buyenergytime_;
}
inline void PBUser::set_buyenergytime(::google::protobuf::int32 value) {
  set_has_buyenergytime();
  buyenergytime_ = value;
}

// optional int32 diamondNumber = 8;
inline bool PBUser::has_diamondnumber() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBUser::set_has_diamondnumber() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBUser::clear_has_diamondnumber() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBUser::clear_diamondnumber() {
  diamondnumber_ = 0;
  clear_has_diamondnumber();
}
inline ::google::protobuf::int32 PBUser::diamondnumber() const {
  return diamondnumber_;
}
inline void PBUser::set_diamondnumber(::google::protobuf::int32 value) {
  set_has_diamondnumber();
  diamondnumber_ = value;
}

// optional int32 friendValue = 9;
inline bool PBUser::has_friendvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBUser::set_has_friendvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBUser::clear_has_friendvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBUser::clear_friendvalue() {
  friendvalue_ = 0;
  clear_has_friendvalue();
}
inline ::google::protobuf::int32 PBUser::friendvalue() const {
  return friendvalue_;
}
inline void PBUser::set_friendvalue(::google::protobuf::int32 value) {
  set_has_friendvalue();
  friendvalue_ = value;
}

// optional int32 goldNumber = 10;
inline bool PBUser::has_goldnumber() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBUser::set_has_goldnumber() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBUser::clear_has_goldnumber() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBUser::clear_goldnumber() {
  goldnumber_ = 0;
  clear_has_goldnumber();
}
inline ::google::protobuf::int32 PBUser::goldnumber() const {
  return goldnumber_;
}
inline void PBUser::set_goldnumber(::google::protobuf::int32 value) {
  set_has_goldnumber();
  goldnumber_ = value;
}

// optional int32 leaderValue = 11;
inline bool PBUser::has_leadervalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBUser::set_has_leadervalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBUser::clear_has_leadervalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBUser::clear_leadervalue() {
  leadervalue_ = 0;
  clear_has_leadervalue();
}
inline ::google::protobuf::int32 PBUser::leadervalue() const {
  return leadervalue_;
}
inline void PBUser::set_leadervalue(::google::protobuf::int32 value) {
  set_has_leadervalue();
  leadervalue_ = value;
}

// optional bool hasMissionFinished = 12;
inline bool PBUser::has_hasmissionfinished() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBUser::set_has_hasmissionfinished() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBUser::clear_has_hasmissionfinished() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBUser::clear_hasmissionfinished() {
  hasmissionfinished_ = false;
  clear_has_hasmissionfinished();
}
inline bool PBUser::hasmissionfinished() const {
  return hasmissionfinished_;
}
inline void PBUser::set_hasmissionfinished(bool value) {
  set_has_hasmissionfinished();
  hasmissionfinished_ = value;
}

// optional int32 bagMaxCount = 13;
inline bool PBUser::has_bagmaxcount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PBUser::set_has_bagmaxcount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PBUser::clear_has_bagmaxcount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PBUser::clear_bagmaxcount() {
  bagmaxcount_ = 0;
  clear_has_bagmaxcount();
}
inline ::google::protobuf::int32 PBUser::bagmaxcount() const {
  return bagmaxcount_;
}
inline void PBUser::set_bagmaxcount(::google::protobuf::int32 value) {
  set_has_bagmaxcount();
  bagmaxcount_ = value;
}

// optional int32 energyAgentiaCount = 14;
inline bool PBUser::has_energyagentiacount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PBUser::set_has_energyagentiacount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PBUser::clear_has_energyagentiacount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PBUser::clear_energyagentiacount() {
  energyagentiacount_ = 0;
  clear_has_energyagentiacount();
}
inline ::google::protobuf::int32 PBUser::energyagentiacount() const {
  return energyagentiacount_;
}
inline void PBUser::set_energyagentiacount(::google::protobuf::int32 value) {
  set_has_energyagentiacount();
  energyagentiacount_ = value;
}

// optional int32 captainIndex = 15;
inline bool PBUser::has_captainindex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PBUser::set_has_captainindex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PBUser::clear_has_captainindex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PBUser::clear_captainindex() {
  captainindex_ = 0;
  clear_has_captainindex();
}
inline ::google::protobuf::int32 PBUser::captainindex() const {
  return captainindex_;
}
inline void PBUser::set_captainindex(::google::protobuf::int32 value) {
  set_has_captainindex();
  captainindex_ = value;
}

// optional int32 rechargedDiamond = 16;
inline bool PBUser::has_rechargeddiamond() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PBUser::set_has_rechargeddiamond() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PBUser::clear_has_rechargeddiamond() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PBUser::clear_rechargeddiamond() {
  rechargeddiamond_ = 0;
  clear_has_rechargeddiamond();
}
inline ::google::protobuf::int32 PBUser::rechargeddiamond() const {
  return rechargeddiamond_;
}
inline void PBUser::set_rechargeddiamond(::google::protobuf::int32 value) {
  set_has_rechargeddiamond();
  rechargeddiamond_ = value;
}

// optional int32 wipeOutCount = 17;
inline bool PBUser::has_wipeoutcount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PBUser::set_has_wipeoutcount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PBUser::clear_has_wipeoutcount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PBUser::clear_wipeoutcount() {
  wipeoutcount_ = 0;
  clear_has_wipeoutcount();
}
inline ::google::protobuf::int32 PBUser::wipeoutcount() const {
  return wipeoutcount_;
}
inline void PBUser::set_wipeoutcount(::google::protobuf::int32 value) {
  set_has_wipeoutcount();
  wipeoutcount_ = value;
}

// -------------------------------------------------------------------

// PBMissionAwardReceive

// optional .PBUser user = 1;
inline bool PBMissionAwardReceive::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMissionAwardReceive::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMissionAwardReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMissionAwardReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBMissionAwardReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBMissionAwardReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBMissionAwardReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// optional .PBAllCard cards = 2;
inline bool PBMissionAwardReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMissionAwardReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMissionAwardReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMissionAwardReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBMissionAwardReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBMissionAwardReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBMissionAwardReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional .PBAllGem gems = 3;
inline bool PBMissionAwardReceive::has_gems() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMissionAwardReceive::set_has_gems() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMissionAwardReceive::clear_has_gems() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMissionAwardReceive::clear_gems() {
  if (gems_ != NULL) gems_->::PBAllGem::Clear();
  clear_has_gems();
}
inline const ::PBAllGem& PBMissionAwardReceive::gems() const {
  return gems_ != NULL ? *gems_ : *default_instance_->gems_;
}
inline ::PBAllGem* PBMissionAwardReceive::mutable_gems() {
  set_has_gems();
  if (gems_ == NULL) gems_ = new ::PBAllGem;
  return gems_;
}
inline ::PBAllGem* PBMissionAwardReceive::release_gems() {
  clear_has_gems();
  ::PBAllGem* temp = gems_;
  gems_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBRunningAfficheReceive

// repeated string affiches = 1;
inline int PBRunningAfficheReceive::affiches_size() const {
  return affiches_.size();
}
inline void PBRunningAfficheReceive::clear_affiches() {
  affiches_.Clear();
}
inline const ::std::string& PBRunningAfficheReceive::affiches(int index) const {
  return affiches_.Get(index);
}
inline ::std::string* PBRunningAfficheReceive::mutable_affiches(int index) {
  return affiches_.Mutable(index);
}
inline void PBRunningAfficheReceive::set_affiches(int index, const ::std::string& value) {
  affiches_.Mutable(index)->assign(value);
}
inline void PBRunningAfficheReceive::set_affiches(int index, const char* value) {
  affiches_.Mutable(index)->assign(value);
}
inline void PBRunningAfficheReceive::set_affiches(int index, const char* value, size_t size) {
  affiches_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRunningAfficheReceive::add_affiches() {
  return affiches_.Add();
}
inline void PBRunningAfficheReceive::add_affiches(const ::std::string& value) {
  affiches_.Add()->assign(value);
}
inline void PBRunningAfficheReceive::add_affiches(const char* value) {
  affiches_.Add()->assign(value);
}
inline void PBRunningAfficheReceive::add_affiches(const char* value, size_t size) {
  affiches_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBRunningAfficheReceive::affiches() const {
  return affiches_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBRunningAfficheReceive::mutable_affiches() {
  return &affiches_;
}

// -------------------------------------------------------------------

// PBAwardSend

// optional int32 awardType = 1;
inline bool PBAwardSend::has_awardtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAwardSend::set_has_awardtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAwardSend::clear_has_awardtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAwardSend::clear_awardtype() {
  awardtype_ = 0;
  clear_has_awardtype();
}
inline ::google::protobuf::int32 PBAwardSend::awardtype() const {
  return awardtype_;
}
inline void PBAwardSend::set_awardtype(::google::protobuf::int32 value) {
  set_has_awardtype();
  awardtype_ = value;
}

// -------------------------------------------------------------------

// PBAwardReceive

// optional int32 awardResult = 1;
inline bool PBAwardReceive::has_awardresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAwardReceive::set_has_awardresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAwardReceive::clear_has_awardresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAwardReceive::clear_awardresult() {
  awardresult_ = 0;
  clear_has_awardresult();
}
inline ::google::protobuf::int32 PBAwardReceive::awardresult() const {
  return awardresult_;
}
inline void PBAwardReceive::set_awardresult(::google::protobuf::int32 value) {
  set_has_awardresult();
  awardresult_ = value;
}

// optional .PBUser user = 2;
inline bool PBAwardReceive::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAwardReceive::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAwardReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAwardReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBAwardReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBAwardReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBAwardReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// optional .PBAllCard cards = 3;
inline bool PBAwardReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBAwardReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBAwardReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBAwardReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBAwardReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBAwardReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBAwardReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// repeated .PBCard awardCard = 4;
inline int PBAwardReceive::awardcard_size() const {
  return awardcard_.size();
}
inline void PBAwardReceive::clear_awardcard() {
  awardcard_.Clear();
}
inline const ::PBCard& PBAwardReceive::awardcard(int index) const {
  return awardcard_.Get(index);
}
inline ::PBCard* PBAwardReceive::mutable_awardcard(int index) {
  return awardcard_.Mutable(index);
}
inline ::PBCard* PBAwardReceive::add_awardcard() {
  return awardcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
PBAwardReceive::awardcard() const {
  return awardcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
PBAwardReceive::mutable_awardcard() {
  return &awardcard_;
}

// optional .PBAllGem gems = 5;
inline bool PBAwardReceive::has_gems() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBAwardReceive::set_has_gems() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBAwardReceive::clear_has_gems() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBAwardReceive::clear_gems() {
  if (gems_ != NULL) gems_->::PBAllGem::Clear();
  clear_has_gems();
}
inline const ::PBAllGem& PBAwardReceive::gems() const {
  return gems_ != NULL ? *gems_ : *default_instance_->gems_;
}
inline ::PBAllGem* PBAwardReceive::mutable_gems() {
  set_has_gems();
  if (gems_ == NULL) gems_ = new ::PBAllGem;
  return gems_;
}
inline ::PBAllGem* PBAwardReceive::release_gems() {
  clear_has_gems();
  ::PBAllGem* temp = gems_;
  gems_ = NULL;
  return temp;
}

// repeated .PBGem awardGem = 6;
inline int PBAwardReceive::awardgem_size() const {
  return awardgem_.size();
}
inline void PBAwardReceive::clear_awardgem() {
  awardgem_.Clear();
}
inline const ::PBGem& PBAwardReceive::awardgem(int index) const {
  return awardgem_.Get(index);
}
inline ::PBGem* PBAwardReceive::mutable_awardgem(int index) {
  return awardgem_.Mutable(index);
}
inline ::PBGem* PBAwardReceive::add_awardgem() {
  return awardgem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBGem >&
PBAwardReceive::awardgem() const {
  return awardgem_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBGem >*
PBAwardReceive::mutable_awardgem() {
  return &awardgem_;
}

// -------------------------------------------------------------------

// PBUseEnergyReceive

// optional .PBUser user = 2;
inline bool PBUseEnergyReceive::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBUseEnergyReceive::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBUseEnergyReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBUseEnergyReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBUseEnergyReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBUseEnergyReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBUseEnergyReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBRegisterCheckSend

// optional string macAddress = 1;
inline bool PBRegisterCheckSend::has_macaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRegisterCheckSend::set_has_macaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRegisterCheckSend::clear_has_macaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRegisterCheckSend::clear_macaddress() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    macaddress_->clear();
  }
  clear_has_macaddress();
}
inline const ::std::string& PBRegisterCheckSend::macaddress() const {
  return *macaddress_;
}
inline void PBRegisterCheckSend::set_macaddress(const ::std::string& value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBRegisterCheckSend::set_macaddress(const char* value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBRegisterCheckSend::set_macaddress(const char* value, size_t size) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterCheckSend::mutable_macaddress() {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  return macaddress_;
}
inline ::std::string* PBRegisterCheckSend::release_macaddress() {
  clear_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = macaddress_;
    macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 userSourceType = 2;
inline bool PBRegisterCheckSend::has_usersourcetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRegisterCheckSend::set_has_usersourcetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRegisterCheckSend::clear_has_usersourcetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRegisterCheckSend::clear_usersourcetype() {
  usersourcetype_ = 0;
  clear_has_usersourcetype();
}
inline ::google::protobuf::int32 PBRegisterCheckSend::usersourcetype() const {
  return usersourcetype_;
}
inline void PBRegisterCheckSend::set_usersourcetype(::google::protobuf::int32 value) {
  set_has_usersourcetype();
  usersourcetype_ = value;
}

// optional string userAccount = 3;
inline bool PBRegisterCheckSend::has_useraccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBRegisterCheckSend::set_has_useraccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBRegisterCheckSend::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBRegisterCheckSend::clear_useraccount() {
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    useraccount_->clear();
  }
  clear_has_useraccount();
}
inline const ::std::string& PBRegisterCheckSend::useraccount() const {
  return *useraccount_;
}
inline void PBRegisterCheckSend::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBRegisterCheckSend::set_useraccount(const char* value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBRegisterCheckSend::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterCheckSend::mutable_useraccount() {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  return useraccount_;
}
inline ::std::string* PBRegisterCheckSend::release_useraccount() {
  clear_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = useraccount_;
    useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userPasswd = 4;
inline bool PBRegisterCheckSend::has_userpasswd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBRegisterCheckSend::set_has_userpasswd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBRegisterCheckSend::clear_has_userpasswd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBRegisterCheckSend::clear_userpasswd() {
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    userpasswd_->clear();
  }
  clear_has_userpasswd();
}
inline const ::std::string& PBRegisterCheckSend::userpasswd() const {
  return *userpasswd_;
}
inline void PBRegisterCheckSend::set_userpasswd(const ::std::string& value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBRegisterCheckSend::set_userpasswd(const char* value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBRegisterCheckSend::set_userpasswd(const char* value, size_t size) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterCheckSend::mutable_userpasswd() {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  return userpasswd_;
}
inline ::std::string* PBRegisterCheckSend::release_userpasswd() {
  clear_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpasswd_;
    userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userName = 5;
inline bool PBRegisterCheckSend::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBRegisterCheckSend::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBRegisterCheckSend::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBRegisterCheckSend::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBRegisterCheckSend::username() const {
  return *username_;
}
inline void PBRegisterCheckSend::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBRegisterCheckSend::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBRegisterCheckSend::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterCheckSend::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBRegisterCheckSend::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBRegisterCheckReceive

// optional int32 result = 1;
inline bool PBRegisterCheckReceive::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRegisterCheckReceive::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRegisterCheckReceive::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRegisterCheckReceive::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PBRegisterCheckReceive::result() const {
  return result_;
}
inline void PBRegisterCheckReceive::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// PBRegisterSend

// optional string macAddress = 1;
inline bool PBRegisterSend::has_macaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRegisterSend::set_has_macaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRegisterSend::clear_has_macaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRegisterSend::clear_macaddress() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    macaddress_->clear();
  }
  clear_has_macaddress();
}
inline const ::std::string& PBRegisterSend::macaddress() const {
  return *macaddress_;
}
inline void PBRegisterSend::set_macaddress(const ::std::string& value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBRegisterSend::set_macaddress(const char* value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBRegisterSend::set_macaddress(const char* value, size_t size) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterSend::mutable_macaddress() {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  return macaddress_;
}
inline ::std::string* PBRegisterSend::release_macaddress() {
  clear_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = macaddress_;
    macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 userSourceType = 2;
inline bool PBRegisterSend::has_usersourcetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRegisterSend::set_has_usersourcetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRegisterSend::clear_has_usersourcetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRegisterSend::clear_usersourcetype() {
  usersourcetype_ = 0;
  clear_has_usersourcetype();
}
inline ::google::protobuf::int32 PBRegisterSend::usersourcetype() const {
  return usersourcetype_;
}
inline void PBRegisterSend::set_usersourcetype(::google::protobuf::int32 value) {
  set_has_usersourcetype();
  usersourcetype_ = value;
}

// optional string userAccount = 3;
inline bool PBRegisterSend::has_useraccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBRegisterSend::set_has_useraccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBRegisterSend::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBRegisterSend::clear_useraccount() {
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    useraccount_->clear();
  }
  clear_has_useraccount();
}
inline const ::std::string& PBRegisterSend::useraccount() const {
  return *useraccount_;
}
inline void PBRegisterSend::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBRegisterSend::set_useraccount(const char* value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBRegisterSend::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterSend::mutable_useraccount() {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  return useraccount_;
}
inline ::std::string* PBRegisterSend::release_useraccount() {
  clear_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = useraccount_;
    useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userPasswd = 4;
inline bool PBRegisterSend::has_userpasswd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBRegisterSend::set_has_userpasswd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBRegisterSend::clear_has_userpasswd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBRegisterSend::clear_userpasswd() {
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    userpasswd_->clear();
  }
  clear_has_userpasswd();
}
inline const ::std::string& PBRegisterSend::userpasswd() const {
  return *userpasswd_;
}
inline void PBRegisterSend::set_userpasswd(const ::std::string& value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBRegisterSend::set_userpasswd(const char* value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBRegisterSend::set_userpasswd(const char* value, size_t size) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterSend::mutable_userpasswd() {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  return userpasswd_;
}
inline ::std::string* PBRegisterSend::release_userpasswd() {
  clear_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpasswd_;
    userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userName = 5;
inline bool PBRegisterSend::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBRegisterSend::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBRegisterSend::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBRegisterSend::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBRegisterSend::username() const {
  return *username_;
}
inline void PBRegisterSend::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBRegisterSend::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBRegisterSend::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterSend::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBRegisterSend::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 captainIndex = 6;
inline bool PBRegisterSend::has_captainindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBRegisterSend::set_has_captainindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBRegisterSend::clear_has_captainindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBRegisterSend::clear_captainindex() {
  captainindex_ = 0;
  clear_has_captainindex();
}
inline ::google::protobuf::int32 PBRegisterSend::captainindex() const {
  return captainindex_;
}
inline void PBRegisterSend::set_captainindex(::google::protobuf::int32 value) {
  set_has_captainindex();
  captainindex_ = value;
}

// -------------------------------------------------------------------

// PBLoginSend

// optional string macAddress = 1;
inline bool PBLoginSend::has_macaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBLoginSend::set_has_macaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBLoginSend::clear_has_macaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBLoginSend::clear_macaddress() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    macaddress_->clear();
  }
  clear_has_macaddress();
}
inline const ::std::string& PBLoginSend::macaddress() const {
  return *macaddress_;
}
inline void PBLoginSend::set_macaddress(const ::std::string& value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBLoginSend::set_macaddress(const char* value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBLoginSend::set_macaddress(const char* value, size_t size) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBLoginSend::mutable_macaddress() {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  return macaddress_;
}
inline ::std::string* PBLoginSend::release_macaddress() {
  clear_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = macaddress_;
    macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 userSourceType = 2;
inline bool PBLoginSend::has_usersourcetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBLoginSend::set_has_usersourcetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBLoginSend::clear_has_usersourcetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBLoginSend::clear_usersourcetype() {
  usersourcetype_ = 0;
  clear_has_usersourcetype();
}
inline ::google::protobuf::int32 PBLoginSend::usersourcetype() const {
  return usersourcetype_;
}
inline void PBLoginSend::set_usersourcetype(::google::protobuf::int32 value) {
  set_has_usersourcetype();
  usersourcetype_ = value;
}

// optional string userAccount = 3;
inline bool PBLoginSend::has_useraccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBLoginSend::set_has_useraccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBLoginSend::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBLoginSend::clear_useraccount() {
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    useraccount_->clear();
  }
  clear_has_useraccount();
}
inline const ::std::string& PBLoginSend::useraccount() const {
  return *useraccount_;
}
inline void PBLoginSend::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBLoginSend::set_useraccount(const char* value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBLoginSend::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBLoginSend::mutable_useraccount() {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  return useraccount_;
}
inline ::std::string* PBLoginSend::release_useraccount() {
  clear_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = useraccount_;
    useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userPasswd = 4;
inline bool PBLoginSend::has_userpasswd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBLoginSend::set_has_userpasswd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBLoginSend::clear_has_userpasswd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBLoginSend::clear_userpasswd() {
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    userpasswd_->clear();
  }
  clear_has_userpasswd();
}
inline const ::std::string& PBLoginSend::userpasswd() const {
  return *userpasswd_;
}
inline void PBLoginSend::set_userpasswd(const ::std::string& value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBLoginSend::set_userpasswd(const char* value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBLoginSend::set_userpasswd(const char* value, size_t size) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBLoginSend::mutable_userpasswd() {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  return userpasswd_;
}
inline ::std::string* PBLoginSend::release_userpasswd() {
  clear_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpasswd_;
    userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBLoginReceive

// optional int32 result = 1;
inline bool PBLoginReceive::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBLoginReceive::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBLoginReceive::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBLoginReceive::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PBLoginReceive::result() const {
  return result_;
}
inline void PBLoginReceive::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .PBUser user = 2;
inline bool PBLoginReceive::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBLoginReceive::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBLoginReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBLoginReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBLoginReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBLoginReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBLoginReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// optional .PBBattle battle = 3;
inline bool PBLoginReceive::has_battle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBLoginReceive::set_has_battle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBLoginReceive::clear_has_battle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBLoginReceive::clear_battle() {
  if (battle_ != NULL) battle_->::PBBattle::Clear();
  clear_has_battle();
}
inline const ::PBBattle& PBLoginReceive::battle() const {
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::PBBattle* PBLoginReceive::mutable_battle() {
  set_has_battle();
  if (battle_ == NULL) battle_ = new ::PBBattle;
  return battle_;
}
inline ::PBBattle* PBLoginReceive::release_battle() {
  clear_has_battle();
  ::PBBattle* temp = battle_;
  battle_ = NULL;
  return temp;
}

// optional .PBAllCard cards = 4;
inline bool PBLoginReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBLoginReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBLoginReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBLoginReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBLoginReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBLoginReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBLoginReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional .PBAllMission missions = 5;
inline bool PBLoginReceive::has_missions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBLoginReceive::set_has_missions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBLoginReceive::clear_has_missions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBLoginReceive::clear_missions() {
  if (missions_ != NULL) missions_->::PBAllMission::Clear();
  clear_has_missions();
}
inline const ::PBAllMission& PBLoginReceive::missions() const {
  return missions_ != NULL ? *missions_ : *default_instance_->missions_;
}
inline ::PBAllMission* PBLoginReceive::mutable_missions() {
  set_has_missions();
  if (missions_ == NULL) missions_ = new ::PBAllMission;
  return missions_;
}
inline ::PBAllMission* PBLoginReceive::release_missions() {
  clear_has_missions();
  ::PBAllMission* temp = missions_;
  missions_ = NULL;
  return temp;
}

// optional .PBBattleCard battleCards = 6;
inline bool PBLoginReceive::has_battlecards() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBLoginReceive::set_has_battlecards() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBLoginReceive::clear_has_battlecards() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBLoginReceive::clear_battlecards() {
  if (battlecards_ != NULL) battlecards_->::PBBattleCard::Clear();
  clear_has_battlecards();
}
inline const ::PBBattleCard& PBLoginReceive::battlecards() const {
  return battlecards_ != NULL ? *battlecards_ : *default_instance_->battlecards_;
}
inline ::PBBattleCard* PBLoginReceive::mutable_battlecards() {
  set_has_battlecards();
  if (battlecards_ == NULL) battlecards_ = new ::PBBattleCard;
  return battlecards_;
}
inline ::PBBattleCard* PBLoginReceive::release_battlecards() {
  clear_has_battlecards();
  ::PBBattleCard* temp = battlecards_;
  battlecards_ = NULL;
  return temp;
}

// optional .PBAllGem gems = 7;
inline bool PBLoginReceive::has_gems() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBLoginReceive::set_has_gems() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBLoginReceive::clear_has_gems() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBLoginReceive::clear_gems() {
  if (gems_ != NULL) gems_->::PBAllGem::Clear();
  clear_has_gems();
}
inline const ::PBAllGem& PBLoginReceive::gems() const {
  return gems_ != NULL ? *gems_ : *default_instance_->gems_;
}
inline ::PBAllGem* PBLoginReceive::mutable_gems() {
  set_has_gems();
  if (gems_ == NULL) gems_ = new ::PBAllGem;
  return gems_;
}
inline ::PBAllGem* PBLoginReceive::release_gems() {
  clear_has_gems();
  ::PBAllGem* temp = gems_;
  gems_ = NULL;
  return temp;
}

// optional string token = 8;
inline bool PBLoginReceive::has_token() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBLoginReceive::set_has_token() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBLoginReceive::clear_has_token() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBLoginReceive::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& PBLoginReceive::token() const {
  return *token_;
}
inline void PBLoginReceive::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void PBLoginReceive::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void PBLoginReceive::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBLoginReceive::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* PBLoginReceive::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 fightCapacity = 9;
inline bool PBLoginReceive::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBLoginReceive::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBLoginReceive::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBLoginReceive::clear_fightcapacity() {
  fightcapacity_ = 0;
  clear_has_fightcapacity();
}
inline ::google::protobuf::int32 PBLoginReceive::fightcapacity() const {
  return fightcapacity_;
}
inline void PBLoginReceive::set_fightcapacity(::google::protobuf::int32 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// -------------------------------------------------------------------

// PBCardLevelUpSend

// optional int32 upCardItemID = 1;
inline bool PBCardLevelUpSend::has_upcarditemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardLevelUpSend::set_has_upcarditemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardLevelUpSend::clear_has_upcarditemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardLevelUpSend::clear_upcarditemid() {
  upcarditemid_ = 0;
  clear_has_upcarditemid();
}
inline ::google::protobuf::int32 PBCardLevelUpSend::upcarditemid() const {
  return upcarditemid_;
}
inline void PBCardLevelUpSend::set_upcarditemid(::google::protobuf::int32 value) {
  set_has_upcarditemid();
  upcarditemid_ = value;
}

// repeated int32 eatCardItemIDs = 2;
inline int PBCardLevelUpSend::eatcarditemids_size() const {
  return eatcarditemids_.size();
}
inline void PBCardLevelUpSend::clear_eatcarditemids() {
  eatcarditemids_.Clear();
}
inline ::google::protobuf::int32 PBCardLevelUpSend::eatcarditemids(int index) const {
  return eatcarditemids_.Get(index);
}
inline void PBCardLevelUpSend::set_eatcarditemids(int index, ::google::protobuf::int32 value) {
  eatcarditemids_.Set(index, value);
}
inline void PBCardLevelUpSend::add_eatcarditemids(::google::protobuf::int32 value) {
  eatcarditemids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBCardLevelUpSend::eatcarditemids() const {
  return eatcarditemids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBCardLevelUpSend::mutable_eatcarditemids() {
  return &eatcarditemids_;
}

// -------------------------------------------------------------------

// PBCardLevelUpReceive

// optional int32 upResult = 1;
inline bool PBCardLevelUpReceive::has_upresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardLevelUpReceive::set_has_upresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardLevelUpReceive::clear_has_upresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardLevelUpReceive::clear_upresult() {
  upresult_ = 0;
  clear_has_upresult();
}
inline ::google::protobuf::int32 PBCardLevelUpReceive::upresult() const {
  return upresult_;
}
inline void PBCardLevelUpReceive::set_upresult(::google::protobuf::int32 value) {
  set_has_upresult();
  upresult_ = value;
}

// optional .PBAllCard cards = 2;
inline bool PBCardLevelUpReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardLevelUpReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardLevelUpReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardLevelUpReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBCardLevelUpReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBCardLevelUpReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBCardLevelUpReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional int32 goldNumber = 3;
inline bool PBCardLevelUpReceive::has_goldnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCardLevelUpReceive::set_has_goldnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCardLevelUpReceive::clear_has_goldnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCardLevelUpReceive::clear_goldnumber() {
  goldnumber_ = 0;
  clear_has_goldnumber();
}
inline ::google::protobuf::int32 PBCardLevelUpReceive::goldnumber() const {
  return goldnumber_;
}
inline void PBCardLevelUpReceive::set_goldnumber(::google::protobuf::int32 value) {
  set_has_goldnumber();
  goldnumber_ = value;
}

// optional .PBCard targetCard = 4;
inline bool PBCardLevelUpReceive::has_targetcard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCardLevelUpReceive::set_has_targetcard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCardLevelUpReceive::clear_has_targetcard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCardLevelUpReceive::clear_targetcard() {
  if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
  clear_has_targetcard();
}
inline const ::PBCard& PBCardLevelUpReceive::targetcard() const {
  return targetcard_ != NULL ? *targetcard_ : *default_instance_->targetcard_;
}
inline ::PBCard* PBCardLevelUpReceive::mutable_targetcard() {
  set_has_targetcard();
  if (targetcard_ == NULL) targetcard_ = new ::PBCard;
  return targetcard_;
}
inline ::PBCard* PBCardLevelUpReceive::release_targetcard() {
  clear_has_targetcard();
  ::PBCard* temp = targetcard_;
  targetcard_ = NULL;
  return temp;
}

// optional int32 fightCapacity = 5;
inline bool PBCardLevelUpReceive::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCardLevelUpReceive::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCardLevelUpReceive::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCardLevelUpReceive::clear_fightcapacity() {
  fightcapacity_ = 0;
  clear_has_fightcapacity();
}
inline ::google::protobuf::int32 PBCardLevelUpReceive::fightcapacity() const {
  return fightcapacity_;
}
inline void PBCardLevelUpReceive::set_fightcapacity(::google::protobuf::int32 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// -------------------------------------------------------------------

// PBCardEvolutionSend

// optional int32 targetCardItemID = 1;
inline bool PBCardEvolutionSend::has_targetcarditemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardEvolutionSend::set_has_targetcarditemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardEvolutionSend::clear_has_targetcarditemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardEvolutionSend::clear_targetcarditemid() {
  targetcarditemid_ = 0;
  clear_has_targetcarditemid();
}
inline ::google::protobuf::int32 PBCardEvolutionSend::targetcarditemid() const {
  return targetcarditemid_;
}
inline void PBCardEvolutionSend::set_targetcarditemid(::google::protobuf::int32 value) {
  set_has_targetcarditemid();
  targetcarditemid_ = value;
}

// optional string targetGemId = 2;
inline bool PBCardEvolutionSend::has_targetgemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardEvolutionSend::set_has_targetgemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardEvolutionSend::clear_has_targetgemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardEvolutionSend::clear_targetgemid() {
  if (targetgemid_ != &::google::protobuf::internal::kEmptyString) {
    targetgemid_->clear();
  }
  clear_has_targetgemid();
}
inline const ::std::string& PBCardEvolutionSend::targetgemid() const {
  return *targetgemid_;
}
inline void PBCardEvolutionSend::set_targetgemid(const ::std::string& value) {
  set_has_targetgemid();
  if (targetgemid_ == &::google::protobuf::internal::kEmptyString) {
    targetgemid_ = new ::std::string;
  }
  targetgemid_->assign(value);
}
inline void PBCardEvolutionSend::set_targetgemid(const char* value) {
  set_has_targetgemid();
  if (targetgemid_ == &::google::protobuf::internal::kEmptyString) {
    targetgemid_ = new ::std::string;
  }
  targetgemid_->assign(value);
}
inline void PBCardEvolutionSend::set_targetgemid(const char* value, size_t size) {
  set_has_targetgemid();
  if (targetgemid_ == &::google::protobuf::internal::kEmptyString) {
    targetgemid_ = new ::std::string;
  }
  targetgemid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCardEvolutionSend::mutable_targetgemid() {
  set_has_targetgemid();
  if (targetgemid_ == &::google::protobuf::internal::kEmptyString) {
    targetgemid_ = new ::std::string;
  }
  return targetgemid_;
}
inline ::std::string* PBCardEvolutionSend::release_targetgemid() {
  clear_has_targetgemid();
  if (targetgemid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetgemid_;
    targetgemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 materialCardItemIDs = 3;
inline int PBCardEvolutionSend::materialcarditemids_size() const {
  return materialcarditemids_.size();
}
inline void PBCardEvolutionSend::clear_materialcarditemids() {
  materialcarditemids_.Clear();
}
inline ::google::protobuf::int32 PBCardEvolutionSend::materialcarditemids(int index) const {
  return materialcarditemids_.Get(index);
}
inline void PBCardEvolutionSend::set_materialcarditemids(int index, ::google::protobuf::int32 value) {
  materialcarditemids_.Set(index, value);
}
inline void PBCardEvolutionSend::add_materialcarditemids(::google::protobuf::int32 value) {
  materialcarditemids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBCardEvolutionSend::materialcarditemids() const {
  return materialcarditemids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBCardEvolutionSend::mutable_materialcarditemids() {
  return &materialcarditemids_;
}

// optional string gemID = 4;
inline bool PBCardEvolutionSend::has_gemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCardEvolutionSend::set_has_gemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCardEvolutionSend::clear_has_gemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCardEvolutionSend::clear_gemid() {
  if (gemid_ != &::google::protobuf::internal::kEmptyString) {
    gemid_->clear();
  }
  clear_has_gemid();
}
inline const ::std::string& PBCardEvolutionSend::gemid() const {
  return *gemid_;
}
inline void PBCardEvolutionSend::set_gemid(const ::std::string& value) {
  set_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    gemid_ = new ::std::string;
  }
  gemid_->assign(value);
}
inline void PBCardEvolutionSend::set_gemid(const char* value) {
  set_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    gemid_ = new ::std::string;
  }
  gemid_->assign(value);
}
inline void PBCardEvolutionSend::set_gemid(const char* value, size_t size) {
  set_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    gemid_ = new ::std::string;
  }
  gemid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCardEvolutionSend::mutable_gemid() {
  set_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    gemid_ = new ::std::string;
  }
  return gemid_;
}
inline ::std::string* PBCardEvolutionSend::release_gemid() {
  clear_has_gemid();
  if (gemid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gemid_;
    gemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBCardEvolutionRecieve

// optional int32 evolutionResult = 1;
inline bool PBCardEvolutionRecieve::has_evolutionresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardEvolutionRecieve::set_has_evolutionresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardEvolutionRecieve::clear_has_evolutionresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardEvolutionRecieve::clear_evolutionresult() {
  evolutionresult_ = 0;
  clear_has_evolutionresult();
}
inline ::google::protobuf::int32 PBCardEvolutionRecieve::evolutionresult() const {
  return evolutionresult_;
}
inline void PBCardEvolutionRecieve::set_evolutionresult(::google::protobuf::int32 value) {
  set_has_evolutionresult();
  evolutionresult_ = value;
}

// optional .PBCard targetCard = 2;
inline bool PBCardEvolutionRecieve::has_targetcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardEvolutionRecieve::set_has_targetcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardEvolutionRecieve::clear_has_targetcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardEvolutionRecieve::clear_targetcard() {
  if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
  clear_has_targetcard();
}
inline const ::PBCard& PBCardEvolutionRecieve::targetcard() const {
  return targetcard_ != NULL ? *targetcard_ : *default_instance_->targetcard_;
}
inline ::PBCard* PBCardEvolutionRecieve::mutable_targetcard() {
  set_has_targetcard();
  if (targetcard_ == NULL) targetcard_ = new ::PBCard;
  return targetcard_;
}
inline ::PBCard* PBCardEvolutionRecieve::release_targetcard() {
  clear_has_targetcard();
  ::PBCard* temp = targetcard_;
  targetcard_ = NULL;
  return temp;
}

// optional .PBAllCard cards = 3;
inline bool PBCardEvolutionRecieve::has_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCardEvolutionRecieve::set_has_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCardEvolutionRecieve::clear_has_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCardEvolutionRecieve::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBCardEvolutionRecieve::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBCardEvolutionRecieve::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBCardEvolutionRecieve::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional .PBAllGem gems = 4;
inline bool PBCardEvolutionRecieve::has_gems() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCardEvolutionRecieve::set_has_gems() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCardEvolutionRecieve::clear_has_gems() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCardEvolutionRecieve::clear_gems() {
  if (gems_ != NULL) gems_->::PBAllGem::Clear();
  clear_has_gems();
}
inline const ::PBAllGem& PBCardEvolutionRecieve::gems() const {
  return gems_ != NULL ? *gems_ : *default_instance_->gems_;
}
inline ::PBAllGem* PBCardEvolutionRecieve::mutable_gems() {
  set_has_gems();
  if (gems_ == NULL) gems_ = new ::PBAllGem;
  return gems_;
}
inline ::PBAllGem* PBCardEvolutionRecieve::release_gems() {
  clear_has_gems();
  ::PBAllGem* temp = gems_;
  gems_ = NULL;
  return temp;
}

// optional int32 allGoldNumber = 5;
inline bool PBCardEvolutionRecieve::has_allgoldnumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCardEvolutionRecieve::set_has_allgoldnumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCardEvolutionRecieve::clear_has_allgoldnumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCardEvolutionRecieve::clear_allgoldnumber() {
  allgoldnumber_ = 0;
  clear_has_allgoldnumber();
}
inline ::google::protobuf::int32 PBCardEvolutionRecieve::allgoldnumber() const {
  return allgoldnumber_;
}
inline void PBCardEvolutionRecieve::set_allgoldnumber(::google::protobuf::int32 value) {
  set_has_allgoldnumber();
  allgoldnumber_ = value;
}

// optional int32 fightCapacity = 6;
inline bool PBCardEvolutionRecieve::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBCardEvolutionRecieve::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBCardEvolutionRecieve::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBCardEvolutionRecieve::clear_fightcapacity() {
  fightcapacity_ = 0;
  clear_has_fightcapacity();
}
inline ::google::protobuf::int32 PBCardEvolutionRecieve::fightcapacity() const {
  return fightcapacity_;
}
inline void PBCardEvolutionRecieve::set_fightcapacity(::google::protobuf::int32 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// -------------------------------------------------------------------

// PBSkillLevelUpSend

// optional int32 upCardItemID = 1;
inline bool PBSkillLevelUpSend::has_upcarditemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSkillLevelUpSend::set_has_upcarditemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSkillLevelUpSend::clear_has_upcarditemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSkillLevelUpSend::clear_upcarditemid() {
  upcarditemid_ = 0;
  clear_has_upcarditemid();
}
inline ::google::protobuf::int32 PBSkillLevelUpSend::upcarditemid() const {
  return upcarditemid_;
}
inline void PBSkillLevelUpSend::set_upcarditemid(::google::protobuf::int32 value) {
  set_has_upcarditemid();
  upcarditemid_ = value;
}

// -------------------------------------------------------------------

// PBSkillLevelUpReceive

// optional int32 skillUpResult = 1;
inline bool PBSkillLevelUpReceive::has_skillupresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSkillLevelUpReceive::set_has_skillupresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSkillLevelUpReceive::clear_has_skillupresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSkillLevelUpReceive::clear_skillupresult() {
  skillupresult_ = 0;
  clear_has_skillupresult();
}
inline ::google::protobuf::int32 PBSkillLevelUpReceive::skillupresult() const {
  return skillupresult_;
}
inline void PBSkillLevelUpReceive::set_skillupresult(::google::protobuf::int32 value) {
  set_has_skillupresult();
  skillupresult_ = value;
}

// optional .PBCard targetCard = 2;
inline bool PBSkillLevelUpReceive::has_targetcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSkillLevelUpReceive::set_has_targetcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSkillLevelUpReceive::clear_has_targetcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSkillLevelUpReceive::clear_targetcard() {
  if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
  clear_has_targetcard();
}
inline const ::PBCard& PBSkillLevelUpReceive::targetcard() const {
  return targetcard_ != NULL ? *targetcard_ : *default_instance_->targetcard_;
}
inline ::PBCard* PBSkillLevelUpReceive::mutable_targetcard() {
  set_has_targetcard();
  if (targetcard_ == NULL) targetcard_ = new ::PBCard;
  return targetcard_;
}
inline ::PBCard* PBSkillLevelUpReceive::release_targetcard() {
  clear_has_targetcard();
  ::PBCard* temp = targetcard_;
  targetcard_ = NULL;
  return temp;
}

// optional .PBAllCard cards = 3;
inline bool PBSkillLevelUpReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSkillLevelUpReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSkillLevelUpReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSkillLevelUpReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBSkillLevelUpReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBSkillLevelUpReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBSkillLevelUpReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional int32 fightCapacity = 4;
inline bool PBSkillLevelUpReceive::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBSkillLevelUpReceive::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBSkillLevelUpReceive::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBSkillLevelUpReceive::clear_fightcapacity() {
  fightcapacity_ = 0;
  clear_has_fightcapacity();
}
inline ::google::protobuf::int32 PBSkillLevelUpReceive::fightcapacity() const {
  return fightcapacity_;
}
inline void PBSkillLevelUpReceive::set_fightcapacity(::google::protobuf::int32 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// -------------------------------------------------------------------

// PBCardFormSend

// optional int32 captainCardID = 1;
inline bool PBCardFormSend::has_captaincardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardFormSend::set_has_captaincardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardFormSend::clear_has_captaincardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardFormSend::clear_captaincardid() {
  captaincardid_ = 0;
  clear_has_captaincardid();
}
inline ::google::protobuf::int32 PBCardFormSend::captaincardid() const {
  return captaincardid_;
}
inline void PBCardFormSend::set_captaincardid(::google::protobuf::int32 value) {
  set_has_captaincardid();
  captaincardid_ = value;
}

// optional int32 cardOneID = 2;
inline bool PBCardFormSend::has_cardoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardFormSend::set_has_cardoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardFormSend::clear_has_cardoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardFormSend::clear_cardoneid() {
  cardoneid_ = 0;
  clear_has_cardoneid();
}
inline ::google::protobuf::int32 PBCardFormSend::cardoneid() const {
  return cardoneid_;
}
inline void PBCardFormSend::set_cardoneid(::google::protobuf::int32 value) {
  set_has_cardoneid();
  cardoneid_ = value;
}

// optional int32 cardTwoID = 3;
inline bool PBCardFormSend::has_cardtwoid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCardFormSend::set_has_cardtwoid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCardFormSend::clear_has_cardtwoid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCardFormSend::clear_cardtwoid() {
  cardtwoid_ = 0;
  clear_has_cardtwoid();
}
inline ::google::protobuf::int32 PBCardFormSend::cardtwoid() const {
  return cardtwoid_;
}
inline void PBCardFormSend::set_cardtwoid(::google::protobuf::int32 value) {
  set_has_cardtwoid();
  cardtwoid_ = value;
}

// optional int32 cardThreeID = 4;
inline bool PBCardFormSend::has_cardthreeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCardFormSend::set_has_cardthreeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCardFormSend::clear_has_cardthreeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCardFormSend::clear_cardthreeid() {
  cardthreeid_ = 0;
  clear_has_cardthreeid();
}
inline ::google::protobuf::int32 PBCardFormSend::cardthreeid() const {
  return cardthreeid_;
}
inline void PBCardFormSend::set_cardthreeid(::google::protobuf::int32 value) {
  set_has_cardthreeid();
  cardthreeid_ = value;
}

// optional int32 cardFourID = 5;
inline bool PBCardFormSend::has_cardfourid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCardFormSend::set_has_cardfourid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCardFormSend::clear_has_cardfourid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCardFormSend::clear_cardfourid() {
  cardfourid_ = 0;
  clear_has_cardfourid();
}
inline ::google::protobuf::int32 PBCardFormSend::cardfourid() const {
  return cardfourid_;
}
inline void PBCardFormSend::set_cardfourid(::google::protobuf::int32 value) {
  set_has_cardfourid();
  cardfourid_ = value;
}

// -------------------------------------------------------------------

// PBCardFormReceive

// optional int32 formResult = 1;
inline bool PBCardFormReceive::has_formresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardFormReceive::set_has_formresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardFormReceive::clear_has_formresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardFormReceive::clear_formresult() {
  formresult_ = 0;
  clear_has_formresult();
}
inline ::google::protobuf::int32 PBCardFormReceive::formresult() const {
  return formresult_;
}
inline void PBCardFormReceive::set_formresult(::google::protobuf::int32 value) {
  set_has_formresult();
  formresult_ = value;
}

// optional .PBAllCard cards = 2;
inline bool PBCardFormReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardFormReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardFormReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardFormReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBCardFormReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBCardFormReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBCardFormReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional int32 fightCapacity = 3;
inline bool PBCardFormReceive::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCardFormReceive::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCardFormReceive::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCardFormReceive::clear_fightcapacity() {
  fightcapacity_ = 0;
  clear_has_fightcapacity();
}
inline ::google::protobuf::int32 PBCardFormReceive::fightcapacity() const {
  return fightcapacity_;
}
inline void PBCardFormReceive::set_fightcapacity(::google::protobuf::int32 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// -------------------------------------------------------------------

// PBBattleSend

// optional string battleID = 1;
inline bool PBBattleSend::has_battleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleSend::set_has_battleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleSend::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleSend::clear_battleid() {
  if (battleid_ != &::google::protobuf::internal::kEmptyString) {
    battleid_->clear();
  }
  clear_has_battleid();
}
inline const ::std::string& PBBattleSend::battleid() const {
  return *battleid_;
}
inline void PBBattleSend::set_battleid(const ::std::string& value) {
  set_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    battleid_ = new ::std::string;
  }
  battleid_->assign(value);
}
inline void PBBattleSend::set_battleid(const char* value) {
  set_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    battleid_ = new ::std::string;
  }
  battleid_->assign(value);
}
inline void PBBattleSend::set_battleid(const char* value, size_t size) {
  set_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    battleid_ = new ::std::string;
  }
  battleid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattleSend::mutable_battleid() {
  set_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    battleid_ = new ::std::string;
  }
  return battleid_;
}
inline ::std::string* PBBattleSend::release_battleid() {
  clear_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = battleid_;
    battleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 isWipeOut = 2;
inline bool PBBattleSend::has_iswipeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBattleSend::set_has_iswipeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBattleSend::clear_has_iswipeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBattleSend::clear_iswipeout() {
  iswipeout_ = 0;
  clear_has_iswipeout();
}
inline ::google::protobuf::int32 PBBattleSend::iswipeout() const {
  return iswipeout_;
}
inline void PBBattleSend::set_iswipeout(::google::protobuf::int32 value) {
  set_has_iswipeout();
  iswipeout_ = value;
}

// -------------------------------------------------------------------

// PBBattleAward

// optional string awardID = 1;
inline bool PBBattleAward::has_awardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleAward::set_has_awardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleAward::clear_has_awardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleAward::clear_awardid() {
  if (awardid_ != &::google::protobuf::internal::kEmptyString) {
    awardid_->clear();
  }
  clear_has_awardid();
}
inline const ::std::string& PBBattleAward::awardid() const {
  return *awardid_;
}
inline void PBBattleAward::set_awardid(const ::std::string& value) {
  set_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    awardid_ = new ::std::string;
  }
  awardid_->assign(value);
}
inline void PBBattleAward::set_awardid(const char* value) {
  set_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    awardid_ = new ::std::string;
  }
  awardid_->assign(value);
}
inline void PBBattleAward::set_awardid(const char* value, size_t size) {
  set_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    awardid_ = new ::std::string;
  }
  awardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattleAward::mutable_awardid() {
  set_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    awardid_ = new ::std::string;
  }
  return awardid_;
}
inline ::std::string* PBBattleAward::release_awardid() {
  clear_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awardid_;
    awardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 awardType = 2;
inline bool PBBattleAward::has_awardtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBattleAward::set_has_awardtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBattleAward::clear_has_awardtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBattleAward::clear_awardtype() {
  awardtype_ = 0;
  clear_has_awardtype();
}
inline ::google::protobuf::int32 PBBattleAward::awardtype() const {
  return awardtype_;
}
inline void PBBattleAward::set_awardtype(::google::protobuf::int32 value) {
  set_has_awardtype();
  awardtype_ = value;
}

// optional int32 awardNumber = 3;
inline bool PBBattleAward::has_awardnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBBattleAward::set_has_awardnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBBattleAward::clear_has_awardnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBBattleAward::clear_awardnumber() {
  awardnumber_ = 0;
  clear_has_awardnumber();
}
inline ::google::protobuf::int32 PBBattleAward::awardnumber() const {
  return awardnumber_;
}
inline void PBBattleAward::set_awardnumber(::google::protobuf::int32 value) {
  set_has_awardnumber();
  awardnumber_ = value;
}

// -------------------------------------------------------------------

// PBBattleReceive

// repeated .PBBattleAward allBattleAwards = 1;
inline int PBBattleReceive::allbattleawards_size() const {
  return allbattleawards_.size();
}
inline void PBBattleReceive::clear_allbattleawards() {
  allbattleawards_.Clear();
}
inline const ::PBBattleAward& PBBattleReceive::allbattleawards(int index) const {
  return allbattleawards_.Get(index);
}
inline ::PBBattleAward* PBBattleReceive::mutable_allbattleawards(int index) {
  return allbattleawards_.Mutable(index);
}
inline ::PBBattleAward* PBBattleReceive::add_allbattleawards() {
  return allbattleawards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBBattleAward >&
PBBattleReceive::allbattleawards() const {
  return allbattleawards_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBBattleAward >*
PBBattleReceive::mutable_allbattleawards() {
  return &allbattleawards_;
}

// optional .PBUser user = 2;
inline bool PBBattleReceive::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBattleReceive::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBattleReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBattleReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBBattleReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBBattleReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBBattleReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBSkillExpAdd

// optional int32 cardItemId = 1;
inline bool PBSkillExpAdd::has_carditemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSkillExpAdd::set_has_carditemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSkillExpAdd::clear_has_carditemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSkillExpAdd::clear_carditemid() {
  carditemid_ = 0;
  clear_has_carditemid();
}
inline ::google::protobuf::int32 PBSkillExpAdd::carditemid() const {
  return carditemid_;
}
inline void PBSkillExpAdd::set_carditemid(::google::protobuf::int32 value) {
  set_has_carditemid();
  carditemid_ = value;
}

// optional int32 skillExp = 2;
inline bool PBSkillExpAdd::has_skillexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSkillExpAdd::set_has_skillexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSkillExpAdd::clear_has_skillexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSkillExpAdd::clear_skillexp() {
  skillexp_ = 0;
  clear_has_skillexp();
}
inline ::google::protobuf::int32 PBSkillExpAdd::skillexp() const {
  return skillexp_;
}
inline void PBSkillExpAdd::set_skillexp(::google::protobuf::int32 value) {
  set_has_skillexp();
  skillexp_ = value;
}

// -------------------------------------------------------------------

// PBCardDBInfo

// optional string cardID = 1;
inline bool PBCardDBInfo::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardDBInfo::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardDBInfo::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardDBInfo::clear_cardid() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    cardid_->clear();
  }
  clear_has_cardid();
}
inline const ::std::string& PBCardDBInfo::cardid() const {
  return *cardid_;
}
inline void PBCardDBInfo::set_cardid(const ::std::string& value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void PBCardDBInfo::set_cardid(const char* value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void PBCardDBInfo::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCardDBInfo::mutable_cardid() {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  return cardid_;
}
inline ::std::string* PBCardDBInfo::release_cardid() {
  clear_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardid_;
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cardSkillA = 2;
inline bool PBCardDBInfo::has_cardskilla() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardDBInfo::set_has_cardskilla() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardDBInfo::clear_has_cardskilla() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardDBInfo::clear_cardskilla() {
  if (cardskilla_ != &::google::protobuf::internal::kEmptyString) {
    cardskilla_->clear();
  }
  clear_has_cardskilla();
}
inline const ::std::string& PBCardDBInfo::cardskilla() const {
  return *cardskilla_;
}
inline void PBCardDBInfo::set_cardskilla(const ::std::string& value) {
  set_has_cardskilla();
  if (cardskilla_ == &::google::protobuf::internal::kEmptyString) {
    cardskilla_ = new ::std::string;
  }
  cardskilla_->assign(value);
}
inline void PBCardDBInfo::set_cardskilla(const char* value) {
  set_has_cardskilla();
  if (cardskilla_ == &::google::protobuf::internal::kEmptyString) {
    cardskilla_ = new ::std::string;
  }
  cardskilla_->assign(value);
}
inline void PBCardDBInfo::set_cardskilla(const char* value, size_t size) {
  set_has_cardskilla();
  if (cardskilla_ == &::google::protobuf::internal::kEmptyString) {
    cardskilla_ = new ::std::string;
  }
  cardskilla_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCardDBInfo::mutable_cardskilla() {
  set_has_cardskilla();
  if (cardskilla_ == &::google::protobuf::internal::kEmptyString) {
    cardskilla_ = new ::std::string;
  }
  return cardskilla_;
}
inline ::std::string* PBCardDBInfo::release_cardskilla() {
  clear_has_cardskilla();
  if (cardskilla_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardskilla_;
    cardskilla_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cardSkillP = 3;
inline bool PBCardDBInfo::has_cardskillp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCardDBInfo::set_has_cardskillp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCardDBInfo::clear_has_cardskillp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCardDBInfo::clear_cardskillp() {
  if (cardskillp_ != &::google::protobuf::internal::kEmptyString) {
    cardskillp_->clear();
  }
  clear_has_cardskillp();
}
inline const ::std::string& PBCardDBInfo::cardskillp() const {
  return *cardskillp_;
}
inline void PBCardDBInfo::set_cardskillp(const ::std::string& value) {
  set_has_cardskillp();
  if (cardskillp_ == &::google::protobuf::internal::kEmptyString) {
    cardskillp_ = new ::std::string;
  }
  cardskillp_->assign(value);
}
inline void PBCardDBInfo::set_cardskillp(const char* value) {
  set_has_cardskillp();
  if (cardskillp_ == &::google::protobuf::internal::kEmptyString) {
    cardskillp_ = new ::std::string;
  }
  cardskillp_->assign(value);
}
inline void PBCardDBInfo::set_cardskillp(const char* value, size_t size) {
  set_has_cardskillp();
  if (cardskillp_ == &::google::protobuf::internal::kEmptyString) {
    cardskillp_ = new ::std::string;
  }
  cardskillp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCardDBInfo::mutable_cardskillp() {
  set_has_cardskillp();
  if (cardskillp_ == &::google::protobuf::internal::kEmptyString) {
    cardskillp_ = new ::std::string;
  }
  return cardskillp_;
}
inline ::std::string* PBCardDBInfo::release_cardskillp() {
  clear_has_cardskillp();
  if (cardskillp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardskillp_;
    cardskillp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 VTLStar = 4;
inline bool PBCardDBInfo::has_vtlstar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCardDBInfo::set_has_vtlstar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCardDBInfo::clear_has_vtlstar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCardDBInfo::clear_vtlstar() {
  vtlstar_ = 0;
  clear_has_vtlstar();
}
inline ::google::protobuf::int32 PBCardDBInfo::vtlstar() const {
  return vtlstar_;
}
inline void PBCardDBInfo::set_vtlstar(::google::protobuf::int32 value) {
  set_has_vtlstar();
  vtlstar_ = value;
}

// optional int32 STRStar = 5;
inline bool PBCardDBInfo::has_strstar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCardDBInfo::set_has_strstar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCardDBInfo::clear_has_strstar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCardDBInfo::clear_strstar() {
  strstar_ = 0;
  clear_has_strstar();
}
inline ::google::protobuf::int32 PBCardDBInfo::strstar() const {
  return strstar_;
}
inline void PBCardDBInfo::set_strstar(::google::protobuf::int32 value) {
  set_has_strstar();
  strstar_ = value;
}

// optional int32 TGHStar = 6;
inline bool PBCardDBInfo::has_tghstar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBCardDBInfo::set_has_tghstar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBCardDBInfo::clear_has_tghstar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBCardDBInfo::clear_tghstar() {
  tghstar_ = 0;
  clear_has_tghstar();
}
inline ::google::protobuf::int32 PBCardDBInfo::tghstar() const {
  return tghstar_;
}
inline void PBCardDBInfo::set_tghstar(::google::protobuf::int32 value) {
  set_has_tghstar();
  tghstar_ = value;
}

// optional int32 QUIStar = 7;
inline bool PBCardDBInfo::has_quistar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBCardDBInfo::set_has_quistar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBCardDBInfo::clear_has_quistar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBCardDBInfo::clear_quistar() {
  quistar_ = 0;
  clear_has_quistar();
}
inline ::google::protobuf::int32 PBCardDBInfo::quistar() const {
  return quistar_;
}
inline void PBCardDBInfo::set_quistar(::google::protobuf::int32 value) {
  set_has_quistar();
  quistar_ = value;
}

// optional int32 MGCStar = 8;
inline bool PBCardDBInfo::has_mgcstar() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBCardDBInfo::set_has_mgcstar() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBCardDBInfo::clear_has_mgcstar() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBCardDBInfo::clear_mgcstar() {
  mgcstar_ = 0;
  clear_has_mgcstar();
}
inline ::google::protobuf::int32 PBCardDBInfo::mgcstar() const {
  return mgcstar_;
}
inline void PBCardDBInfo::set_mgcstar(::google::protobuf::int32 value) {
  set_has_mgcstar();
  mgcstar_ = value;
}

// -------------------------------------------------------------------

// PBBattleResultSend

// optional int32 battleResult = 1;
inline bool PBBattleResultSend::has_battleresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleResultSend::set_has_battleresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleResultSend::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleResultSend::clear_battleresult() {
  battleresult_ = 0;
  clear_has_battleresult();
}
inline ::google::protobuf::int32 PBBattleResultSend::battleresult() const {
  return battleresult_;
}
inline void PBBattleResultSend::set_battleresult(::google::protobuf::int32 value) {
  set_has_battleresult();
  battleresult_ = value;
}

// repeated .PBSkillExpAdd skillExpAdd = 2;
inline int PBBattleResultSend::skillexpadd_size() const {
  return skillexpadd_.size();
}
inline void PBBattleResultSend::clear_skillexpadd() {
  skillexpadd_.Clear();
}
inline const ::PBSkillExpAdd& PBBattleResultSend::skillexpadd(int index) const {
  return skillexpadd_.Get(index);
}
inline ::PBSkillExpAdd* PBBattleResultSend::mutable_skillexpadd(int index) {
  return skillexpadd_.Mutable(index);
}
inline ::PBSkillExpAdd* PBBattleResultSend::add_skillexpadd() {
  return skillexpadd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd >&
PBBattleResultSend::skillexpadd() const {
  return skillexpadd_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd >*
PBBattleResultSend::mutable_skillexpadd() {
  return &skillexpadd_;
}

// optional bool isfriend = 3;
inline bool PBBattleResultSend::has_isfriend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBBattleResultSend::set_has_isfriend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBBattleResultSend::clear_has_isfriend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBBattleResultSend::clear_isfriend() {
  isfriend_ = false;
  clear_has_isfriend();
}
inline bool PBBattleResultSend::isfriend() const {
  return isfriend_;
}
inline void PBBattleResultSend::set_isfriend(bool value) {
  set_has_isfriend();
  isfriend_ = value;
}

// optional string battleProgress = 4;
inline bool PBBattleResultSend::has_battleprogress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBBattleResultSend::set_has_battleprogress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBBattleResultSend::clear_has_battleprogress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBBattleResultSend::clear_battleprogress() {
  if (battleprogress_ != &::google::protobuf::internal::kEmptyString) {
    battleprogress_->clear();
  }
  clear_has_battleprogress();
}
inline const ::std::string& PBBattleResultSend::battleprogress() const {
  return *battleprogress_;
}
inline void PBBattleResultSend::set_battleprogress(const ::std::string& value) {
  set_has_battleprogress();
  if (battleprogress_ == &::google::protobuf::internal::kEmptyString) {
    battleprogress_ = new ::std::string;
  }
  battleprogress_->assign(value);
}
inline void PBBattleResultSend::set_battleprogress(const char* value) {
  set_has_battleprogress();
  if (battleprogress_ == &::google::protobuf::internal::kEmptyString) {
    battleprogress_ = new ::std::string;
  }
  battleprogress_->assign(value);
}
inline void PBBattleResultSend::set_battleprogress(const char* value, size_t size) {
  set_has_battleprogress();
  if (battleprogress_ == &::google::protobuf::internal::kEmptyString) {
    battleprogress_ = new ::std::string;
  }
  battleprogress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattleResultSend::mutable_battleprogress() {
  set_has_battleprogress();
  if (battleprogress_ == &::google::protobuf::internal::kEmptyString) {
    battleprogress_ = new ::std::string;
  }
  return battleprogress_;
}
inline ::std::string* PBBattleResultSend::release_battleprogress() {
  clear_has_battleprogress();
  if (battleprogress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = battleprogress_;
    battleprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 friendId = 5;
inline bool PBBattleResultSend::has_friendid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBBattleResultSend::set_has_friendid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBBattleResultSend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBBattleResultSend::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 PBBattleResultSend::friendid() const {
  return friendid_;
}
inline void PBBattleResultSend::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
}

// repeated .PBCardDBInfo cardInfo = 6;
inline int PBBattleResultSend::cardinfo_size() const {
  return cardinfo_.size();
}
inline void PBBattleResultSend::clear_cardinfo() {
  cardinfo_.Clear();
}
inline const ::PBCardDBInfo& PBBattleResultSend::cardinfo(int index) const {
  return cardinfo_.Get(index);
}
inline ::PBCardDBInfo* PBBattleResultSend::mutable_cardinfo(int index) {
  return cardinfo_.Mutable(index);
}
inline ::PBCardDBInfo* PBBattleResultSend::add_cardinfo() {
  return cardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCardDBInfo >&
PBBattleResultSend::cardinfo() const {
  return cardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCardDBInfo >*
PBBattleResultSend::mutable_cardinfo() {
  return &cardinfo_;
}

// -------------------------------------------------------------------

// PBBattleResultReceive

// optional .PBAllCard cards = 1;
inline bool PBBattleResultReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleResultReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleResultReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleResultReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBBattleResultReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBBattleResultReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBBattleResultReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional .PBUser user = 2;
inline bool PBBattleResultReceive::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBattleResultReceive::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBattleResultReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBattleResultReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBBattleResultReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBBattleResultReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBBattleResultReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// optional .PBAllGem gems = 3;
inline bool PBBattleResultReceive::has_gems() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBBattleResultReceive::set_has_gems() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBBattleResultReceive::clear_has_gems() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBBattleResultReceive::clear_gems() {
  if (gems_ != NULL) gems_->::PBAllGem::Clear();
  clear_has_gems();
}
inline const ::PBAllGem& PBBattleResultReceive::gems() const {
  return gems_ != NULL ? *gems_ : *default_instance_->gems_;
}
inline ::PBAllGem* PBBattleResultReceive::mutable_gems() {
  set_has_gems();
  if (gems_ == NULL) gems_ = new ::PBAllGem;
  return gems_;
}
inline ::PBAllGem* PBBattleResultReceive::release_gems() {
  clear_has_gems();
  ::PBAllGem* temp = gems_;
  gems_ = NULL;
  return temp;
}

// optional .PBBattle battle = 4;
inline bool PBBattleResultReceive::has_battle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBBattleResultReceive::set_has_battle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBBattleResultReceive::clear_has_battle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBBattleResultReceive::clear_battle() {
  if (battle_ != NULL) battle_->::PBBattle::Clear();
  clear_has_battle();
}
inline const ::PBBattle& PBBattleResultReceive::battle() const {
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::PBBattle* PBBattleResultReceive::mutable_battle() {
  set_has_battle();
  if (battle_ == NULL) battle_ = new ::PBBattle;
  return battle_;
}
inline ::PBBattle* PBBattleResultReceive::release_battle() {
  clear_has_battle();
  ::PBBattle* temp = battle_;
  battle_ = NULL;
  return temp;
}

// optional bool hasFinishedTask = 5;
inline bool PBBattleResultReceive::has_hasfinishedtask() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBBattleResultReceive::set_has_hasfinishedtask() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBBattleResultReceive::clear_has_hasfinishedtask() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBBattleResultReceive::clear_hasfinishedtask() {
  hasfinishedtask_ = false;
  clear_has_hasfinishedtask();
}
inline bool PBBattleResultReceive::hasfinishedtask() const {
  return hasfinishedtask_;
}
inline void PBBattleResultReceive::set_hasfinishedtask(bool value) {
  set_has_hasfinishedtask();
  hasfinishedtask_ = value;
}

// optional int32 DBInfoResult = 6;
inline bool PBBattleResultReceive::has_dbinforesult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBBattleResultReceive::set_has_dbinforesult() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBBattleResultReceive::clear_has_dbinforesult() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBBattleResultReceive::clear_dbinforesult() {
  dbinforesult_ = 0;
  clear_has_dbinforesult();
}
inline ::google::protobuf::int32 PBBattleResultReceive::dbinforesult() const {
  return dbinforesult_;
}
inline void PBBattleResultReceive::set_dbinforesult(::google::protobuf::int32 value) {
  set_has_dbinforesult();
  dbinforesult_ = value;
}

// -------------------------------------------------------------------

// PBSoldCardSend

// repeated int32 cardItemId = 1;
inline int PBSoldCardSend::carditemid_size() const {
  return carditemid_.size();
}
inline void PBSoldCardSend::clear_carditemid() {
  carditemid_.Clear();
}
inline ::google::protobuf::int32 PBSoldCardSend::carditemid(int index) const {
  return carditemid_.Get(index);
}
inline void PBSoldCardSend::set_carditemid(int index, ::google::protobuf::int32 value) {
  carditemid_.Set(index, value);
}
inline void PBSoldCardSend::add_carditemid(::google::protobuf::int32 value) {
  carditemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBSoldCardSend::carditemid() const {
  return carditemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBSoldCardSend::mutable_carditemid() {
  return &carditemid_;
}

// -------------------------------------------------------------------

// PBSoldCardReceive

// optional int32 soldResult = 1;
inline bool PBSoldCardReceive::has_soldresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSoldCardReceive::set_has_soldresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSoldCardReceive::clear_has_soldresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSoldCardReceive::clear_soldresult() {
  soldresult_ = 0;
  clear_has_soldresult();
}
inline ::google::protobuf::int32 PBSoldCardReceive::soldresult() const {
  return soldresult_;
}
inline void PBSoldCardReceive::set_soldresult(::google::protobuf::int32 value) {
  set_has_soldresult();
  soldresult_ = value;
}

// optional .PBAllCard cards = 2;
inline bool PBSoldCardReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSoldCardReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSoldCardReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSoldCardReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBSoldCardReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBSoldCardReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBSoldCardReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional int32 goldNumber = 3;
inline bool PBSoldCardReceive::has_goldnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSoldCardReceive::set_has_goldnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSoldCardReceive::clear_has_goldnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSoldCardReceive::clear_goldnumber() {
  goldnumber_ = 0;
  clear_has_goldnumber();
}
inline ::google::protobuf::int32 PBSoldCardReceive::goldnumber() const {
  return goldnumber_;
}
inline void PBSoldCardReceive::set_goldnumber(::google::protobuf::int32 value) {
  set_has_goldnumber();
  goldnumber_ = value;
}

// -------------------------------------------------------------------

// PBGetFriendValueReceive

// optional .PBAllFriend friends = 1;
inline bool PBGetFriendValueReceive::has_friends() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGetFriendValueReceive::set_has_friends() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGetFriendValueReceive::clear_has_friends() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGetFriendValueReceive::clear_friends() {
  if (friends_ != NULL) friends_->::PBAllFriend::Clear();
  clear_has_friends();
}
inline const ::PBAllFriend& PBGetFriendValueReceive::friends() const {
  return friends_ != NULL ? *friends_ : *default_instance_->friends_;
}
inline ::PBAllFriend* PBGetFriendValueReceive::mutable_friends() {
  set_has_friends();
  if (friends_ == NULL) friends_ = new ::PBAllFriend;
  return friends_;
}
inline ::PBAllFriend* PBGetFriendValueReceive::release_friends() {
  clear_has_friends();
  ::PBAllFriend* temp = friends_;
  friends_ = NULL;
  return temp;
}

// optional int32 friendValue = 2;
inline bool PBGetFriendValueReceive::has_friendvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGetFriendValueReceive::set_has_friendvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGetFriendValueReceive::clear_has_friendvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGetFriendValueReceive::clear_friendvalue() {
  friendvalue_ = 0;
  clear_has_friendvalue();
}
inline ::google::protobuf::int32 PBGetFriendValueReceive::friendvalue() const {
  return friendvalue_;
}
inline void PBGetFriendValueReceive::set_friendvalue(::google::protobuf::int32 value) {
  set_has_friendvalue();
  friendvalue_ = value;
}

// -------------------------------------------------------------------

// PBShopBuySend

// optional int32 buyType = 1;
inline bool PBShopBuySend::has_buytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBShopBuySend::set_has_buytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBShopBuySend::clear_has_buytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBShopBuySend::clear_buytype() {
  buytype_ = 0;
  clear_has_buytype();
}
inline ::google::protobuf::int32 PBShopBuySend::buytype() const {
  return buytype_;
}
inline void PBShopBuySend::set_buytype(::google::protobuf::int32 value) {
  set_has_buytype();
  buytype_ = value;
}

// -------------------------------------------------------------------

// PBShopBuySendReceive

// optional .PBUser user = 1;
inline bool PBShopBuySendReceive::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBShopBuySendReceive::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBShopBuySendReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBShopBuySendReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBShopBuySendReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBShopBuySendReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBShopBuySendReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBSearchFriendSend

// optional string searchKey = 1;
inline bool PBSearchFriendSend::has_searchkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSearchFriendSend::set_has_searchkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSearchFriendSend::clear_has_searchkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSearchFriendSend::clear_searchkey() {
  if (searchkey_ != &::google::protobuf::internal::kEmptyString) {
    searchkey_->clear();
  }
  clear_has_searchkey();
}
inline const ::std::string& PBSearchFriendSend::searchkey() const {
  return *searchkey_;
}
inline void PBSearchFriendSend::set_searchkey(const ::std::string& value) {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::kEmptyString) {
    searchkey_ = new ::std::string;
  }
  searchkey_->assign(value);
}
inline void PBSearchFriendSend::set_searchkey(const char* value) {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::kEmptyString) {
    searchkey_ = new ::std::string;
  }
  searchkey_->assign(value);
}
inline void PBSearchFriendSend::set_searchkey(const char* value, size_t size) {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::kEmptyString) {
    searchkey_ = new ::std::string;
  }
  searchkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSearchFriendSend::mutable_searchkey() {
  set_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::kEmptyString) {
    searchkey_ = new ::std::string;
  }
  return searchkey_;
}
inline ::std::string* PBSearchFriendSend::release_searchkey() {
  clear_has_searchkey();
  if (searchkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = searchkey_;
    searchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBSearchFriendReceive

// repeated .PBFriend friends = 1;
inline int PBSearchFriendReceive::friends_size() const {
  return friends_.size();
}
inline void PBSearchFriendReceive::clear_friends() {
  friends_.Clear();
}
inline const ::PBFriend& PBSearchFriendReceive::friends(int index) const {
  return friends_.Get(index);
}
inline ::PBFriend* PBSearchFriendReceive::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::PBFriend* PBSearchFriendReceive::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
PBSearchFriendReceive::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
PBSearchFriendReceive::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// PBDownloadSend

// optional string resourceVersion = 1;
inline bool PBDownloadSend::has_resourceversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDownloadSend::set_has_resourceversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDownloadSend::clear_has_resourceversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDownloadSend::clear_resourceversion() {
  if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
    resourceversion_->clear();
  }
  clear_has_resourceversion();
}
inline const ::std::string& PBDownloadSend::resourceversion() const {
  return *resourceversion_;
}
inline void PBDownloadSend::set_resourceversion(const ::std::string& value) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(value);
}
inline void PBDownloadSend::set_resourceversion(const char* value) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(value);
}
inline void PBDownloadSend::set_resourceversion(const char* value, size_t size) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBDownloadSend::mutable_resourceversion() {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  return resourceversion_;
}
inline ::std::string* PBDownloadSend::release_resourceversion() {
  clear_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resourceversion_;
    resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pointMark = 2;
inline bool PBDownloadSend::has_pointmark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBDownloadSend::set_has_pointmark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBDownloadSend::clear_has_pointmark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBDownloadSend::clear_pointmark() {
  pointmark_ = 0;
  clear_has_pointmark();
}
inline ::google::protobuf::int32 PBDownloadSend::pointmark() const {
  return pointmark_;
}
inline void PBDownloadSend::set_pointmark(::google::protobuf::int32 value) {
  set_has_pointmark();
  pointmark_ = value;
}

// -------------------------------------------------------------------

// PBInvitationCodeSend

// optional string invitationCode = 1;
inline bool PBInvitationCodeSend::has_invitationcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBInvitationCodeSend::set_has_invitationcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBInvitationCodeSend::clear_has_invitationcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBInvitationCodeSend::clear_invitationcode() {
  if (invitationcode_ != &::google::protobuf::internal::kEmptyString) {
    invitationcode_->clear();
  }
  clear_has_invitationcode();
}
inline const ::std::string& PBInvitationCodeSend::invitationcode() const {
  return *invitationcode_;
}
inline void PBInvitationCodeSend::set_invitationcode(const ::std::string& value) {
  set_has_invitationcode();
  if (invitationcode_ == &::google::protobuf::internal::kEmptyString) {
    invitationcode_ = new ::std::string;
  }
  invitationcode_->assign(value);
}
inline void PBInvitationCodeSend::set_invitationcode(const char* value) {
  set_has_invitationcode();
  if (invitationcode_ == &::google::protobuf::internal::kEmptyString) {
    invitationcode_ = new ::std::string;
  }
  invitationcode_->assign(value);
}
inline void PBInvitationCodeSend::set_invitationcode(const char* value, size_t size) {
  set_has_invitationcode();
  if (invitationcode_ == &::google::protobuf::internal::kEmptyString) {
    invitationcode_ = new ::std::string;
  }
  invitationcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBInvitationCodeSend::mutable_invitationcode() {
  set_has_invitationcode();
  if (invitationcode_ == &::google::protobuf::internal::kEmptyString) {
    invitationcode_ = new ::std::string;
  }
  return invitationcode_;
}
inline ::std::string* PBInvitationCodeSend::release_invitationcode() {
  clear_has_invitationcode();
  if (invitationcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invitationcode_;
    invitationcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBInvitationCodeReceive

// optional int32 result = 1;
inline bool PBInvitationCodeReceive::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBInvitationCodeReceive::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBInvitationCodeReceive::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBInvitationCodeReceive::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PBInvitationCodeReceive::result() const {
  return result_;
}
inline void PBInvitationCodeReceive::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// PBEnergyReceive

// optional int32 energy = 1;
inline bool PBEnergyReceive::has_energy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBEnergyReceive::set_has_energy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBEnergyReceive::clear_has_energy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBEnergyReceive::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 PBEnergyReceive::energy() const {
  return energy_;
}
inline void PBEnergyReceive::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// optional int32 nextEnergyTime = 2;
inline bool PBEnergyReceive::has_nextenergytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBEnergyReceive::set_has_nextenergytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBEnergyReceive::clear_has_nextenergytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBEnergyReceive::clear_nextenergytime() {
  nextenergytime_ = 0;
  clear_has_nextenergytime();
}
inline ::google::protobuf::int32 PBEnergyReceive::nextenergytime() const {
  return nextenergytime_;
}
inline void PBEnergyReceive::set_nextenergytime(::google::protobuf::int32 value) {
  set_has_nextenergytime();
  nextenergytime_ = value;
}

// -------------------------------------------------------------------

// PBIAPSend

// optional string macAddress = 1;
inline bool PBIAPSend::has_macaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBIAPSend::set_has_macaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBIAPSend::clear_has_macaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBIAPSend::clear_macaddress() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    macaddress_->clear();
  }
  clear_has_macaddress();
}
inline const ::std::string& PBIAPSend::macaddress() const {
  return *macaddress_;
}
inline void PBIAPSend::set_macaddress(const ::std::string& value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBIAPSend::set_macaddress(const char* value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBIAPSend::set_macaddress(const char* value, size_t size) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBIAPSend::mutable_macaddress() {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  return macaddress_;
}
inline ::std::string* PBIAPSend::release_macaddress() {
  clear_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = macaddress_;
    macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string serverUrl = 2;
inline bool PBIAPSend::has_serverurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBIAPSend::set_has_serverurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBIAPSend::clear_has_serverurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBIAPSend::clear_serverurl() {
  if (serverurl_ != &::google::protobuf::internal::kEmptyString) {
    serverurl_->clear();
  }
  clear_has_serverurl();
}
inline const ::std::string& PBIAPSend::serverurl() const {
  return *serverurl_;
}
inline void PBIAPSend::set_serverurl(const ::std::string& value) {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  serverurl_->assign(value);
}
inline void PBIAPSend::set_serverurl(const char* value) {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  serverurl_->assign(value);
}
inline void PBIAPSend::set_serverurl(const char* value, size_t size) {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  serverurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBIAPSend::mutable_serverurl() {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  return serverurl_;
}
inline ::std::string* PBIAPSend::release_serverurl() {
  clear_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverurl_;
    serverurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string orderId = 3;
inline bool PBIAPSend::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBIAPSend::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBIAPSend::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBIAPSend::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& PBIAPSend::orderid() const {
  return *orderid_;
}
inline void PBIAPSend::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void PBIAPSend::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void PBIAPSend::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBIAPSend::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* PBIAPSend::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 userSourceType = 4;
inline bool PBIAPSend::has_usersourcetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBIAPSend::set_has_usersourcetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBIAPSend::clear_has_usersourcetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBIAPSend::clear_usersourcetype() {
  usersourcetype_ = 0;
  clear_has_usersourcetype();
}
inline ::google::protobuf::int32 PBIAPSend::usersourcetype() const {
  return usersourcetype_;
}
inline void PBIAPSend::set_usersourcetype(::google::protobuf::int32 value) {
  set_has_usersourcetype();
  usersourcetype_ = value;
}

// optional string authorizationData = 5;
inline bool PBIAPSend::has_authorizationdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBIAPSend::set_has_authorizationdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBIAPSend::clear_has_authorizationdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBIAPSend::clear_authorizationdata() {
  if (authorizationdata_ != &::google::protobuf::internal::kEmptyString) {
    authorizationdata_->clear();
  }
  clear_has_authorizationdata();
}
inline const ::std::string& PBIAPSend::authorizationdata() const {
  return *authorizationdata_;
}
inline void PBIAPSend::set_authorizationdata(const ::std::string& value) {
  set_has_authorizationdata();
  if (authorizationdata_ == &::google::protobuf::internal::kEmptyString) {
    authorizationdata_ = new ::std::string;
  }
  authorizationdata_->assign(value);
}
inline void PBIAPSend::set_authorizationdata(const char* value) {
  set_has_authorizationdata();
  if (authorizationdata_ == &::google::protobuf::internal::kEmptyString) {
    authorizationdata_ = new ::std::string;
  }
  authorizationdata_->assign(value);
}
inline void PBIAPSend::set_authorizationdata(const char* value, size_t size) {
  set_has_authorizationdata();
  if (authorizationdata_ == &::google::protobuf::internal::kEmptyString) {
    authorizationdata_ = new ::std::string;
  }
  authorizationdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBIAPSend::mutable_authorizationdata() {
  set_has_authorizationdata();
  if (authorizationdata_ == &::google::protobuf::internal::kEmptyString) {
    authorizationdata_ = new ::std::string;
  }
  return authorizationdata_;
}
inline ::std::string* PBIAPSend::release_authorizationdata() {
  clear_has_authorizationdata();
  if (authorizationdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authorizationdata_;
    authorizationdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBIAPRecv

// optional int32 result = 1;
inline bool PBIAPRecv::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBIAPRecv::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBIAPRecv::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBIAPRecv::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PBIAPRecv::result() const {
  return result_;
}
inline void PBIAPRecv::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .PBUser user = 2;
inline bool PBIAPRecv::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBIAPRecv::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBIAPRecv::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBIAPRecv::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBIAPRecv::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBIAPRecv::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBIAPRecv::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// optional string orderID = 3;
inline bool PBIAPRecv::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBIAPRecv::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBIAPRecv::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBIAPRecv::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& PBIAPRecv::orderid() const {
  return *orderid_;
}
inline void PBIAPRecv::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void PBIAPRecv::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void PBIAPRecv::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBIAPRecv::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* PBIAPRecv::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBMainServerRegisterSend

// optional string userAccount = 1;
inline bool PBMainServerRegisterSend::has_useraccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMainServerRegisterSend::set_has_useraccount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMainServerRegisterSend::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMainServerRegisterSend::clear_useraccount() {
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    useraccount_->clear();
  }
  clear_has_useraccount();
}
inline const ::std::string& PBMainServerRegisterSend::useraccount() const {
  return *useraccount_;
}
inline void PBMainServerRegisterSend::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBMainServerRegisterSend::set_useraccount(const char* value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBMainServerRegisterSend::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMainServerRegisterSend::mutable_useraccount() {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  return useraccount_;
}
inline ::std::string* PBMainServerRegisterSend::release_useraccount() {
  clear_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = useraccount_;
    useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userPasswd = 2;
inline bool PBMainServerRegisterSend::has_userpasswd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMainServerRegisterSend::set_has_userpasswd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMainServerRegisterSend::clear_has_userpasswd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMainServerRegisterSend::clear_userpasswd() {
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    userpasswd_->clear();
  }
  clear_has_userpasswd();
}
inline const ::std::string& PBMainServerRegisterSend::userpasswd() const {
  return *userpasswd_;
}
inline void PBMainServerRegisterSend::set_userpasswd(const ::std::string& value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBMainServerRegisterSend::set_userpasswd(const char* value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBMainServerRegisterSend::set_userpasswd(const char* value, size_t size) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMainServerRegisterSend::mutable_userpasswd() {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  return userpasswd_;
}
inline ::std::string* PBMainServerRegisterSend::release_userpasswd() {
  clear_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpasswd_;
    userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 userSourceType = 3;
inline bool PBMainServerRegisterSend::has_usersourcetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMainServerRegisterSend::set_has_usersourcetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMainServerRegisterSend::clear_has_usersourcetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMainServerRegisterSend::clear_usersourcetype() {
  usersourcetype_ = 0;
  clear_has_usersourcetype();
}
inline ::google::protobuf::int32 PBMainServerRegisterSend::usersourcetype() const {
  return usersourcetype_;
}
inline void PBMainServerRegisterSend::set_usersourcetype(::google::protobuf::int32 value) {
  set_has_usersourcetype();
  usersourcetype_ = value;
}

// -------------------------------------------------------------------

// PBMainServerRegisterReceive

// optional int32 registerResult = 1;
inline bool PBMainServerRegisterReceive::has_registerresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMainServerRegisterReceive::set_has_registerresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMainServerRegisterReceive::clear_has_registerresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMainServerRegisterReceive::clear_registerresult() {
  registerresult_ = 0;
  clear_has_registerresult();
}
inline ::google::protobuf::int32 PBMainServerRegisterReceive::registerresult() const {
  return registerresult_;
}
inline void PBMainServerRegisterReceive::set_registerresult(::google::protobuf::int32 value) {
  set_has_registerresult();
  registerresult_ = value;
}

// -------------------------------------------------------------------

// PBMainServerLoginSend

// optional string userAccount = 1;
inline bool PBMainServerLoginSend::has_useraccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMainServerLoginSend::set_has_useraccount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMainServerLoginSend::clear_has_useraccount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMainServerLoginSend::clear_useraccount() {
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    useraccount_->clear();
  }
  clear_has_useraccount();
}
inline const ::std::string& PBMainServerLoginSend::useraccount() const {
  return *useraccount_;
}
inline void PBMainServerLoginSend::set_useraccount(const ::std::string& value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBMainServerLoginSend::set_useraccount(const char* value) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(value);
}
inline void PBMainServerLoginSend::set_useraccount(const char* value, size_t size) {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  useraccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMainServerLoginSend::mutable_useraccount() {
  set_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    useraccount_ = new ::std::string;
  }
  return useraccount_;
}
inline ::std::string* PBMainServerLoginSend::release_useraccount() {
  clear_has_useraccount();
  if (useraccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = useraccount_;
    useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userPasswd = 2;
inline bool PBMainServerLoginSend::has_userpasswd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMainServerLoginSend::set_has_userpasswd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMainServerLoginSend::clear_has_userpasswd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMainServerLoginSend::clear_userpasswd() {
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    userpasswd_->clear();
  }
  clear_has_userpasswd();
}
inline const ::std::string& PBMainServerLoginSend::userpasswd() const {
  return *userpasswd_;
}
inline void PBMainServerLoginSend::set_userpasswd(const ::std::string& value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBMainServerLoginSend::set_userpasswd(const char* value) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(value);
}
inline void PBMainServerLoginSend::set_userpasswd(const char* value, size_t size) {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  userpasswd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMainServerLoginSend::mutable_userpasswd() {
  set_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    userpasswd_ = new ::std::string;
  }
  return userpasswd_;
}
inline ::std::string* PBMainServerLoginSend::release_userpasswd() {
  clear_has_userpasswd();
  if (userpasswd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpasswd_;
    userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 userSourceType = 3;
inline bool PBMainServerLoginSend::has_usersourcetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMainServerLoginSend::set_has_usersourcetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMainServerLoginSend::clear_has_usersourcetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMainServerLoginSend::clear_usersourcetype() {
  usersourcetype_ = 0;
  clear_has_usersourcetype();
}
inline ::google::protobuf::int32 PBMainServerLoginSend::usersourcetype() const {
  return usersourcetype_;
}
inline void PBMainServerLoginSend::set_usersourcetype(::google::protobuf::int32 value) {
  set_has_usersourcetype();
  usersourcetype_ = value;
}

// -------------------------------------------------------------------

// PBMainServerLoginReceive

// optional int32 loginResult = 1;
inline bool PBMainServerLoginReceive::has_loginresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMainServerLoginReceive::set_has_loginresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMainServerLoginReceive::clear_has_loginresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMainServerLoginReceive::clear_loginresult() {
  loginresult_ = 0;
  clear_has_loginresult();
}
inline ::google::protobuf::int32 PBMainServerLoginReceive::loginresult() const {
  return loginresult_;
}
inline void PBMainServerLoginReceive::set_loginresult(::google::protobuf::int32 value) {
  set_has_loginresult();
  loginresult_ = value;
}

// -------------------------------------------------------------------

// PBRankSend

// optional int32 rankWays = 1;
inline bool PBRankSend::has_rankways() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRankSend::set_has_rankways() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRankSend::clear_has_rankways() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRankSend::clear_rankways() {
  rankways_ = 0;
  clear_has_rankways();
}
inline ::google::protobuf::int32 PBRankSend::rankways() const {
  return rankways_;
}
inline void PBRankSend::set_rankways(::google::protobuf::int32 value) {
  set_has_rankways();
  rankways_ = value;
}

// optional int32 reqWays = 2;
inline bool PBRankSend::has_reqways() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRankSend::set_has_reqways() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRankSend::clear_has_reqways() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRankSend::clear_reqways() {
  reqways_ = 0;
  clear_has_reqways();
}
inline ::google::protobuf::int32 PBRankSend::reqways() const {
  return reqways_;
}
inline void PBRankSend::set_reqways(::google::protobuf::int32 value) {
  set_has_reqways();
  reqways_ = value;
}

// optional int32 count = 3;
inline bool PBRankSend::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBRankSend::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBRankSend::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBRankSend::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PBRankSend::count() const {
  return count_;
}
inline void PBRankSend::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// PBRankPlayerInfo

// optional string userName = 1;
inline bool PBRankPlayerInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRankPlayerInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRankPlayerInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRankPlayerInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBRankPlayerInfo::username() const {
  return *username_;
}
inline void PBRankPlayerInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBRankPlayerInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBRankPlayerInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRankPlayerInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBRankPlayerInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 userLevel = 2;
inline bool PBRankPlayerInfo::has_userlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRankPlayerInfo::set_has_userlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRankPlayerInfo::clear_has_userlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRankPlayerInfo::clear_userlevel() {
  userlevel_ = 0;
  clear_has_userlevel();
}
inline ::google::protobuf::int32 PBRankPlayerInfo::userlevel() const {
  return userlevel_;
}
inline void PBRankPlayerInfo::set_userlevel(::google::protobuf::int32 value) {
  set_has_userlevel();
  userlevel_ = value;
}

// optional .PBCard userCard = 3;
inline bool PBRankPlayerInfo::has_usercard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBRankPlayerInfo::set_has_usercard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBRankPlayerInfo::clear_has_usercard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBRankPlayerInfo::clear_usercard() {
  if (usercard_ != NULL) usercard_->::PBCard::Clear();
  clear_has_usercard();
}
inline const ::PBCard& PBRankPlayerInfo::usercard() const {
  return usercard_ != NULL ? *usercard_ : *default_instance_->usercard_;
}
inline ::PBCard* PBRankPlayerInfo::mutable_usercard() {
  set_has_usercard();
  if (usercard_ == NULL) usercard_ = new ::PBCard;
  return usercard_;
}
inline ::PBCard* PBRankPlayerInfo::release_usercard() {
  clear_has_usercard();
  ::PBCard* temp = usercard_;
  usercard_ = NULL;
  return temp;
}

// optional int32 fightCapacity = 4;
inline bool PBRankPlayerInfo::has_fightcapacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBRankPlayerInfo::set_has_fightcapacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBRankPlayerInfo::clear_has_fightcapacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBRankPlayerInfo::clear_fightcapacity() {
  fightcapacity_ = 0;
  clear_has_fightcapacity();
}
inline ::google::protobuf::int32 PBRankPlayerInfo::fightcapacity() const {
  return fightcapacity_;
}
inline void PBRankPlayerInfo::set_fightcapacity(::google::protobuf::int32 value) {
  set_has_fightcapacity();
  fightcapacity_ = value;
}

// optional int32 capitorCardFightCapacity = 5;
inline bool PBRankPlayerInfo::has_capitorcardfightcapacity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBRankPlayerInfo::set_has_capitorcardfightcapacity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBRankPlayerInfo::clear_has_capitorcardfightcapacity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBRankPlayerInfo::clear_capitorcardfightcapacity() {
  capitorcardfightcapacity_ = 0;
  clear_has_capitorcardfightcapacity();
}
inline ::google::protobuf::int32 PBRankPlayerInfo::capitorcardfightcapacity() const {
  return capitorcardfightcapacity_;
}
inline void PBRankPlayerInfo::set_capitorcardfightcapacity(::google::protobuf::int32 value) {
  set_has_capitorcardfightcapacity();
  capitorcardfightcapacity_ = value;
}

// optional int32 playerRank = 6;
inline bool PBRankPlayerInfo::has_playerrank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBRankPlayerInfo::set_has_playerrank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBRankPlayerInfo::clear_has_playerrank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBRankPlayerInfo::clear_playerrank() {
  playerrank_ = 0;
  clear_has_playerrank();
}
inline ::google::protobuf::int32 PBRankPlayerInfo::playerrank() const {
  return playerrank_;
}
inline void PBRankPlayerInfo::set_playerrank(::google::protobuf::int32 value) {
  set_has_playerrank();
  playerrank_ = value;
}

// -------------------------------------------------------------------

// PBRankRecv

// repeated .PBRankPlayerInfo randPlayerInfo = 1;
inline int PBRankRecv::randplayerinfo_size() const {
  return randplayerinfo_.size();
}
inline void PBRankRecv::clear_randplayerinfo() {
  randplayerinfo_.Clear();
}
inline const ::PBRankPlayerInfo& PBRankRecv::randplayerinfo(int index) const {
  return randplayerinfo_.Get(index);
}
inline ::PBRankPlayerInfo* PBRankRecv::mutable_randplayerinfo(int index) {
  return randplayerinfo_.Mutable(index);
}
inline ::PBRankPlayerInfo* PBRankRecv::add_randplayerinfo() {
  return randplayerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBRankPlayerInfo >&
PBRankRecv::randplayerinfo() const {
  return randplayerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBRankPlayerInfo >*
PBRankRecv::mutable_randplayerinfo() {
  return &randplayerinfo_;
}

// optional int32 resultStatus = 2;
inline bool PBRankRecv::has_resultstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRankRecv::set_has_resultstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRankRecv::clear_has_resultstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRankRecv::clear_resultstatus() {
  resultstatus_ = 0;
  clear_has_resultstatus();
}
inline ::google::protobuf::int32 PBRankRecv::resultstatus() const {
  return resultstatus_;
}
inline void PBRankRecv::set_resultstatus(::google::protobuf::int32 value) {
  set_has_resultstatus();
  resultstatus_ = value;
}

// -------------------------------------------------------------------

// PBFiveSixStarCard

// optional string userName = 1;
inline bool PBFiveSixStarCard::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBFiveSixStarCard::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBFiveSixStarCard::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBFiveSixStarCard::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBFiveSixStarCard::username() const {
  return *username_;
}
inline void PBFiveSixStarCard::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBFiveSixStarCard::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBFiveSixStarCard::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFiveSixStarCard::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBFiveSixStarCard::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cardId = 2;
inline bool PBFiveSixStarCard::has_cardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBFiveSixStarCard::set_has_cardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBFiveSixStarCard::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBFiveSixStarCard::clear_cardid() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    cardid_->clear();
  }
  clear_has_cardid();
}
inline const ::std::string& PBFiveSixStarCard::cardid() const {
  return *cardid_;
}
inline void PBFiveSixStarCard::set_cardid(const ::std::string& value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void PBFiveSixStarCard::set_cardid(const char* value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void PBFiveSixStarCard::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFiveSixStarCard::mutable_cardid() {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  return cardid_;
}
inline ::std::string* PBFiveSixStarCard::release_cardid() {
  clear_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardid_;
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 cardStar = 3;
inline bool PBFiveSixStarCard::has_cardstar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBFiveSixStarCard::set_has_cardstar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBFiveSixStarCard::clear_has_cardstar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBFiveSixStarCard::clear_cardstar() {
  cardstar_ = 0;
  clear_has_cardstar();
}
inline ::google::protobuf::int32 PBFiveSixStarCard::cardstar() const {
  return cardstar_;
}
inline void PBFiveSixStarCard::set_cardstar(::google::protobuf::int32 value) {
  set_has_cardstar();
  cardstar_ = value;
}

// -------------------------------------------------------------------

// PBEvolutionSuccess

// optional string userName = 1;
inline bool PBEvolutionSuccess::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBEvolutionSuccess::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBEvolutionSuccess::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBEvolutionSuccess::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBEvolutionSuccess::username() const {
  return *username_;
}
inline void PBEvolutionSuccess::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBEvolutionSuccess::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBEvolutionSuccess::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBEvolutionSuccess::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBEvolutionSuccess::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string preCardId = 2;
inline bool PBEvolutionSuccess::has_precardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBEvolutionSuccess::set_has_precardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBEvolutionSuccess::clear_has_precardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBEvolutionSuccess::clear_precardid() {
  if (precardid_ != &::google::protobuf::internal::kEmptyString) {
    precardid_->clear();
  }
  clear_has_precardid();
}
inline const ::std::string& PBEvolutionSuccess::precardid() const {
  return *precardid_;
}
inline void PBEvolutionSuccess::set_precardid(const ::std::string& value) {
  set_has_precardid();
  if (precardid_ == &::google::protobuf::internal::kEmptyString) {
    precardid_ = new ::std::string;
  }
  precardid_->assign(value);
}
inline void PBEvolutionSuccess::set_precardid(const char* value) {
  set_has_precardid();
  if (precardid_ == &::google::protobuf::internal::kEmptyString) {
    precardid_ = new ::std::string;
  }
  precardid_->assign(value);
}
inline void PBEvolutionSuccess::set_precardid(const char* value, size_t size) {
  set_has_precardid();
  if (precardid_ == &::google::protobuf::internal::kEmptyString) {
    precardid_ = new ::std::string;
  }
  precardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBEvolutionSuccess::mutable_precardid() {
  set_has_precardid();
  if (precardid_ == &::google::protobuf::internal::kEmptyString) {
    precardid_ = new ::std::string;
  }
  return precardid_;
}
inline ::std::string* PBEvolutionSuccess::release_precardid() {
  clear_has_precardid();
  if (precardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = precardid_;
    precardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cardId = 3;
inline bool PBEvolutionSuccess::has_cardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBEvolutionSuccess::set_has_cardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBEvolutionSuccess::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBEvolutionSuccess::clear_cardid() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    cardid_->clear();
  }
  clear_has_cardid();
}
inline const ::std::string& PBEvolutionSuccess::cardid() const {
  return *cardid_;
}
inline void PBEvolutionSuccess::set_cardid(const ::std::string& value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void PBEvolutionSuccess::set_cardid(const char* value) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(value);
}
inline void PBEvolutionSuccess::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  cardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBEvolutionSuccess::mutable_cardid() {
  set_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    cardid_ = new ::std::string;
  }
  return cardid_;
}
inline ::std::string* PBEvolutionSuccess::release_cardid() {
  clear_has_cardid();
  if (cardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardid_;
    cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBPassLevelPlayerInfo

// optional string userName = 1;
inline bool PBPassLevelPlayerInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBPassLevelPlayerInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBPassLevelPlayerInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBPassLevelPlayerInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBPassLevelPlayerInfo::username() const {
  return *username_;
}
inline void PBPassLevelPlayerInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBPassLevelPlayerInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBPassLevelPlayerInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBPassLevelPlayerInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBPassLevelPlayerInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 2;
inline bool PBPassLevelPlayerInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBPassLevelPlayerInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBPassLevelPlayerInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBPassLevelPlayerInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 PBPassLevelPlayerInfo::rank() const {
  return rank_;
}
inline void PBPassLevelPlayerInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string levelName = 3;
inline bool PBPassLevelPlayerInfo::has_levelname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBPassLevelPlayerInfo::set_has_levelname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBPassLevelPlayerInfo::clear_has_levelname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBPassLevelPlayerInfo::clear_levelname() {
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    levelname_->clear();
  }
  clear_has_levelname();
}
inline const ::std::string& PBPassLevelPlayerInfo::levelname() const {
  return *levelname_;
}
inline void PBPassLevelPlayerInfo::set_levelname(const ::std::string& value) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(value);
}
inline void PBPassLevelPlayerInfo::set_levelname(const char* value) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(value);
}
inline void PBPassLevelPlayerInfo::set_levelname(const char* value, size_t size) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBPassLevelPlayerInfo::mutable_levelname() {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  return levelname_;
}
inline ::std::string* PBPassLevelPlayerInfo::release_levelname() {
  clear_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = levelname_;
    levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBCapacity

// optional string userName = 1;
inline bool PBCapacity::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCapacity::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCapacity::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCapacity::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBCapacity::username() const {
  return *username_;
}
inline void PBCapacity::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBCapacity::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBCapacity::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBCapacity::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBCapacity::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 capacityType = 2;
inline bool PBCapacity::has_capacitytype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCapacity::set_has_capacitytype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCapacity::clear_has_capacitytype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCapacity::clear_capacitytype() {
  capacitytype_ = 0;
  clear_has_capacitytype();
}
inline ::google::protobuf::int32 PBCapacity::capacitytype() const {
  return capacitytype_;
}
inline void PBCapacity::set_capacitytype(::google::protobuf::int32 value) {
  set_has_capacitytype();
  capacitytype_ = value;
}

// optional int32 capacity = 3;
inline bool PBCapacity::has_capacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCapacity::set_has_capacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCapacity::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCapacity::clear_capacity() {
  capacity_ = 0;
  clear_has_capacity();
}
inline ::google::protobuf::int32 PBCapacity::capacity() const {
  return capacity_;
}
inline void PBCapacity::set_capacity(::google::protobuf::int32 value) {
  set_has_capacity();
  capacity_ = value;
}

// -------------------------------------------------------------------

// PBGameNotice

// repeated .PBFiveSixStarCard fiveSixStarCardNotice = 1;
inline int PBGameNotice::fivesixstarcardnotice_size() const {
  return fivesixstarcardnotice_.size();
}
inline void PBGameNotice::clear_fivesixstarcardnotice() {
  fivesixstarcardnotice_.Clear();
}
inline const ::PBFiveSixStarCard& PBGameNotice::fivesixstarcardnotice(int index) const {
  return fivesixstarcardnotice_.Get(index);
}
inline ::PBFiveSixStarCard* PBGameNotice::mutable_fivesixstarcardnotice(int index) {
  return fivesixstarcardnotice_.Mutable(index);
}
inline ::PBFiveSixStarCard* PBGameNotice::add_fivesixstarcardnotice() {
  return fivesixstarcardnotice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFiveSixStarCard >&
PBGameNotice::fivesixstarcardnotice() const {
  return fivesixstarcardnotice_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFiveSixStarCard >*
PBGameNotice::mutable_fivesixstarcardnotice() {
  return &fivesixstarcardnotice_;
}

// repeated .PBEvolutionSuccess evolutionSuccessNotice = 2;
inline int PBGameNotice::evolutionsuccessnotice_size() const {
  return evolutionsuccessnotice_.size();
}
inline void PBGameNotice::clear_evolutionsuccessnotice() {
  evolutionsuccessnotice_.Clear();
}
inline const ::PBEvolutionSuccess& PBGameNotice::evolutionsuccessnotice(int index) const {
  return evolutionsuccessnotice_.Get(index);
}
inline ::PBEvolutionSuccess* PBGameNotice::mutable_evolutionsuccessnotice(int index) {
  return evolutionsuccessnotice_.Mutable(index);
}
inline ::PBEvolutionSuccess* PBGameNotice::add_evolutionsuccessnotice() {
  return evolutionsuccessnotice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBEvolutionSuccess >&
PBGameNotice::evolutionsuccessnotice() const {
  return evolutionsuccessnotice_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBEvolutionSuccess >*
PBGameNotice::mutable_evolutionsuccessnotice() {
  return &evolutionsuccessnotice_;
}

// repeated .PBPassLevelPlayerInfo passLevelNotice = 3;
inline int PBGameNotice::passlevelnotice_size() const {
  return passlevelnotice_.size();
}
inline void PBGameNotice::clear_passlevelnotice() {
  passlevelnotice_.Clear();
}
inline const ::PBPassLevelPlayerInfo& PBGameNotice::passlevelnotice(int index) const {
  return passlevelnotice_.Get(index);
}
inline ::PBPassLevelPlayerInfo* PBGameNotice::mutable_passlevelnotice(int index) {
  return passlevelnotice_.Mutable(index);
}
inline ::PBPassLevelPlayerInfo* PBGameNotice::add_passlevelnotice() {
  return passlevelnotice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBPassLevelPlayerInfo >&
PBGameNotice::passlevelnotice() const {
  return passlevelnotice_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBPassLevelPlayerInfo >*
PBGameNotice::mutable_passlevelnotice() {
  return &passlevelnotice_;
}

// repeated .PBCapacity capacityNotice = 4;
inline int PBGameNotice::capacitynotice_size() const {
  return capacitynotice_.size();
}
inline void PBGameNotice::clear_capacitynotice() {
  capacitynotice_.Clear();
}
inline const ::PBCapacity& PBGameNotice::capacitynotice(int index) const {
  return capacitynotice_.Get(index);
}
inline ::PBCapacity* PBGameNotice::mutable_capacitynotice(int index) {
  return capacitynotice_.Mutable(index);
}
inline ::PBCapacity* PBGameNotice::add_capacitynotice() {
  return capacitynotice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCapacity >&
PBGameNotice::capacitynotice() const {
  return capacitynotice_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCapacity >*
PBGameNotice::mutable_capacitynotice() {
  return &capacitynotice_;
}

// repeated string gameActiveInfo = 5;
inline int PBGameNotice::gameactiveinfo_size() const {
  return gameactiveinfo_.size();
}
inline void PBGameNotice::clear_gameactiveinfo() {
  gameactiveinfo_.Clear();
}
inline const ::std::string& PBGameNotice::gameactiveinfo(int index) const {
  return gameactiveinfo_.Get(index);
}
inline ::std::string* PBGameNotice::mutable_gameactiveinfo(int index) {
  return gameactiveinfo_.Mutable(index);
}
inline void PBGameNotice::set_gameactiveinfo(int index, const ::std::string& value) {
  gameactiveinfo_.Mutable(index)->assign(value);
}
inline void PBGameNotice::set_gameactiveinfo(int index, const char* value) {
  gameactiveinfo_.Mutable(index)->assign(value);
}
inline void PBGameNotice::set_gameactiveinfo(int index, const char* value, size_t size) {
  gameactiveinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGameNotice::add_gameactiveinfo() {
  return gameactiveinfo_.Add();
}
inline void PBGameNotice::add_gameactiveinfo(const ::std::string& value) {
  gameactiveinfo_.Add()->assign(value);
}
inline void PBGameNotice::add_gameactiveinfo(const char* value) {
  gameactiveinfo_.Add()->assign(value);
}
inline void PBGameNotice::add_gameactiveinfo(const char* value, size_t size) {
  gameactiveinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBGameNotice::gameactiveinfo() const {
  return gameactiveinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBGameNotice::mutable_gameactiveinfo() {
  return &gameactiveinfo_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MagicCard_2eproto__INCLUDED
