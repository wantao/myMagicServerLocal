// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../include/MagicCard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSystemInfoReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSystemInfoReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAllCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAllCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAllFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAllFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHelpFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHelpFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWaitingFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWaitingFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriendSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriendSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriendAgreeReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriendAgreeReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAddFriendReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAddFriendReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAllMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAllMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMissionAwardSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMissionAwardSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMissionAwardReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMissionAwardReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRunningAfficheReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRunningAfficheReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAwardReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAwardReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBuyEnergyReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBuyEnergyReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRegisterSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRegisterSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLoginSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLoginSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLoginReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLoginReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardLevelUpSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardLevelUpSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardLevelUpReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardLevelUpReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardEvolutionSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardEvolutionSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillLevelUpSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillLevelUpSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillLevelUpReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillLevelUpReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardFormSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardFormSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardFormReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardFormReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillExpAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillExpAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleResultSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleResultSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleResultReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleResultReceive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MagicCard_2eproto() {
  protobuf_AddDesc_MagicCard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MagicCard.proto");
  GOOGLE_CHECK(file != NULL);
  PBServer_descriptor_ = file->message_type(0);
  static const int PBServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, serverurl_),
  };
  PBServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBServer_descriptor_,
      PBServer::default_instance_,
      PBServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBServer));
  PBSystemInfoReceive_descriptor_ = file->message_type(1);
  static const int PBSystemInfoReceive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, affiche_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, allserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, resourceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, battleversion_),
  };
  PBSystemInfoReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSystemInfoReceive_descriptor_,
      PBSystemInfoReceive::default_instance_,
      PBSystemInfoReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSystemInfoReceive));
  PBCard_descriptor_ = file->message_type(2);
  static const int PBCard_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, cardlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, cardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, skillexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, battleposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, vtlgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, strgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, tghgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, quigrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, mgcgrow_),
  };
  PBCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCard_descriptor_,
      PBCard::default_instance_,
      PBCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCard));
  PBAllCard_descriptor_ = file->message_type(3);
  static const int PBAllCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllCard, allcard_),
  };
  PBAllCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAllCard_descriptor_,
      PBAllCard::default_instance_,
      PBAllCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAllCard));
  PBBattleCard_descriptor_ = file->message_type(4);
  static const int PBBattleCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCard, battlecard_),
  };
  PBBattleCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleCard_descriptor_,
      PBBattleCard::default_instance_,
      PBBattleCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleCard));
  PBFriend_descriptor_ = file->message_type(5);
  static const int PBFriend_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, isfriend_),
  };
  PBFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriend_descriptor_,
      PBFriend::default_instance_,
      PBFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriend));
  PBAllFriend_descriptor_ = file->message_type(6);
  static const int PBAllFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllFriend, allfriend_),
  };
  PBAllFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAllFriend_descriptor_,
      PBAllFriend::default_instance_,
      PBAllFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAllFriend));
  PBHelpFriend_descriptor_ = file->message_type(7);
  static const int PBHelpFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHelpFriend, helpfriend_),
  };
  PBHelpFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHelpFriend_descriptor_,
      PBHelpFriend::default_instance_,
      PBHelpFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHelpFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHelpFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHelpFriend));
  PBWaitingFriend_descriptor_ = file->message_type(8);
  static const int PBWaitingFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWaitingFriend, waitingfriend_),
  };
  PBWaitingFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWaitingFriend_descriptor_,
      PBWaitingFriend::default_instance_,
      PBWaitingFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWaitingFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWaitingFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWaitingFriend));
  PBFriendSend_descriptor_ = file->message_type(9);
  static const int PBFriendSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendSend, friendid_),
  };
  PBFriendSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriendSend_descriptor_,
      PBFriendSend::default_instance_,
      PBFriendSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriendSend));
  PBFriendAgreeReceive_descriptor_ = file->message_type(10);
  static const int PBFriendAgreeReceive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, agreeresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, waitings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, friends_),
  };
  PBFriendAgreeReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriendAgreeReceive_descriptor_,
      PBFriendAgreeReceive::default_instance_,
      PBFriendAgreeReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriendAgreeReceive));
  PBAddFriendReceive_descriptor_ = file->message_type(11);
  static const int PBAddFriendReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddFriendReceive, addresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddFriendReceive, friends_),
  };
  PBAddFriendReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAddFriendReceive_descriptor_,
      PBAddFriendReceive::default_instance_,
      PBAddFriendReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddFriendReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddFriendReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAddFriendReceive));
  PBBattle_descriptor_ = file->message_type(12);
  static const int PBBattle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattle, pveprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattle, activitypvenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattle, allactivitypveid_),
  };
  PBBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattle_descriptor_,
      PBBattle::default_instance_,
      PBBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattle));
  PBMission_descriptor_ = file->message_type(13);
  static const int PBMission_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, ismissinfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, missonprogress_),
  };
  PBMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMission_descriptor_,
      PBMission::default_instance_,
      PBMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMission));
  PBAllMission_descriptor_ = file->message_type(14);
  static const int PBAllMission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllMission, allmission_),
  };
  PBAllMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAllMission_descriptor_,
      PBAllMission::default_instance_,
      PBAllMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAllMission));
  PBMissionAwardSend_descriptor_ = file->message_type(15);
  static const int PBMissionAwardSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardSend, missionid_),
  };
  PBMissionAwardSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMissionAwardSend_descriptor_,
      PBMissionAwardSend::default_instance_,
      PBMissionAwardSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMissionAwardSend));
  PBUser_descriptor_ = file->message_type(16);
  static const int PBUser_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, userexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, nextenergytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, buyenergytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, diamondnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, friendvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, goldnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, leadervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, hasmissionfinished_),
  };
  PBUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUser_descriptor_,
      PBUser::default_instance_,
      PBUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUser));
  PBMissionAwardReceive_descriptor_ = file->message_type(17);
  static const int PBMissionAwardReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardReceive, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardReceive, cards_),
  };
  PBMissionAwardReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMissionAwardReceive_descriptor_,
      PBMissionAwardReceive::default_instance_,
      PBMissionAwardReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMissionAwardReceive));
  PBRunningAfficheReceive_descriptor_ = file->message_type(18);
  static const int PBRunningAfficheReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRunningAfficheReceive, affiches_),
  };
  PBRunningAfficheReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRunningAfficheReceive_descriptor_,
      PBRunningAfficheReceive::default_instance_,
      PBRunningAfficheReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRunningAfficheReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRunningAfficheReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRunningAfficheReceive));
  PBAwardReceive_descriptor_ = file->message_type(19);
  static const int PBAwardReceive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, awardresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, cards_),
  };
  PBAwardReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAwardReceive_descriptor_,
      PBAwardReceive::default_instance_,
      PBAwardReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAwardReceive));
  PBBuyEnergyReceive_descriptor_ = file->message_type(20);
  static const int PBBuyEnergyReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuyEnergyReceive, buyresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuyEnergyReceive, user_),
  };
  PBBuyEnergyReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBuyEnergyReceive_descriptor_,
      PBBuyEnergyReceive::default_instance_,
      PBBuyEnergyReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuyEnergyReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBuyEnergyReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBuyEnergyReceive));
  PBRegisterSend_descriptor_ = file->message_type(21);
  static const int PBRegisterSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, username_),
  };
  PBRegisterSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRegisterSend_descriptor_,
      PBRegisterSend::default_instance_,
      PBRegisterSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRegisterSend));
  PBLoginSend_descriptor_ = file->message_type(22);
  static const int PBLoginSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginSend, macaddress_),
  };
  PBLoginSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLoginSend_descriptor_,
      PBLoginSend::default_instance_,
      PBLoginSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLoginSend));
  PBLoginReceive_descriptor_ = file->message_type(23);
  static const int PBLoginReceive_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, isregistersucceed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, battlecards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, helps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, waitings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, token_),
  };
  PBLoginReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLoginReceive_descriptor_,
      PBLoginReceive::default_instance_,
      PBLoginReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLoginReceive));
  PBCardLevelUpSend_descriptor_ = file->message_type(24);
  static const int PBCardLevelUpSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpSend, upcarditemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpSend, eatcarditemids_),
  };
  PBCardLevelUpSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardLevelUpSend_descriptor_,
      PBCardLevelUpSend::default_instance_,
      PBCardLevelUpSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardLevelUpSend));
  PBCardLevelUpReceive_descriptor_ = file->message_type(25);
  static const int PBCardLevelUpReceive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, upresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, goldnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, targetcard_),
  };
  PBCardLevelUpReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardLevelUpReceive_descriptor_,
      PBCardLevelUpReceive::default_instance_,
      PBCardLevelUpReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardLevelUpReceive));
  PBCardEvolutionSend_descriptor_ = file->message_type(26);
  static const int PBCardEvolutionSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, evolutionresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, targetcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, cards_),
  };
  PBCardEvolutionSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardEvolutionSend_descriptor_,
      PBCardEvolutionSend::default_instance_,
      PBCardEvolutionSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardEvolutionSend));
  PBSkillLevelUpSend_descriptor_ = file->message_type(27);
  static const int PBSkillLevelUpSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpSend, upcarditemid_),
  };
  PBSkillLevelUpSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillLevelUpSend_descriptor_,
      PBSkillLevelUpSend::default_instance_,
      PBSkillLevelUpSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillLevelUpSend));
  PBSkillLevelUpReceive_descriptor_ = file->message_type(28);
  static const int PBSkillLevelUpReceive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, skillupresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, targetcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, cards_),
  };
  PBSkillLevelUpReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillLevelUpReceive_descriptor_,
      PBSkillLevelUpReceive::default_instance_,
      PBSkillLevelUpReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillLevelUpReceive));
  PBCardFormSend_descriptor_ = file->message_type(29);
  static const int PBCardFormSend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, captaincardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, cardoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, cardtwoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, cardthreeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, cardfourid_),
  };
  PBCardFormSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardFormSend_descriptor_,
      PBCardFormSend::default_instance_,
      PBCardFormSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardFormSend));
  PBCardFormReceive_descriptor_ = file->message_type(30);
  static const int PBCardFormReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormReceive, formresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormReceive, cards_),
  };
  PBCardFormReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardFormReceive_descriptor_,
      PBCardFormReceive::default_instance_,
      PBCardFormReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardFormReceive));
  PBBattleSend_descriptor_ = file->message_type(31);
  static const int PBBattleSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleSend, battleid_),
  };
  PBBattleSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleSend_descriptor_,
      PBBattleSend::default_instance_,
      PBBattleSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleSend));
  PBBattleAward_descriptor_ = file->message_type(32);
  static const int PBBattleAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, awardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, awardnumber_),
  };
  PBBattleAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleAward_descriptor_,
      PBBattleAward::default_instance_,
      PBBattleAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleAward));
  PBBattleReceive_descriptor_ = file->message_type(33);
  static const int PBBattleReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleReceive, allbattleawards_),
  };
  PBBattleReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleReceive_descriptor_,
      PBBattleReceive::default_instance_,
      PBBattleReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleReceive));
  PBSkillExpAdd_descriptor_ = file->message_type(34);
  static const int PBSkillExpAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillExpAdd, carditemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillExpAdd, skillexp_),
  };
  PBSkillExpAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillExpAdd_descriptor_,
      PBSkillExpAdd::default_instance_,
      PBSkillExpAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillExpAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillExpAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillExpAdd));
  PBBattleResultSend_descriptor_ = file->message_type(35);
  static const int PBBattleResultSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, battleresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, skillexpadd_),
  };
  PBBattleResultSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleResultSend_descriptor_,
      PBBattleResultSend::default_instance_,
      PBBattleResultSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleResultSend));
  PBBattleResultReceive_descriptor_ = file->message_type(36);
  static const int PBBattleResultReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, user_),
  };
  PBBattleResultReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleResultReceive_descriptor_,
      PBBattleResultReceive::default_instance_,
      PBBattleResultReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleResultReceive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MagicCard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBServer_descriptor_, &PBServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSystemInfoReceive_descriptor_, &PBSystemInfoReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCard_descriptor_, &PBCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAllCard_descriptor_, &PBAllCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleCard_descriptor_, &PBBattleCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriend_descriptor_, &PBFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAllFriend_descriptor_, &PBAllFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHelpFriend_descriptor_, &PBHelpFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWaitingFriend_descriptor_, &PBWaitingFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriendSend_descriptor_, &PBFriendSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriendAgreeReceive_descriptor_, &PBFriendAgreeReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAddFriendReceive_descriptor_, &PBAddFriendReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattle_descriptor_, &PBBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMission_descriptor_, &PBMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAllMission_descriptor_, &PBAllMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMissionAwardSend_descriptor_, &PBMissionAwardSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUser_descriptor_, &PBUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMissionAwardReceive_descriptor_, &PBMissionAwardReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRunningAfficheReceive_descriptor_, &PBRunningAfficheReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAwardReceive_descriptor_, &PBAwardReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBuyEnergyReceive_descriptor_, &PBBuyEnergyReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRegisterSend_descriptor_, &PBRegisterSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLoginSend_descriptor_, &PBLoginSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLoginReceive_descriptor_, &PBLoginReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardLevelUpSend_descriptor_, &PBCardLevelUpSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardLevelUpReceive_descriptor_, &PBCardLevelUpReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardEvolutionSend_descriptor_, &PBCardEvolutionSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillLevelUpSend_descriptor_, &PBSkillLevelUpSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillLevelUpReceive_descriptor_, &PBSkillLevelUpReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardFormSend_descriptor_, &PBCardFormSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardFormReceive_descriptor_, &PBCardFormReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleSend_descriptor_, &PBBattleSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleAward_descriptor_, &PBBattleAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleReceive_descriptor_, &PBBattleReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillExpAdd_descriptor_, &PBSkillExpAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleResultSend_descriptor_, &PBBattleResultSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleResultReceive_descriptor_, &PBBattleResultReceive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MagicCard_2eproto() {
  delete PBServer::default_instance_;
  delete PBServer_reflection_;
  delete PBSystemInfoReceive::default_instance_;
  delete PBSystemInfoReceive_reflection_;
  delete PBCard::default_instance_;
  delete PBCard_reflection_;
  delete PBAllCard::default_instance_;
  delete PBAllCard_reflection_;
  delete PBBattleCard::default_instance_;
  delete PBBattleCard_reflection_;
  delete PBFriend::default_instance_;
  delete PBFriend_reflection_;
  delete PBAllFriend::default_instance_;
  delete PBAllFriend_reflection_;
  delete PBHelpFriend::default_instance_;
  delete PBHelpFriend_reflection_;
  delete PBWaitingFriend::default_instance_;
  delete PBWaitingFriend_reflection_;
  delete PBFriendSend::default_instance_;
  delete PBFriendSend_reflection_;
  delete PBFriendAgreeReceive::default_instance_;
  delete PBFriendAgreeReceive_reflection_;
  delete PBAddFriendReceive::default_instance_;
  delete PBAddFriendReceive_reflection_;
  delete PBBattle::default_instance_;
  delete PBBattle_reflection_;
  delete PBMission::default_instance_;
  delete PBMission_reflection_;
  delete PBAllMission::default_instance_;
  delete PBAllMission_reflection_;
  delete PBMissionAwardSend::default_instance_;
  delete PBMissionAwardSend_reflection_;
  delete PBUser::default_instance_;
  delete PBUser_reflection_;
  delete PBMissionAwardReceive::default_instance_;
  delete PBMissionAwardReceive_reflection_;
  delete PBRunningAfficheReceive::default_instance_;
  delete PBRunningAfficheReceive_reflection_;
  delete PBAwardReceive::default_instance_;
  delete PBAwardReceive_reflection_;
  delete PBBuyEnergyReceive::default_instance_;
  delete PBBuyEnergyReceive_reflection_;
  delete PBRegisterSend::default_instance_;
  delete PBRegisterSend_reflection_;
  delete PBLoginSend::default_instance_;
  delete PBLoginSend_reflection_;
  delete PBLoginReceive::default_instance_;
  delete PBLoginReceive_reflection_;
  delete PBCardLevelUpSend::default_instance_;
  delete PBCardLevelUpSend_reflection_;
  delete PBCardLevelUpReceive::default_instance_;
  delete PBCardLevelUpReceive_reflection_;
  delete PBCardEvolutionSend::default_instance_;
  delete PBCardEvolutionSend_reflection_;
  delete PBSkillLevelUpSend::default_instance_;
  delete PBSkillLevelUpSend_reflection_;
  delete PBSkillLevelUpReceive::default_instance_;
  delete PBSkillLevelUpReceive_reflection_;
  delete PBCardFormSend::default_instance_;
  delete PBCardFormSend_reflection_;
  delete PBCardFormReceive::default_instance_;
  delete PBCardFormReceive_reflection_;
  delete PBBattleSend::default_instance_;
  delete PBBattleSend_reflection_;
  delete PBBattleAward::default_instance_;
  delete PBBattleAward_reflection_;
  delete PBBattleReceive::default_instance_;
  delete PBBattleReceive_reflection_;
  delete PBSkillExpAdd::default_instance_;
  delete PBSkillExpAdd_reflection_;
  delete PBBattleResultSend::default_instance_;
  delete PBBattleResultSend_reflection_;
  delete PBBattleResultReceive::default_instance_;
  delete PBBattleResultReceive_reflection_;
}

void protobuf_AddDesc_MagicCard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MagicCard.proto\"1\n\010PBServer\022\022\n\nserverN"
    "ame\030\001 \002(\t\022\021\n\tserverUrl\030\002 \002(\t\"\211\001\n\023PBSyste"
    "mInfoReceive\022\017\n\007affiche\030\001 \002(\t\022\034\n\tallServ"
    "er\030\002 \003(\0132\t.PBServer\022\023\n\013gameVersion\030\003 \002(\t"
    "\022\027\n\017resourceVersion\030\004 \002(\t\022\025\n\rbattleVersi"
    "on\030\005 \002(\t\"\361\001\n\006PBCard\022\016\n\006itemID\030\001 \002(\005\022\016\n\006c"
    "ardID\030\002 \002(\005\022\021\n\tcardLevel\030\003 \002(\005\022\017\n\007cardEx"
    "p\030\004 \002(\005\022\020\n\010skillExp\030\005 \001(\005\022\022\n\nskillLevel\030"
    "\006 \001(\005\022\020\n\010weaponID\030\007 \001(\005\022\026\n\016battlePositio"
    "n\030\010 \002(\005\022\017\n\007VTLGrow\030\t \002(\005\022\017\n\007STRGrow\030\n \002("
    "\005\022\017\n\007TGHGrow\030\013 \002(\005\022\017\n\007QUIGrow\030\014 \002(\005\022\017\n\007M"
    "GCGrow\030\r \002(\005\"%\n\tPBAllCard\022\030\n\007allCard\030\001 \003"
    "(\0132\007.PBCard\"+\n\014PBBattleCard\022\033\n\nbattleCar"
    "d\030\001 \003(\0132\007.PBCard\"\212\001\n\010PBFriend\022\020\n\010friendI"
    "D\030\001 \002(\005\022\022\n\nfriendName\030\002 \002(\t\022\023\n\013friendLev"
    "el\030\003 \002(\005\022\033\n\nfriendCard\030\004 \002(\0132\007.PBCard\022\024\n"
    "\014FriendStatus\030\005 \001(\005\022\020\n\010isFriend\030\006 \001(\010\"+\n"
    "\013PBAllFriend\022\034\n\tallFriend\030\001 \003(\0132\t.PBFrie"
    "nd\"-\n\014PBHelpFriend\022\035\n\nhelpFriend\030\001 \003(\0132\t"
    ".PBFriend\"3\n\017PBWaitingFriend\022 \n\rwaitingF"
    "riend\030\001 \003(\0132\t.PBFriend\" \n\014PBFriendSend\022\020"
    "\n\010friendID\030\001 \002(\005\"n\n\024PBFriendAgreeReceive"
    "\022\023\n\013agreeResult\030\001 \002(\005\022\"\n\010waitings\030\002 \001(\0132"
    "\020.PBWaitingFriend\022\035\n\007friends\030\003 \001(\0132\014.PBA"
    "llFriend\"F\n\022PBAddFriendReceive\022\021\n\taddRes"
    "ult\030\001 \002(\005\022\035\n\007friends\030\002 \001(\0132\014.PBAllFriend"
    "\"Q\n\010PBBattle\022\023\n\013pveProgress\030\013 \002(\t\022\026\n\016act"
    "ivityPveNum\030\r \002(\005\022\030\n\020allActivityPveID\030\016 "
    "\003(\005\"P\n\tPBMission\022\021\n\tmissionID\030\001 \002(\005\022\030\n\020i"
    "sMissinFinished\030\002 \002(\010\022\026\n\016missonProgress\030"
    "\003 \001(\t\".\n\014PBAllMission\022\036\n\nallMission\030\001 \003("
    "\0132\n.PBMission\"\'\n\022PBMissionAwardSend\022\021\n\tm"
    "issionID\030\001 \002(\005\"\376\001\n\006PBUser\022\016\n\006userID\030\001 \002("
    "\005\022\020\n\010userName\030\002 \002(\t\022\021\n\tuserLevel\030\003 \002(\005\022\017"
    "\n\007userExp\030\004 \002(\005\022\016\n\006energy\030\005 \002(\005\022\026\n\016nextE"
    "nergyTime\030\006 \002(\005\022\025\n\rbuyEnergyTime\030\007 \002(\005\022\025"
    "\n\rdiamondNumber\030\010 \002(\005\022\023\n\013friendValue\030\t \002"
    "(\005\022\022\n\ngoldNumber\030\n \002(\005\022\023\n\013leaderValue\030\013 "
    "\002(\005\022\032\n\022hasMissionFinished\030\014 \002(\010\"I\n\025PBMis"
    "sionAwardReceive\022\025\n\004user\030\001 \001(\0132\007.PBUser\022"
    "\031\n\005cards\030\002 \001(\0132\n.PBAllCard\"+\n\027PBRunningA"
    "fficheReceive\022\020\n\010affiches\030\001 \003(\t\"W\n\016PBAwa"
    "rdReceive\022\023\n\013awardResult\030\001 \002(\005\022\025\n\004user\030\002"
    " \001(\0132\007.PBUser\022\031\n\005cards\030\003 \001(\0132\n.PBAllCard"
    "\">\n\022PBBuyEnergyReceive\022\021\n\tbuyResult\030\001 \002("
    "\005\022\025\n\004user\030\002 \001(\0132\007.PBUser\"6\n\016PBRegisterSe"
    "nd\022\022\n\nmacAddress\030\001 \002(\t\022\020\n\010userName\030\003 \002(\t"
    "\"!\n\013PBLoginSend\022\022\n\nmacAddress\030\001 \002(\t\"\255\002\n\016"
    "PBLoginReceive\022\031\n\021isRegisterSucceed\030\001 \001("
    "\010\022\025\n\004user\030\002 \002(\0132\007.PBUser\022\031\n\006battle\030\003 \002(\013"
    "2\t.PBBattle\022\031\n\005cards\030\004 \002(\0132\n.PBAllCard\022\037"
    "\n\010missions\030\005 \002(\0132\r.PBAllMission\022\"\n\013battl"
    "eCards\030\006 \002(\0132\r.PBBattleCard\022\035\n\007friends\030\007"
    " \002(\0132\014.PBAllFriend\022\034\n\005helps\030\010 \002(\0132\r.PBHe"
    "lpFriend\022\"\n\010waitings\030\t \002(\0132\020.PBWaitingFr"
    "iend\022\r\n\005token\030\n \002(\t\"A\n\021PBCardLevelUpSend"
    "\022\024\n\014upCardItemID\030\001 \002(\005\022\026\n\016eatCardItemIDs"
    "\030\002 \003(\005\"t\n\024PBCardLevelUpReceive\022\020\n\010upResu"
    "lt\030\001 \002(\005\022\031\n\005cards\030\002 \001(\0132\n.PBAllCard\022\022\n\ng"
    "oldNumber\030\003 \001(\005\022\033\n\ntargetCard\030\004 \001(\0132\007.PB"
    "Card\"f\n\023PBCardEvolutionSend\022\027\n\017evolution"
    "Result\030\001 \002(\005\022\033\n\ntargetCard\030\002 \001(\0132\007.PBCar"
    "d\022\031\n\005cards\030\003 \001(\0132\n.PBAllCard\"*\n\022PBSkillL"
    "evelUpSend\022\024\n\014upCardItemID\030\001 \002(\005\"f\n\025PBSk"
    "illLevelUpReceive\022\025\n\rskillUpResult\030\001 \002(\005"
    "\022\033\n\ntargetCard\030\002 \001(\0132\007.PBCard\022\031\n\005cards\030\003"
    " \001(\0132\n.PBAllCard\"v\n\016PBCardFormSend\022\025\n\rca"
    "ptainCardID\030\001 \001(\005\022\021\n\tcardOneID\030\002 \001(\005\022\021\n\t"
    "cardTwoID\030\003 \001(\005\022\023\n\013cardThreeID\030\004 \001(\005\022\022\n\n"
    "cardFourID\030\005 \001(\005\"B\n\021PBCardFormReceive\022\022\n"
    "\nformResult\030\001 \002(\005\022\031\n\005cards\030\002 \001(\0132\n.PBAll"
    "Card\" \n\014PBBattleSend\022\020\n\010battleID\030\001 \002(\t\"H"
    "\n\rPBBattleAward\022\017\n\007awardID\030\001 \002(\t\022\021\n\tawar"
    "dType\030\002 \002(\005\022\023\n\013awardNumber\030\003 \002(\005\":\n\017PBBa"
    "ttleReceive\022\'\n\017allBattleAwards\030\001 \003(\0132\016.P"
    "BBattleAward\"5\n\rPBSkillExpAdd\022\022\n\ncardIte"
    "mId\030\001 \002(\005\022\020\n\010skillExp\030\002 \002(\005\"O\n\022PBBattleR"
    "esultSend\022\024\n\014battleResult\030\001 \002(\005\022#\n\013skill"
    "ExpAdd\030\002 \003(\0132\016.PBSkillExpAdd\"I\n\025PBBattle"
    "ResultReceive\022\031\n\005cards\030\001 \002(\0132\n.PBAllCard"
    "\022\025\n\004user\030\002 \002(\0132\007.PBUser", 3223);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MagicCard.proto", &protobuf_RegisterTypes);
  PBServer::default_instance_ = new PBServer();
  PBSystemInfoReceive::default_instance_ = new PBSystemInfoReceive();
  PBCard::default_instance_ = new PBCard();
  PBAllCard::default_instance_ = new PBAllCard();
  PBBattleCard::default_instance_ = new PBBattleCard();
  PBFriend::default_instance_ = new PBFriend();
  PBAllFriend::default_instance_ = new PBAllFriend();
  PBHelpFriend::default_instance_ = new PBHelpFriend();
  PBWaitingFriend::default_instance_ = new PBWaitingFriend();
  PBFriendSend::default_instance_ = new PBFriendSend();
  PBFriendAgreeReceive::default_instance_ = new PBFriendAgreeReceive();
  PBAddFriendReceive::default_instance_ = new PBAddFriendReceive();
  PBBattle::default_instance_ = new PBBattle();
  PBMission::default_instance_ = new PBMission();
  PBAllMission::default_instance_ = new PBAllMission();
  PBMissionAwardSend::default_instance_ = new PBMissionAwardSend();
  PBUser::default_instance_ = new PBUser();
  PBMissionAwardReceive::default_instance_ = new PBMissionAwardReceive();
  PBRunningAfficheReceive::default_instance_ = new PBRunningAfficheReceive();
  PBAwardReceive::default_instance_ = new PBAwardReceive();
  PBBuyEnergyReceive::default_instance_ = new PBBuyEnergyReceive();
  PBRegisterSend::default_instance_ = new PBRegisterSend();
  PBLoginSend::default_instance_ = new PBLoginSend();
  PBLoginReceive::default_instance_ = new PBLoginReceive();
  PBCardLevelUpSend::default_instance_ = new PBCardLevelUpSend();
  PBCardLevelUpReceive::default_instance_ = new PBCardLevelUpReceive();
  PBCardEvolutionSend::default_instance_ = new PBCardEvolutionSend();
  PBSkillLevelUpSend::default_instance_ = new PBSkillLevelUpSend();
  PBSkillLevelUpReceive::default_instance_ = new PBSkillLevelUpReceive();
  PBCardFormSend::default_instance_ = new PBCardFormSend();
  PBCardFormReceive::default_instance_ = new PBCardFormReceive();
  PBBattleSend::default_instance_ = new PBBattleSend();
  PBBattleAward::default_instance_ = new PBBattleAward();
  PBBattleReceive::default_instance_ = new PBBattleReceive();
  PBSkillExpAdd::default_instance_ = new PBSkillExpAdd();
  PBBattleResultSend::default_instance_ = new PBBattleResultSend();
  PBBattleResultReceive::default_instance_ = new PBBattleResultReceive();
  PBServer::default_instance_->InitAsDefaultInstance();
  PBSystemInfoReceive::default_instance_->InitAsDefaultInstance();
  PBCard::default_instance_->InitAsDefaultInstance();
  PBAllCard::default_instance_->InitAsDefaultInstance();
  PBBattleCard::default_instance_->InitAsDefaultInstance();
  PBFriend::default_instance_->InitAsDefaultInstance();
  PBAllFriend::default_instance_->InitAsDefaultInstance();
  PBHelpFriend::default_instance_->InitAsDefaultInstance();
  PBWaitingFriend::default_instance_->InitAsDefaultInstance();
  PBFriendSend::default_instance_->InitAsDefaultInstance();
  PBFriendAgreeReceive::default_instance_->InitAsDefaultInstance();
  PBAddFriendReceive::default_instance_->InitAsDefaultInstance();
  PBBattle::default_instance_->InitAsDefaultInstance();
  PBMission::default_instance_->InitAsDefaultInstance();
  PBAllMission::default_instance_->InitAsDefaultInstance();
  PBMissionAwardSend::default_instance_->InitAsDefaultInstance();
  PBUser::default_instance_->InitAsDefaultInstance();
  PBMissionAwardReceive::default_instance_->InitAsDefaultInstance();
  PBRunningAfficheReceive::default_instance_->InitAsDefaultInstance();
  PBAwardReceive::default_instance_->InitAsDefaultInstance();
  PBBuyEnergyReceive::default_instance_->InitAsDefaultInstance();
  PBRegisterSend::default_instance_->InitAsDefaultInstance();
  PBLoginSend::default_instance_->InitAsDefaultInstance();
  PBLoginReceive::default_instance_->InitAsDefaultInstance();
  PBCardLevelUpSend::default_instance_->InitAsDefaultInstance();
  PBCardLevelUpReceive::default_instance_->InitAsDefaultInstance();
  PBCardEvolutionSend::default_instance_->InitAsDefaultInstance();
  PBSkillLevelUpSend::default_instance_->InitAsDefaultInstance();
  PBSkillLevelUpReceive::default_instance_->InitAsDefaultInstance();
  PBCardFormSend::default_instance_->InitAsDefaultInstance();
  PBCardFormReceive::default_instance_->InitAsDefaultInstance();
  PBBattleSend::default_instance_->InitAsDefaultInstance();
  PBBattleAward::default_instance_->InitAsDefaultInstance();
  PBBattleReceive::default_instance_->InitAsDefaultInstance();
  PBSkillExpAdd::default_instance_->InitAsDefaultInstance();
  PBBattleResultSend::default_instance_->InitAsDefaultInstance();
  PBBattleResultReceive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MagicCard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MagicCard_2eproto {
  StaticDescriptorInitializer_MagicCard_2eproto() {
    protobuf_AddDesc_MagicCard_2eproto();
  }
} static_descriptor_initializer_MagicCard_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBServer::kServerNameFieldNumber;
const int PBServer::kServerUrlFieldNumber;
#endif  // !_MSC_VER

PBServer::PBServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBServer::InitAsDefaultInstance() {
}

PBServer::PBServer(const PBServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBServer::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBServer::~PBServer() {
  SharedDtor();
}

void PBServer::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (serverurl_ != &::google::protobuf::internal::kEmptyString) {
    delete serverurl_;
  }
  if (this != default_instance_) {
  }
}

void PBServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBServer_descriptor_;
}

const PBServer& PBServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBServer* PBServer::default_instance_ = NULL;

PBServer* PBServer::New() const {
  return new PBServer;
}

void PBServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_serverurl()) {
      if (serverurl_ != &::google::protobuf::internal::kEmptyString) {
        serverurl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverUrl;
        break;
      }
      
      // required string serverUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverurl().data(), this->serverurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string serverName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servername(), output);
  }
  
  // required string serverUrl = 2;
  if (has_serverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverurl().data(), this->serverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverurl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string serverName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }
  
  // required string serverUrl = 2;
  if (has_serverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverurl().data(), this->serverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverurl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string serverName = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // required string serverUrl = 2;
    if (has_serverurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverurl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBServer::MergeFrom(const PBServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverurl()) {
      set_serverurl(from.serverurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBServer::CopyFrom(const PBServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PBServer::Swap(PBServer* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(serverurl_, other->serverurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBServer_descriptor_;
  metadata.reflection = PBServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSystemInfoReceive::kAfficheFieldNumber;
const int PBSystemInfoReceive::kAllServerFieldNumber;
const int PBSystemInfoReceive::kGameVersionFieldNumber;
const int PBSystemInfoReceive::kResourceVersionFieldNumber;
const int PBSystemInfoReceive::kBattleVersionFieldNumber;
#endif  // !_MSC_VER

PBSystemInfoReceive::PBSystemInfoReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSystemInfoReceive::InitAsDefaultInstance() {
}

PBSystemInfoReceive::PBSystemInfoReceive(const PBSystemInfoReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSystemInfoReceive::SharedCtor() {
  _cached_size_ = 0;
  affiche_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battleversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSystemInfoReceive::~PBSystemInfoReceive() {
  SharedDtor();
}

void PBSystemInfoReceive::SharedDtor() {
  if (affiche_ != &::google::protobuf::internal::kEmptyString) {
    delete affiche_;
  }
  if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
    delete gameversion_;
  }
  if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
    delete resourceversion_;
  }
  if (battleversion_ != &::google::protobuf::internal::kEmptyString) {
    delete battleversion_;
  }
  if (this != default_instance_) {
  }
}

void PBSystemInfoReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSystemInfoReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSystemInfoReceive_descriptor_;
}

const PBSystemInfoReceive& PBSystemInfoReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSystemInfoReceive* PBSystemInfoReceive::default_instance_ = NULL;

PBSystemInfoReceive* PBSystemInfoReceive::New() const {
  return new PBSystemInfoReceive;
}

void PBSystemInfoReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_affiche()) {
      if (affiche_ != &::google::protobuf::internal::kEmptyString) {
        affiche_->clear();
      }
    }
    if (has_gameversion()) {
      if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
        gameversion_->clear();
      }
    }
    if (has_resourceversion()) {
      if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
        resourceversion_->clear();
      }
    }
    if (has_battleversion()) {
      if (battleversion_ != &::google::protobuf::internal::kEmptyString) {
        battleversion_->clear();
      }
    }
  }
  allserver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSystemInfoReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string affiche = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_affiche()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->affiche().data(), this->affiche().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allServer;
        break;
      }
      
      // repeated .PBServer allServer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allserver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allServer;
        if (input->ExpectTag(26)) goto parse_gameVersion;
        break;
      }
      
      // required string gameVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameversion().data(), this->gameversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resourceVersion;
        break;
      }
      
      // required string resourceVersion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourceversion().data(), this->resourceversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_battleVersion;
        break;
      }
      
      // required string battleVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battleversion().data(), this->battleversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSystemInfoReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string affiche = 1;
  if (has_affiche()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->affiche().data(), this->affiche().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->affiche(), output);
  }
  
  // repeated .PBServer allServer = 2;
  for (int i = 0; i < this->allserver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allserver(i), output);
  }
  
  // required string gameVersion = 3;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameversion().data(), this->gameversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gameversion(), output);
  }
  
  // required string resourceVersion = 4;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resourceversion(), output);
  }
  
  // required string battleVersion = 5;
  if (has_battleversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleversion().data(), this->battleversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->battleversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSystemInfoReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string affiche = 1;
  if (has_affiche()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->affiche().data(), this->affiche().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->affiche(), target);
  }
  
  // repeated .PBServer allServer = 2;
  for (int i = 0; i < this->allserver_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allserver(i), target);
  }
  
  // required string gameVersion = 3;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameversion().data(), this->gameversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gameversion(), target);
  }
  
  // required string resourceVersion = 4;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resourceversion(), target);
  }
  
  // required string battleVersion = 5;
  if (has_battleversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleversion().data(), this->battleversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->battleversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSystemInfoReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string affiche = 1;
    if (has_affiche()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->affiche());
    }
    
    // required string gameVersion = 3;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameversion());
    }
    
    // required string resourceVersion = 4;
    if (has_resourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourceversion());
    }
    
    // required string battleVersion = 5;
    if (has_battleversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleversion());
    }
    
  }
  // repeated .PBServer allServer = 2;
  total_size += 1 * this->allserver_size();
  for (int i = 0; i < this->allserver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allserver(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSystemInfoReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSystemInfoReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSystemInfoReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSystemInfoReceive::MergeFrom(const PBSystemInfoReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  allserver_.MergeFrom(from.allserver_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_affiche()) {
      set_affiche(from.affiche());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
    if (from.has_resourceversion()) {
      set_resourceversion(from.resourceversion());
    }
    if (from.has_battleversion()) {
      set_battleversion(from.battleversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSystemInfoReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSystemInfoReceive::CopyFrom(const PBSystemInfoReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSystemInfoReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  
  for (int i = 0; i < allserver_size(); i++) {
    if (!this->allserver(i).IsInitialized()) return false;
  }
  return true;
}

void PBSystemInfoReceive::Swap(PBSystemInfoReceive* other) {
  if (other != this) {
    std::swap(affiche_, other->affiche_);
    allserver_.Swap(&other->allserver_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(resourceversion_, other->resourceversion_);
    std::swap(battleversion_, other->battleversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSystemInfoReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSystemInfoReceive_descriptor_;
  metadata.reflection = PBSystemInfoReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCard::kItemIDFieldNumber;
const int PBCard::kCardIDFieldNumber;
const int PBCard::kCardLevelFieldNumber;
const int PBCard::kCardExpFieldNumber;
const int PBCard::kSkillExpFieldNumber;
const int PBCard::kSkillLevelFieldNumber;
const int PBCard::kWeaponIDFieldNumber;
const int PBCard::kBattlePositionFieldNumber;
const int PBCard::kVTLGrowFieldNumber;
const int PBCard::kSTRGrowFieldNumber;
const int PBCard::kTGHGrowFieldNumber;
const int PBCard::kQUIGrowFieldNumber;
const int PBCard::kMGCGrowFieldNumber;
#endif  // !_MSC_VER

PBCard::PBCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCard::InitAsDefaultInstance() {
}

PBCard::PBCard(const PBCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCard::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  cardid_ = 0;
  cardlevel_ = 0;
  cardexp_ = 0;
  skillexp_ = 0;
  skilllevel_ = 0;
  weaponid_ = 0;
  battleposition_ = 0;
  vtlgrow_ = 0;
  strgrow_ = 0;
  tghgrow_ = 0;
  quigrow_ = 0;
  mgcgrow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCard::~PBCard() {
  SharedDtor();
}

void PBCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCard_descriptor_;
}

const PBCard& PBCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCard* PBCard::default_instance_ = NULL;

PBCard* PBCard::New() const {
  return new PBCard;
}

void PBCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    cardid_ = 0;
    cardlevel_ = 0;
    cardexp_ = 0;
    skillexp_ = 0;
    skilllevel_ = 0;
    weaponid_ = 0;
    battleposition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vtlgrow_ = 0;
    strgrow_ = 0;
    tghgrow_ = 0;
    quigrow_ = 0;
    mgcgrow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardID;
        break;
      }
      
      // required int32 cardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cardLevel;
        break;
      }
      
      // required int32 cardLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardlevel_)));
          set_has_cardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardExp;
        break;
      }
      
      // required int32 cardExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardexp_)));
          set_has_cardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skillExp;
        break;
      }
      
      // optional int32 skillExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillexp_)));
          set_has_skillexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skillLevel;
        break;
      }
      
      // optional int32 skillLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_weaponID;
        break;
      }
      
      // optional int32 weaponID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battlePosition;
        break;
      }
      
      // required int32 battlePosition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleposition_)));
          set_has_battleposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VTLGrow;
        break;
      }
      
      // required int32 VTLGrow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VTLGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vtlgrow_)));
          set_has_vtlgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_STRGrow;
        break;
      }
      
      // required int32 STRGrow = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_STRGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strgrow_)));
          set_has_strgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_TGHGrow;
        break;
      }
      
      // required int32 TGHGrow = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TGHGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tghgrow_)));
          set_has_tghgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_QUIGrow;
        break;
      }
      
      // required int32 QUIGrow = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QUIGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quigrow_)));
          set_has_quigrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MGCGrow;
        break;
      }
      
      // required int32 MGCGrow = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MGCGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mgcgrow_)));
          set_has_mgcgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }
  
  // required int32 cardID = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardid(), output);
  }
  
  // required int32 cardLevel = 3;
  if (has_cardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardlevel(), output);
  }
  
  // required int32 cardExp = 4;
  if (has_cardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardexp(), output);
  }
  
  // optional int32 skillExp = 5;
  if (has_skillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skillexp(), output);
  }
  
  // optional int32 skillLevel = 6;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skilllevel(), output);
  }
  
  // optional int32 weaponID = 7;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->weaponid(), output);
  }
  
  // required int32 battlePosition = 8;
  if (has_battleposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->battleposition(), output);
  }
  
  // required int32 VTLGrow = 9;
  if (has_vtlgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vtlgrow(), output);
  }
  
  // required int32 STRGrow = 10;
  if (has_strgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->strgrow(), output);
  }
  
  // required int32 TGHGrow = 11;
  if (has_tghgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tghgrow(), output);
  }
  
  // required int32 QUIGrow = 12;
  if (has_quigrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->quigrow(), output);
  }
  
  // required int32 MGCGrow = 13;
  if (has_mgcgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mgcgrow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  // required int32 cardID = 2;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardid(), target);
  }
  
  // required int32 cardLevel = 3;
  if (has_cardlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardlevel(), target);
  }
  
  // required int32 cardExp = 4;
  if (has_cardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardexp(), target);
  }
  
  // optional int32 skillExp = 5;
  if (has_skillexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skillexp(), target);
  }
  
  // optional int32 skillLevel = 6;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skilllevel(), target);
  }
  
  // optional int32 weaponID = 7;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->weaponid(), target);
  }
  
  // required int32 battlePosition = 8;
  if (has_battleposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->battleposition(), target);
  }
  
  // required int32 VTLGrow = 9;
  if (has_vtlgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vtlgrow(), target);
  }
  
  // required int32 STRGrow = 10;
  if (has_strgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->strgrow(), target);
  }
  
  // required int32 TGHGrow = 11;
  if (has_tghgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tghgrow(), target);
  }
  
  // required int32 QUIGrow = 12;
  if (has_quigrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->quigrow(), target);
  }
  
  // required int32 MGCGrow = 13;
  if (has_mgcgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mgcgrow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // required int32 cardID = 2;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }
    
    // required int32 cardLevel = 3;
    if (has_cardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardlevel());
    }
    
    // required int32 cardExp = 4;
    if (has_cardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardexp());
    }
    
    // optional int32 skillExp = 5;
    if (has_skillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillexp());
    }
    
    // optional int32 skillLevel = 6;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }
    
    // optional int32 weaponID = 7;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }
    
    // required int32 battlePosition = 8;
    if (has_battleposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleposition());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 VTLGrow = 9;
    if (has_vtlgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vtlgrow());
    }
    
    // required int32 STRGrow = 10;
    if (has_strgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strgrow());
    }
    
    // required int32 TGHGrow = 11;
    if (has_tghgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tghgrow());
    }
    
    // required int32 QUIGrow = 12;
    if (has_quigrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quigrow());
    }
    
    // required int32 MGCGrow = 13;
    if (has_mgcgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mgcgrow());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCard::MergeFrom(const PBCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_cardlevel()) {
      set_cardlevel(from.cardlevel());
    }
    if (from.has_cardexp()) {
      set_cardexp(from.cardexp());
    }
    if (from.has_skillexp()) {
      set_skillexp(from.skillexp());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_battleposition()) {
      set_battleposition(from.battleposition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vtlgrow()) {
      set_vtlgrow(from.vtlgrow());
    }
    if (from.has_strgrow()) {
      set_strgrow(from.strgrow());
    }
    if (from.has_tghgrow()) {
      set_tghgrow(from.tghgrow());
    }
    if (from.has_quigrow()) {
      set_quigrow(from.quigrow());
    }
    if (from.has_mgcgrow()) {
      set_mgcgrow(from.mgcgrow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCard::CopyFrom(const PBCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001f8f) != 0x00001f8f) return false;
  
  return true;
}

void PBCard::Swap(PBCard* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(cardid_, other->cardid_);
    std::swap(cardlevel_, other->cardlevel_);
    std::swap(cardexp_, other->cardexp_);
    std::swap(skillexp_, other->skillexp_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(battleposition_, other->battleposition_);
    std::swap(vtlgrow_, other->vtlgrow_);
    std::swap(strgrow_, other->strgrow_);
    std::swap(tghgrow_, other->tghgrow_);
    std::swap(quigrow_, other->quigrow_);
    std::swap(mgcgrow_, other->mgcgrow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCard_descriptor_;
  metadata.reflection = PBCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAllCard::kAllCardFieldNumber;
#endif  // !_MSC_VER

PBAllCard::PBAllCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAllCard::InitAsDefaultInstance() {
}

PBAllCard::PBAllCard(const PBAllCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAllCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAllCard::~PBAllCard() {
  SharedDtor();
}

void PBAllCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAllCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAllCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAllCard_descriptor_;
}

const PBAllCard& PBAllCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAllCard* PBAllCard::default_instance_ = NULL;

PBAllCard* PBAllCard::New() const {
  return new PBAllCard;
}

void PBAllCard::Clear() {
  allcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAllCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBCard allCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAllCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBCard allCard = 1;
  for (int i = 0; i < this->allcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allcard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAllCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCard allCard = 1;
  for (int i = 0; i < this->allcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allcard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAllCard::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCard allCard = 1;
  total_size += 1 * this->allcard_size();
  for (int i = 0; i < this->allcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allcard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAllCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAllCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAllCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAllCard::MergeFrom(const PBAllCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  allcard_.MergeFrom(from.allcard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAllCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAllCard::CopyFrom(const PBAllCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAllCard::IsInitialized() const {
  
  for (int i = 0; i < allcard_size(); i++) {
    if (!this->allcard(i).IsInitialized()) return false;
  }
  return true;
}

void PBAllCard::Swap(PBAllCard* other) {
  if (other != this) {
    allcard_.Swap(&other->allcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAllCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAllCard_descriptor_;
  metadata.reflection = PBAllCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleCard::kBattleCardFieldNumber;
#endif  // !_MSC_VER

PBBattleCard::PBBattleCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleCard::InitAsDefaultInstance() {
}

PBBattleCard::PBBattleCard(const PBBattleCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleCard::~PBBattleCard() {
  SharedDtor();
}

void PBBattleCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBattleCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleCard_descriptor_;
}

const PBBattleCard& PBBattleCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleCard* PBBattleCard::default_instance_ = NULL;

PBBattleCard* PBBattleCard::New() const {
  return new PBBattleCard;
}

void PBBattleCard::Clear() {
  battlecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBCard battleCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_battleCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBCard battleCard = 1;
  for (int i = 0; i < this->battlecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battlecard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCard battleCard = 1;
  for (int i = 0; i < this->battlecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battlecard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleCard::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCard battleCard = 1;
  total_size += 1 * this->battlecard_size();
  for (int i = 0; i < this->battlecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlecard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleCard::MergeFrom(const PBBattleCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlecard_.MergeFrom(from.battlecard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleCard::CopyFrom(const PBBattleCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleCard::IsInitialized() const {
  
  for (int i = 0; i < battlecard_size(); i++) {
    if (!this->battlecard(i).IsInitialized()) return false;
  }
  return true;
}

void PBBattleCard::Swap(PBBattleCard* other) {
  if (other != this) {
    battlecard_.Swap(&other->battlecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleCard_descriptor_;
  metadata.reflection = PBBattleCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFriend::kFriendIDFieldNumber;
const int PBFriend::kFriendNameFieldNumber;
const int PBFriend::kFriendLevelFieldNumber;
const int PBFriend::kFriendCardFieldNumber;
const int PBFriend::kFriendStatusFieldNumber;
const int PBFriend::kIsFriendFieldNumber;
#endif  // !_MSC_VER

PBFriend::PBFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriend::InitAsDefaultInstance() {
  friendcard_ = const_cast< ::PBCard*>(&::PBCard::default_instance());
}

PBFriend::PBFriend(const PBFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0;
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendlevel_ = 0;
  friendcard_ = NULL;
  friendstatus_ = 0;
  isfriend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriend::~PBFriend() {
  SharedDtor();
}

void PBFriend::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
    delete friendcard_;
  }
}

void PBFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriend_descriptor_;
}

const PBFriend& PBFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBFriend* PBFriend::default_instance_ = NULL;

PBFriend* PBFriend::New() const {
  return new PBFriend;
}

void PBFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = 0;
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    friendlevel_ = 0;
    if (has_friendcard()) {
      if (friendcard_ != NULL) friendcard_->::PBCard::Clear();
    }
    friendstatus_ = 0;
    isfriend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 friendID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendName;
        break;
      }
      
      // required string friendName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friendLevel;
        break;
      }
      
      // required int32 friendLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendlevel_)));
          set_has_friendlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friendCard;
        break;
      }
      
      // required .PBCard friendCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FriendStatus;
        break;
      }
      
      // optional int32 FriendStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FriendStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendstatus_)));
          set_has_friendstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isFriend;
        break;
      }
      
      // optional bool isFriend = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 friendID = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendid(), output);
  }
  
  // required string friendName = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friendname(), output);
  }
  
  // required int32 friendLevel = 3;
  if (has_friendlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->friendlevel(), output);
  }
  
  // required .PBCard friendCard = 4;
  if (has_friendcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friendcard(), output);
  }
  
  // optional int32 FriendStatus = 5;
  if (has_friendstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->friendstatus(), output);
  }
  
  // optional bool isFriend = 6;
  if (has_isfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isfriend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 friendID = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friendid(), target);
  }
  
  // required string friendName = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendname(), target);
  }
  
  // required int32 friendLevel = 3;
  if (has_friendlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->friendlevel(), target);
  }
  
  // required .PBCard friendCard = 4;
  if (has_friendcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friendcard(), target);
  }
  
  // optional int32 FriendStatus = 5;
  if (has_friendstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->friendstatus(), target);
  }
  
  // optional bool isFriend = 6;
  if (has_isfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isfriend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 friendID = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }
    
    // required string friendName = 2;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }
    
    // required int32 friendLevel = 3;
    if (has_friendlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendlevel());
    }
    
    // required .PBCard friendCard = 4;
    if (has_friendcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendcard());
    }
    
    // optional int32 FriendStatus = 5;
    if (has_friendstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendstatus());
    }
    
    // optional bool isFriend = 6;
    if (has_isfriend()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriend::MergeFrom(const PBFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_friendlevel()) {
      set_friendlevel(from.friendlevel());
    }
    if (from.has_friendcard()) {
      mutable_friendcard()->::PBCard::MergeFrom(from.friendcard());
    }
    if (from.has_friendstatus()) {
      set_friendstatus(from.friendstatus());
    }
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriend::CopyFrom(const PBFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_friendcard()) {
    if (!this->friendcard().IsInitialized()) return false;
  }
  return true;
}

void PBFriend::Swap(PBFriend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(friendname_, other->friendname_);
    std::swap(friendlevel_, other->friendlevel_);
    std::swap(friendcard_, other->friendcard_);
    std::swap(friendstatus_, other->friendstatus_);
    std::swap(isfriend_, other->isfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFriend_descriptor_;
  metadata.reflection = PBFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAllFriend::kAllFriendFieldNumber;
#endif  // !_MSC_VER

PBAllFriend::PBAllFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAllFriend::InitAsDefaultInstance() {
}

PBAllFriend::PBAllFriend(const PBAllFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAllFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAllFriend::~PBAllFriend() {
  SharedDtor();
}

void PBAllFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAllFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAllFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAllFriend_descriptor_;
}

const PBAllFriend& PBAllFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAllFriend* PBAllFriend::default_instance_ = NULL;

PBAllFriend* PBAllFriend::New() const {
  return new PBAllFriend;
}

void PBAllFriend::Clear() {
  allfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAllFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFriend allFriend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allFriend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAllFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFriend allFriend = 1;
  for (int i = 0; i < this->allfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allfriend(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAllFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFriend allFriend = 1;
  for (int i = 0; i < this->allfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allfriend(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAllFriend::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFriend allFriend = 1;
  total_size += 1 * this->allfriend_size();
  for (int i = 0; i < this->allfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allfriend(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAllFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAllFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAllFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAllFriend::MergeFrom(const PBAllFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  allfriend_.MergeFrom(from.allfriend_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAllFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAllFriend::CopyFrom(const PBAllFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAllFriend::IsInitialized() const {
  
  for (int i = 0; i < allfriend_size(); i++) {
    if (!this->allfriend(i).IsInitialized()) return false;
  }
  return true;
}

void PBAllFriend::Swap(PBAllFriend* other) {
  if (other != this) {
    allfriend_.Swap(&other->allfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAllFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAllFriend_descriptor_;
  metadata.reflection = PBAllFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBHelpFriend::kHelpFriendFieldNumber;
#endif  // !_MSC_VER

PBHelpFriend::PBHelpFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHelpFriend::InitAsDefaultInstance() {
}

PBHelpFriend::PBHelpFriend(const PBHelpFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHelpFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHelpFriend::~PBHelpFriend() {
  SharedDtor();
}

void PBHelpFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBHelpFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBHelpFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHelpFriend_descriptor_;
}

const PBHelpFriend& PBHelpFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBHelpFriend* PBHelpFriend::default_instance_ = NULL;

PBHelpFriend* PBHelpFriend::New() const {
  return new PBHelpFriend;
}

void PBHelpFriend::Clear() {
  helpfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHelpFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFriend helpFriend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helpFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_helpfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_helpFriend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHelpFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFriend helpFriend = 1;
  for (int i = 0; i < this->helpfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->helpfriend(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHelpFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFriend helpFriend = 1;
  for (int i = 0; i < this->helpfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->helpfriend(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHelpFriend::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFriend helpFriend = 1;
  total_size += 1 * this->helpfriend_size();
  for (int i = 0; i < this->helpfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->helpfriend(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBHelpFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHelpFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHelpFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHelpFriend::MergeFrom(const PBHelpFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  helpfriend_.MergeFrom(from.helpfriend_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHelpFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHelpFriend::CopyFrom(const PBHelpFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBHelpFriend::IsInitialized() const {
  
  for (int i = 0; i < helpfriend_size(); i++) {
    if (!this->helpfriend(i).IsInitialized()) return false;
  }
  return true;
}

void PBHelpFriend::Swap(PBHelpFriend* other) {
  if (other != this) {
    helpfriend_.Swap(&other->helpfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBHelpFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBHelpFriend_descriptor_;
  metadata.reflection = PBHelpFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWaitingFriend::kWaitingFriendFieldNumber;
#endif  // !_MSC_VER

PBWaitingFriend::PBWaitingFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWaitingFriend::InitAsDefaultInstance() {
}

PBWaitingFriend::PBWaitingFriend(const PBWaitingFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWaitingFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWaitingFriend::~PBWaitingFriend() {
  SharedDtor();
}

void PBWaitingFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWaitingFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWaitingFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWaitingFriend_descriptor_;
}

const PBWaitingFriend& PBWaitingFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBWaitingFriend* PBWaitingFriend::default_instance_ = NULL;

PBWaitingFriend* PBWaitingFriend::New() const {
  return new PBWaitingFriend;
}

void PBWaitingFriend::Clear() {
  waitingfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWaitingFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFriend waitingFriend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waitingFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waitingfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_waitingFriend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWaitingFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFriend waitingFriend = 1;
  for (int i = 0; i < this->waitingfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->waitingfriend(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWaitingFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFriend waitingFriend = 1;
  for (int i = 0; i < this->waitingfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->waitingfriend(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWaitingFriend::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFriend waitingFriend = 1;
  total_size += 1 * this->waitingfriend_size();
  for (int i = 0; i < this->waitingfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->waitingfriend(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWaitingFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWaitingFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWaitingFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWaitingFriend::MergeFrom(const PBWaitingFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  waitingfriend_.MergeFrom(from.waitingfriend_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWaitingFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWaitingFriend::CopyFrom(const PBWaitingFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWaitingFriend::IsInitialized() const {
  
  for (int i = 0; i < waitingfriend_size(); i++) {
    if (!this->waitingfriend(i).IsInitialized()) return false;
  }
  return true;
}

void PBWaitingFriend::Swap(PBWaitingFriend* other) {
  if (other != this) {
    waitingfriend_.Swap(&other->waitingfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWaitingFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWaitingFriend_descriptor_;
  metadata.reflection = PBWaitingFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFriendSend::kFriendIDFieldNumber;
#endif  // !_MSC_VER

PBFriendSend::PBFriendSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriendSend::InitAsDefaultInstance() {
}

PBFriendSend::PBFriendSend(const PBFriendSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriendSend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriendSend::~PBFriendSend() {
  SharedDtor();
}

void PBFriendSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFriendSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFriendSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriendSend_descriptor_;
}

const PBFriendSend& PBFriendSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBFriendSend* PBFriendSend::default_instance_ = NULL;

PBFriendSend* PBFriendSend::New() const {
  return new PBFriendSend;
}

void PBFriendSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriendSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 friendID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriendSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 friendID = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriendSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 friendID = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friendid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriendSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 friendID = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFriendSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriendSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriendSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriendSend::MergeFrom(const PBFriendSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriendSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendSend::CopyFrom(const PBFriendSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFriendSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PBFriendSend::Swap(PBFriendSend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFriendSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFriendSend_descriptor_;
  metadata.reflection = PBFriendSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFriendAgreeReceive::kAgreeResultFieldNumber;
const int PBFriendAgreeReceive::kWaitingsFieldNumber;
const int PBFriendAgreeReceive::kFriendsFieldNumber;
#endif  // !_MSC_VER

PBFriendAgreeReceive::PBFriendAgreeReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriendAgreeReceive::InitAsDefaultInstance() {
  waitings_ = const_cast< ::PBWaitingFriend*>(&::PBWaitingFriend::default_instance());
  friends_ = const_cast< ::PBAllFriend*>(&::PBAllFriend::default_instance());
}

PBFriendAgreeReceive::PBFriendAgreeReceive(const PBFriendAgreeReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriendAgreeReceive::SharedCtor() {
  _cached_size_ = 0;
  agreeresult_ = 0;
  waitings_ = NULL;
  friends_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriendAgreeReceive::~PBFriendAgreeReceive() {
  SharedDtor();
}

void PBFriendAgreeReceive::SharedDtor() {
  if (this != default_instance_) {
    delete waitings_;
    delete friends_;
  }
}

void PBFriendAgreeReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFriendAgreeReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriendAgreeReceive_descriptor_;
}

const PBFriendAgreeReceive& PBFriendAgreeReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBFriendAgreeReceive* PBFriendAgreeReceive::default_instance_ = NULL;

PBFriendAgreeReceive* PBFriendAgreeReceive::New() const {
  return new PBFriendAgreeReceive;
}

void PBFriendAgreeReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agreeresult_ = 0;
    if (has_waitings()) {
      if (waitings_ != NULL) waitings_->::PBWaitingFriend::Clear();
    }
    if (has_friends()) {
      if (friends_ != NULL) friends_->::PBAllFriend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriendAgreeReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 agreeResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agreeresult_)));
          set_has_agreeresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_waitings;
        break;
      }
      
      // optional .PBWaitingFriend waitings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waitings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waitings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friends;
        break;
      }
      
      // optional .PBAllFriend friends = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriendAgreeReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 agreeResult = 1;
  if (has_agreeresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->agreeresult(), output);
  }
  
  // optional .PBWaitingFriend waitings = 2;
  if (has_waitings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waitings(), output);
  }
  
  // optional .PBAllFriend friends = 3;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friends(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriendAgreeReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 agreeResult = 1;
  if (has_agreeresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->agreeresult(), target);
  }
  
  // optional .PBWaitingFriend waitings = 2;
  if (has_waitings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->waitings(), target);
  }
  
  // optional .PBAllFriend friends = 3;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->friends(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriendAgreeReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 agreeResult = 1;
    if (has_agreeresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agreeresult());
    }
    
    // optional .PBWaitingFriend waitings = 2;
    if (has_waitings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waitings());
    }
    
    // optional .PBAllFriend friends = 3;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFriendAgreeReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriendAgreeReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriendAgreeReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriendAgreeReceive::MergeFrom(const PBFriendAgreeReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agreeresult()) {
      set_agreeresult(from.agreeresult());
    }
    if (from.has_waitings()) {
      mutable_waitings()->::PBWaitingFriend::MergeFrom(from.waitings());
    }
    if (from.has_friends()) {
      mutable_friends()->::PBAllFriend::MergeFrom(from.friends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriendAgreeReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendAgreeReceive::CopyFrom(const PBFriendAgreeReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFriendAgreeReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_waitings()) {
    if (!this->waitings().IsInitialized()) return false;
  }
  if (has_friends()) {
    if (!this->friends().IsInitialized()) return false;
  }
  return true;
}

void PBFriendAgreeReceive::Swap(PBFriendAgreeReceive* other) {
  if (other != this) {
    std::swap(agreeresult_, other->agreeresult_);
    std::swap(waitings_, other->waitings_);
    std::swap(friends_, other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFriendAgreeReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFriendAgreeReceive_descriptor_;
  metadata.reflection = PBFriendAgreeReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAddFriendReceive::kAddResultFieldNumber;
const int PBAddFriendReceive::kFriendsFieldNumber;
#endif  // !_MSC_VER

PBAddFriendReceive::PBAddFriendReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAddFriendReceive::InitAsDefaultInstance() {
  friends_ = const_cast< ::PBAllFriend*>(&::PBAllFriend::default_instance());
}

PBAddFriendReceive::PBAddFriendReceive(const PBAddFriendReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAddFriendReceive::SharedCtor() {
  _cached_size_ = 0;
  addresult_ = 0;
  friends_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAddFriendReceive::~PBAddFriendReceive() {
  SharedDtor();
}

void PBAddFriendReceive::SharedDtor() {
  if (this != default_instance_) {
    delete friends_;
  }
}

void PBAddFriendReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAddFriendReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAddFriendReceive_descriptor_;
}

const PBAddFriendReceive& PBAddFriendReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAddFriendReceive* PBAddFriendReceive::default_instance_ = NULL;

PBAddFriendReceive* PBAddFriendReceive::New() const {
  return new PBAddFriendReceive;
}

void PBAddFriendReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addresult_ = 0;
    if (has_friends()) {
      if (friends_ != NULL) friends_->::PBAllFriend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAddFriendReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 addResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addresult_)));
          set_has_addresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }
      
      // optional .PBAllFriend friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAddFriendReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 addResult = 1;
  if (has_addresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addresult(), output);
  }
  
  // optional .PBAllFriend friends = 2;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAddFriendReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 addResult = 1;
  if (has_addresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addresult(), target);
  }
  
  // optional .PBAllFriend friends = 2;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friends(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAddFriendReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 addResult = 1;
    if (has_addresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addresult());
    }
    
    // optional .PBAllFriend friends = 2;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAddFriendReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAddFriendReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAddFriendReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAddFriendReceive::MergeFrom(const PBAddFriendReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addresult()) {
      set_addresult(from.addresult());
    }
    if (from.has_friends()) {
      mutable_friends()->::PBAllFriend::MergeFrom(from.friends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAddFriendReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAddFriendReceive::CopyFrom(const PBAddFriendReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAddFriendReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_friends()) {
    if (!this->friends().IsInitialized()) return false;
  }
  return true;
}

void PBAddFriendReceive::Swap(PBAddFriendReceive* other) {
  if (other != this) {
    std::swap(addresult_, other->addresult_);
    std::swap(friends_, other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAddFriendReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAddFriendReceive_descriptor_;
  metadata.reflection = PBAddFriendReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattle::kPveProgressFieldNumber;
const int PBBattle::kActivityPveNumFieldNumber;
const int PBBattle::kAllActivityPveIDFieldNumber;
#endif  // !_MSC_VER

PBBattle::PBBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattle::InitAsDefaultInstance() {
}

PBBattle::PBBattle(const PBBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattle::SharedCtor() {
  _cached_size_ = 0;
  pveprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activitypvenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattle::~PBBattle() {
  SharedDtor();
}

void PBBattle::SharedDtor() {
  if (pveprogress_ != &::google::protobuf::internal::kEmptyString) {
    delete pveprogress_;
  }
  if (this != default_instance_) {
  }
}

void PBBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattle_descriptor_;
}

const PBBattle& PBBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattle* PBBattle::default_instance_ = NULL;

PBBattle* PBBattle::New() const {
  return new PBBattle;
}

void PBBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pveprogress()) {
      if (pveprogress_ != &::google::protobuf::internal::kEmptyString) {
        pveprogress_->clear();
      }
    }
    activitypvenum_ = 0;
  }
  allactivitypveid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pveProgress = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pveprogress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pveprogress().data(), this->pveprogress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_activityPveNum;
        break;
      }
      
      // required int32 activityPveNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityPveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activitypvenum_)));
          set_has_activitypvenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_allActivityPveID;
        break;
      }
      
      // repeated int32 allActivityPveID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allActivityPveID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_allactivitypveid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allactivitypveid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_allActivityPveID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pveProgress = 11;
  if (has_pveprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pveprogress().data(), this->pveprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->pveprogress(), output);
  }
  
  // required int32 activityPveNum = 13;
  if (has_activitypvenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->activitypvenum(), output);
  }
  
  // repeated int32 allActivityPveID = 14;
  for (int i = 0; i < this->allactivitypveid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->allactivitypveid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pveProgress = 11;
  if (has_pveprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pveprogress().data(), this->pveprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->pveprogress(), target);
  }
  
  // required int32 activityPveNum = 13;
  if (has_activitypvenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->activitypvenum(), target);
  }
  
  // repeated int32 allActivityPveID = 14;
  for (int i = 0; i < this->allactivitypveid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->allactivitypveid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pveProgress = 11;
    if (has_pveprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pveprogress());
    }
    
    // required int32 activityPveNum = 13;
    if (has_activitypvenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitypvenum());
    }
    
  }
  // repeated int32 allActivityPveID = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->allactivitypveid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allactivitypveid(i));
    }
    total_size += 1 * this->allactivitypveid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattle::MergeFrom(const PBBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  allactivitypveid_.MergeFrom(from.allactivitypveid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pveprogress()) {
      set_pveprogress(from.pveprogress());
    }
    if (from.has_activitypvenum()) {
      set_activitypvenum(from.activitypvenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattle::CopyFrom(const PBBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PBBattle::Swap(PBBattle* other) {
  if (other != this) {
    std::swap(pveprogress_, other->pveprogress_);
    std::swap(activitypvenum_, other->activitypvenum_);
    allactivitypveid_.Swap(&other->allactivitypveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattle_descriptor_;
  metadata.reflection = PBBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMission::kMissionIDFieldNumber;
const int PBMission::kIsMissinFinishedFieldNumber;
const int PBMission::kMissonProgressFieldNumber;
#endif  // !_MSC_VER

PBMission::PBMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMission::InitAsDefaultInstance() {
}

PBMission::PBMission(const PBMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMission::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  ismissinfinished_ = false;
  missonprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMission::~PBMission() {
  SharedDtor();
}

void PBMission::SharedDtor() {
  if (missonprogress_ != &::google::protobuf::internal::kEmptyString) {
    delete missonprogress_;
  }
  if (this != default_instance_) {
  }
}

void PBMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMission_descriptor_;
}

const PBMission& PBMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMission* PBMission::default_instance_ = NULL;

PBMission* PBMission::New() const {
  return new PBMission;
}

void PBMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
    ismissinfinished_ = false;
    if (has_missonprogress()) {
      if (missonprogress_ != &::google::protobuf::internal::kEmptyString) {
        missonprogress_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 missionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isMissinFinished;
        break;
      }
      
      // required bool isMissinFinished = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMissinFinished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismissinfinished_)));
          set_has_ismissinfinished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_missonProgress;
        break;
      }
      
      // optional string missonProgress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missonProgress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_missonprogress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->missonprogress().data(), this->missonprogress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 missionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }
  
  // required bool isMissinFinished = 2;
  if (has_ismissinfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ismissinfinished(), output);
  }
  
  // optional string missonProgress = 3;
  if (has_missonprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missonprogress().data(), this->missonprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->missonprogress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 missionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }
  
  // required bool isMissinFinished = 2;
  if (has_ismissinfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ismissinfinished(), target);
  }
  
  // optional string missonProgress = 3;
  if (has_missonprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missonprogress().data(), this->missonprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->missonprogress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMission::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 missionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }
    
    // required bool isMissinFinished = 2;
    if (has_ismissinfinished()) {
      total_size += 1 + 1;
    }
    
    // optional string missonProgress = 3;
    if (has_missonprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->missonprogress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMission::MergeFrom(const PBMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_ismissinfinished()) {
      set_ismissinfinished(from.ismissinfinished());
    }
    if (from.has_missonprogress()) {
      set_missonprogress(from.missonprogress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMission::CopyFrom(const PBMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PBMission::Swap(PBMission* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(ismissinfinished_, other->ismissinfinished_);
    std::swap(missonprogress_, other->missonprogress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMission_descriptor_;
  metadata.reflection = PBMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAllMission::kAllMissionFieldNumber;
#endif  // !_MSC_VER

PBAllMission::PBAllMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAllMission::InitAsDefaultInstance() {
}

PBAllMission::PBAllMission(const PBAllMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAllMission::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAllMission::~PBAllMission() {
  SharedDtor();
}

void PBAllMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAllMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAllMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAllMission_descriptor_;
}

const PBAllMission& PBAllMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAllMission* PBAllMission::default_instance_ = NULL;

PBAllMission* PBAllMission::New() const {
  return new PBAllMission;
}

void PBAllMission::Clear() {
  allmission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAllMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBMission allMission = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allMission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allmission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allMission;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAllMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBMission allMission = 1;
  for (int i = 0; i < this->allmission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allmission(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAllMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBMission allMission = 1;
  for (int i = 0; i < this->allmission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allmission(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAllMission::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBMission allMission = 1;
  total_size += 1 * this->allmission_size();
  for (int i = 0; i < this->allmission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allmission(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAllMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAllMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAllMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAllMission::MergeFrom(const PBAllMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  allmission_.MergeFrom(from.allmission_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAllMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAllMission::CopyFrom(const PBAllMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAllMission::IsInitialized() const {
  
  for (int i = 0; i < allmission_size(); i++) {
    if (!this->allmission(i).IsInitialized()) return false;
  }
  return true;
}

void PBAllMission::Swap(PBAllMission* other) {
  if (other != this) {
    allmission_.Swap(&other->allmission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAllMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAllMission_descriptor_;
  metadata.reflection = PBAllMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMissionAwardSend::kMissionIDFieldNumber;
#endif  // !_MSC_VER

PBMissionAwardSend::PBMissionAwardSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMissionAwardSend::InitAsDefaultInstance() {
}

PBMissionAwardSend::PBMissionAwardSend(const PBMissionAwardSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMissionAwardSend::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMissionAwardSend::~PBMissionAwardSend() {
  SharedDtor();
}

void PBMissionAwardSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMissionAwardSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMissionAwardSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMissionAwardSend_descriptor_;
}

const PBMissionAwardSend& PBMissionAwardSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMissionAwardSend* PBMissionAwardSend::default_instance_ = NULL;

PBMissionAwardSend* PBMissionAwardSend::New() const {
  return new PBMissionAwardSend;
}

void PBMissionAwardSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMissionAwardSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 missionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMissionAwardSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 missionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMissionAwardSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 missionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMissionAwardSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 missionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMissionAwardSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMissionAwardSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMissionAwardSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMissionAwardSend::MergeFrom(const PBMissionAwardSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMissionAwardSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMissionAwardSend::CopyFrom(const PBMissionAwardSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMissionAwardSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PBMissionAwardSend::Swap(PBMissionAwardSend* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMissionAwardSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMissionAwardSend_descriptor_;
  metadata.reflection = PBMissionAwardSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBUser::kUserIDFieldNumber;
const int PBUser::kUserNameFieldNumber;
const int PBUser::kUserLevelFieldNumber;
const int PBUser::kUserExpFieldNumber;
const int PBUser::kEnergyFieldNumber;
const int PBUser::kNextEnergyTimeFieldNumber;
const int PBUser::kBuyEnergyTimeFieldNumber;
const int PBUser::kDiamondNumberFieldNumber;
const int PBUser::kFriendValueFieldNumber;
const int PBUser::kGoldNumberFieldNumber;
const int PBUser::kLeaderValueFieldNumber;
const int PBUser::kHasMissionFinishedFieldNumber;
#endif  // !_MSC_VER

PBUser::PBUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUser::InitAsDefaultInstance() {
}

PBUser::PBUser(const PBUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userlevel_ = 0;
  userexp_ = 0;
  energy_ = 0;
  nextenergytime_ = 0;
  buyenergytime_ = 0;
  diamondnumber_ = 0;
  friendvalue_ = 0;
  goldnumber_ = 0;
  leadervalue_ = 0;
  hasmissionfinished_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUser::~PBUser() {
  SharedDtor();
}

void PBUser::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void PBUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUser_descriptor_;
}

const PBUser& PBUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBUser* PBUser::default_instance_ = NULL;

PBUser* PBUser::New() const {
  return new PBUser;
}

void PBUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    userlevel_ = 0;
    userexp_ = 0;
    energy_ = 0;
    nextenergytime_ = 0;
    buyenergytime_ = 0;
    diamondnumber_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    friendvalue_ = 0;
    goldnumber_ = 0;
    leadervalue_ = 0;
    hasmissionfinished_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }
      
      // required string userName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userLevel;
        break;
      }
      
      // required int32 userLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userExp;
        break;
      }
      
      // required int32 userExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userexp_)));
          set_has_userexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_energy;
        break;
      }
      
      // required int32 energy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nextEnergyTime;
        break;
      }
      
      // required int32 nextEnergyTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextEnergyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextenergytime_)));
          set_has_nextenergytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buyEnergyTime;
        break;
      }
      
      // required int32 buyEnergyTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyEnergyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyenergytime_)));
          set_has_buyenergytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_diamondNumber;
        break;
      }
      
      // required int32 diamondNumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondnumber_)));
          set_has_diamondnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_friendValue;
        break;
      }
      
      // required int32 friendValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendvalue_)));
          set_has_friendvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_goldNumber;
        break;
      }
      
      // required int32 goldNumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldnumber_)));
          set_has_goldnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_leaderValue;
        break;
      }
      
      // required int32 leaderValue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadervalue_)));
          set_has_leadervalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hasMissionFinished;
        break;
      }
      
      // required bool hasMissionFinished = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMissionFinished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmissionfinished_)));
          set_has_hasmissionfinished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }
  
  // required string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // required int32 userLevel = 3;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userlevel(), output);
  }
  
  // required int32 userExp = 4;
  if (has_userexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userexp(), output);
  }
  
  // required int32 energy = 5;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->energy(), output);
  }
  
  // required int32 nextEnergyTime = 6;
  if (has_nextenergytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nextenergytime(), output);
  }
  
  // required int32 buyEnergyTime = 7;
  if (has_buyenergytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buyenergytime(), output);
  }
  
  // required int32 diamondNumber = 8;
  if (has_diamondnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->diamondnumber(), output);
  }
  
  // required int32 friendValue = 9;
  if (has_friendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->friendvalue(), output);
  }
  
  // required int32 goldNumber = 10;
  if (has_goldnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->goldnumber(), output);
  }
  
  // required int32 leaderValue = 11;
  if (has_leadervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->leadervalue(), output);
  }
  
  // required bool hasMissionFinished = 12;
  if (has_hasmissionfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->hasmissionfinished(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }
  
  // required string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // required int32 userLevel = 3;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userlevel(), target);
  }
  
  // required int32 userExp = 4;
  if (has_userexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userexp(), target);
  }
  
  // required int32 energy = 5;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->energy(), target);
  }
  
  // required int32 nextEnergyTime = 6;
  if (has_nextenergytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nextenergytime(), target);
  }
  
  // required int32 buyEnergyTime = 7;
  if (has_buyenergytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buyenergytime(), target);
  }
  
  // required int32 diamondNumber = 8;
  if (has_diamondnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->diamondnumber(), target);
  }
  
  // required int32 friendValue = 9;
  if (has_friendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->friendvalue(), target);
  }
  
  // required int32 goldNumber = 10;
  if (has_goldnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->goldnumber(), target);
  }
  
  // required int32 leaderValue = 11;
  if (has_leadervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->leadervalue(), target);
  }
  
  // required bool hasMissionFinished = 12;
  if (has_hasmissionfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->hasmissionfinished(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // required string userName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required int32 userLevel = 3;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userlevel());
    }
    
    // required int32 userExp = 4;
    if (has_userexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userexp());
    }
    
    // required int32 energy = 5;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // required int32 nextEnergyTime = 6;
    if (has_nextenergytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextenergytime());
    }
    
    // required int32 buyEnergyTime = 7;
    if (has_buyenergytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyenergytime());
    }
    
    // required int32 diamondNumber = 8;
    if (has_diamondnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondnumber());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 friendValue = 9;
    if (has_friendvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendvalue());
    }
    
    // required int32 goldNumber = 10;
    if (has_goldnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldnumber());
    }
    
    // required int32 leaderValue = 11;
    if (has_leadervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leadervalue());
    }
    
    // required bool hasMissionFinished = 12;
    if (has_hasmissionfinished()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUser::MergeFrom(const PBUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_userexp()) {
      set_userexp(from.userexp());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_nextenergytime()) {
      set_nextenergytime(from.nextenergytime());
    }
    if (from.has_buyenergytime()) {
      set_buyenergytime(from.buyenergytime());
    }
    if (from.has_diamondnumber()) {
      set_diamondnumber(from.diamondnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_friendvalue()) {
      set_friendvalue(from.friendvalue());
    }
    if (from.has_goldnumber()) {
      set_goldnumber(from.goldnumber());
    }
    if (from.has_leadervalue()) {
      set_leadervalue(from.leadervalue());
    }
    if (from.has_hasmissionfinished()) {
      set_hasmissionfinished(from.hasmissionfinished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUser::CopyFrom(const PBUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  
  return true;
}

void PBUser::Swap(PBUser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(userexp_, other->userexp_);
    std::swap(energy_, other->energy_);
    std::swap(nextenergytime_, other->nextenergytime_);
    std::swap(buyenergytime_, other->buyenergytime_);
    std::swap(diamondnumber_, other->diamondnumber_);
    std::swap(friendvalue_, other->friendvalue_);
    std::swap(goldnumber_, other->goldnumber_);
    std::swap(leadervalue_, other->leadervalue_);
    std::swap(hasmissionfinished_, other->hasmissionfinished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUser_descriptor_;
  metadata.reflection = PBUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMissionAwardReceive::kUserFieldNumber;
const int PBMissionAwardReceive::kCardsFieldNumber;
#endif  // !_MSC_VER

PBMissionAwardReceive::PBMissionAwardReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMissionAwardReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
}

PBMissionAwardReceive::PBMissionAwardReceive(const PBMissionAwardReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMissionAwardReceive::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  cards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMissionAwardReceive::~PBMissionAwardReceive() {
  SharedDtor();
}

void PBMissionAwardReceive::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete cards_;
  }
}

void PBMissionAwardReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMissionAwardReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMissionAwardReceive_descriptor_;
}

const PBMissionAwardReceive& PBMissionAwardReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMissionAwardReceive* PBMissionAwardReceive::default_instance_ = NULL;

PBMissionAwardReceive* PBMissionAwardReceive::New() const {
  return new PBMissionAwardReceive;
}

void PBMissionAwardReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMissionAwardReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBUser user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMissionAwardReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBUser user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMissionAwardReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBUser user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMissionAwardReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBUser user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional .PBAllCard cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMissionAwardReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMissionAwardReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMissionAwardReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMissionAwardReceive::MergeFrom(const PBMissionAwardReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMissionAwardReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMissionAwardReceive::CopyFrom(const PBMissionAwardReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMissionAwardReceive::IsInitialized() const {
  
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_cards()) {
    if (!this->cards().IsInitialized()) return false;
  }
  return true;
}

void PBMissionAwardReceive::Swap(PBMissionAwardReceive* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(cards_, other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMissionAwardReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMissionAwardReceive_descriptor_;
  metadata.reflection = PBMissionAwardReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRunningAfficheReceive::kAffichesFieldNumber;
#endif  // !_MSC_VER

PBRunningAfficheReceive::PBRunningAfficheReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRunningAfficheReceive::InitAsDefaultInstance() {
}

PBRunningAfficheReceive::PBRunningAfficheReceive(const PBRunningAfficheReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRunningAfficheReceive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRunningAfficheReceive::~PBRunningAfficheReceive() {
  SharedDtor();
}

void PBRunningAfficheReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRunningAfficheReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRunningAfficheReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRunningAfficheReceive_descriptor_;
}

const PBRunningAfficheReceive& PBRunningAfficheReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBRunningAfficheReceive* PBRunningAfficheReceive::default_instance_ = NULL;

PBRunningAfficheReceive* PBRunningAfficheReceive::New() const {
  return new PBRunningAfficheReceive;
}

void PBRunningAfficheReceive::Clear() {
  affiches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRunningAfficheReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string affiches = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_affiches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_affiches()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->affiches(0).data(), this->affiches(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_affiches;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRunningAfficheReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string affiches = 1;
  for (int i = 0; i < this->affiches_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->affiches(i).data(), this->affiches(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->affiches(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRunningAfficheReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string affiches = 1;
  for (int i = 0; i < this->affiches_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->affiches(i).data(), this->affiches(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->affiches(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRunningAfficheReceive::ByteSize() const {
  int total_size = 0;
  
  // repeated string affiches = 1;
  total_size += 1 * this->affiches_size();
  for (int i = 0; i < this->affiches_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->affiches(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRunningAfficheReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRunningAfficheReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRunningAfficheReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRunningAfficheReceive::MergeFrom(const PBRunningAfficheReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  affiches_.MergeFrom(from.affiches_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRunningAfficheReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRunningAfficheReceive::CopyFrom(const PBRunningAfficheReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRunningAfficheReceive::IsInitialized() const {
  
  return true;
}

void PBRunningAfficheReceive::Swap(PBRunningAfficheReceive* other) {
  if (other != this) {
    affiches_.Swap(&other->affiches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRunningAfficheReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRunningAfficheReceive_descriptor_;
  metadata.reflection = PBRunningAfficheReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAwardReceive::kAwardResultFieldNumber;
const int PBAwardReceive::kUserFieldNumber;
const int PBAwardReceive::kCardsFieldNumber;
#endif  // !_MSC_VER

PBAwardReceive::PBAwardReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAwardReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
}

PBAwardReceive::PBAwardReceive(const PBAwardReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAwardReceive::SharedCtor() {
  _cached_size_ = 0;
  awardresult_ = 0;
  user_ = NULL;
  cards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAwardReceive::~PBAwardReceive() {
  SharedDtor();
}

void PBAwardReceive::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete cards_;
  }
}

void PBAwardReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAwardReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAwardReceive_descriptor_;
}

const PBAwardReceive& PBAwardReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAwardReceive* PBAwardReceive::default_instance_ = NULL;

PBAwardReceive* PBAwardReceive::New() const {
  return new PBAwardReceive;
}

void PBAwardReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardresult_ = 0;
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAwardReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 awardResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardresult_)));
          set_has_awardresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAwardReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 awardResult = 1;
  if (has_awardresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->awardresult(), output);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAwardReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 awardResult = 1;
  if (has_awardresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->awardresult(), target);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAwardReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 awardResult = 1;
    if (has_awardresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardresult());
    }
    
    // optional .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional .PBAllCard cards = 3;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAwardReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAwardReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAwardReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAwardReceive::MergeFrom(const PBAwardReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardresult()) {
      set_awardresult(from.awardresult());
    }
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAwardReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAwardReceive::CopyFrom(const PBAwardReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAwardReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_cards()) {
    if (!this->cards().IsInitialized()) return false;
  }
  return true;
}

void PBAwardReceive::Swap(PBAwardReceive* other) {
  if (other != this) {
    std::swap(awardresult_, other->awardresult_);
    std::swap(user_, other->user_);
    std::swap(cards_, other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAwardReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAwardReceive_descriptor_;
  metadata.reflection = PBAwardReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBuyEnergyReceive::kBuyResultFieldNumber;
const int PBBuyEnergyReceive::kUserFieldNumber;
#endif  // !_MSC_VER

PBBuyEnergyReceive::PBBuyEnergyReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBuyEnergyReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
}

PBBuyEnergyReceive::PBBuyEnergyReceive(const PBBuyEnergyReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBuyEnergyReceive::SharedCtor() {
  _cached_size_ = 0;
  buyresult_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBuyEnergyReceive::~PBBuyEnergyReceive() {
  SharedDtor();
}

void PBBuyEnergyReceive::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void PBBuyEnergyReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBuyEnergyReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBuyEnergyReceive_descriptor_;
}

const PBBuyEnergyReceive& PBBuyEnergyReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBuyEnergyReceive* PBBuyEnergyReceive::default_instance_ = NULL;

PBBuyEnergyReceive* PBBuyEnergyReceive::New() const {
  return new PBBuyEnergyReceive;
}

void PBBuyEnergyReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buyresult_ = 0;
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBuyEnergyReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buyResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyresult_)));
          set_has_buyresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBuyEnergyReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buyResult = 1;
  if (has_buyresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buyresult(), output);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBuyEnergyReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buyResult = 1;
  if (has_buyresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buyresult(), target);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBuyEnergyReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buyResult = 1;
    if (has_buyresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyresult());
    }
    
    // optional .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBuyEnergyReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBuyEnergyReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBuyEnergyReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBuyEnergyReceive::MergeFrom(const PBBuyEnergyReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyresult()) {
      set_buyresult(from.buyresult());
    }
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBuyEnergyReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBuyEnergyReceive::CopyFrom(const PBBuyEnergyReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBuyEnergyReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void PBBuyEnergyReceive::Swap(PBBuyEnergyReceive* other) {
  if (other != this) {
    std::swap(buyresult_, other->buyresult_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBuyEnergyReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBuyEnergyReceive_descriptor_;
  metadata.reflection = PBBuyEnergyReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRegisterSend::kMacAddressFieldNumber;
const int PBRegisterSend::kUserNameFieldNumber;
#endif  // !_MSC_VER

PBRegisterSend::PBRegisterSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRegisterSend::InitAsDefaultInstance() {
}

PBRegisterSend::PBRegisterSend(const PBRegisterSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRegisterSend::SharedCtor() {
  _cached_size_ = 0;
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRegisterSend::~PBRegisterSend() {
  SharedDtor();
}

void PBRegisterSend::SharedDtor() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void PBRegisterSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRegisterSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRegisterSend_descriptor_;
}

const PBRegisterSend& PBRegisterSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBRegisterSend* PBRegisterSend::default_instance_ = NULL;

PBRegisterSend* PBRegisterSend::New() const {
  return new PBRegisterSend;
}

void PBRegisterSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
        macaddress_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRegisterSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string macAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userName;
        break;
      }
      
      // required string userName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRegisterSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->macaddress(), output);
  }
  
  // required string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRegisterSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->macaddress(), target);
  }
  
  // required string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRegisterSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string macAddress = 1;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }
    
    // required string userName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRegisterSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRegisterSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRegisterSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRegisterSend::MergeFrom(const PBRegisterSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRegisterSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRegisterSend::CopyFrom(const PBRegisterSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRegisterSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PBRegisterSend::Swap(PBRegisterSend* other) {
  if (other != this) {
    std::swap(macaddress_, other->macaddress_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRegisterSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRegisterSend_descriptor_;
  metadata.reflection = PBRegisterSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLoginSend::kMacAddressFieldNumber;
#endif  // !_MSC_VER

PBLoginSend::PBLoginSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLoginSend::InitAsDefaultInstance() {
}

PBLoginSend::PBLoginSend(const PBLoginSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLoginSend::SharedCtor() {
  _cached_size_ = 0;
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLoginSend::~PBLoginSend() {
  SharedDtor();
}

void PBLoginSend::SharedDtor() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (this != default_instance_) {
  }
}

void PBLoginSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLoginSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLoginSend_descriptor_;
}

const PBLoginSend& PBLoginSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBLoginSend* PBLoginSend::default_instance_ = NULL;

PBLoginSend* PBLoginSend::New() const {
  return new PBLoginSend;
}

void PBLoginSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
        macaddress_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLoginSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string macAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLoginSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->macaddress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLoginSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->macaddress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLoginSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string macAddress = 1;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLoginSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLoginSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLoginSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLoginSend::MergeFrom(const PBLoginSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLoginSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoginSend::CopyFrom(const PBLoginSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLoginSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PBLoginSend::Swap(PBLoginSend* other) {
  if (other != this) {
    std::swap(macaddress_, other->macaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLoginSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLoginSend_descriptor_;
  metadata.reflection = PBLoginSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLoginReceive::kIsRegisterSucceedFieldNumber;
const int PBLoginReceive::kUserFieldNumber;
const int PBLoginReceive::kBattleFieldNumber;
const int PBLoginReceive::kCardsFieldNumber;
const int PBLoginReceive::kMissionsFieldNumber;
const int PBLoginReceive::kBattleCardsFieldNumber;
const int PBLoginReceive::kFriendsFieldNumber;
const int PBLoginReceive::kHelpsFieldNumber;
const int PBLoginReceive::kWaitingsFieldNumber;
const int PBLoginReceive::kTokenFieldNumber;
#endif  // !_MSC_VER

PBLoginReceive::PBLoginReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLoginReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
  battle_ = const_cast< ::PBBattle*>(&::PBBattle::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
  missions_ = const_cast< ::PBAllMission*>(&::PBAllMission::default_instance());
  battlecards_ = const_cast< ::PBBattleCard*>(&::PBBattleCard::default_instance());
  friends_ = const_cast< ::PBAllFriend*>(&::PBAllFriend::default_instance());
  helps_ = const_cast< ::PBHelpFriend*>(&::PBHelpFriend::default_instance());
  waitings_ = const_cast< ::PBWaitingFriend*>(&::PBWaitingFriend::default_instance());
}

PBLoginReceive::PBLoginReceive(const PBLoginReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLoginReceive::SharedCtor() {
  _cached_size_ = 0;
  isregistersucceed_ = false;
  user_ = NULL;
  battle_ = NULL;
  cards_ = NULL;
  missions_ = NULL;
  battlecards_ = NULL;
  friends_ = NULL;
  helps_ = NULL;
  waitings_ = NULL;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLoginReceive::~PBLoginReceive() {
  SharedDtor();
}

void PBLoginReceive::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete user_;
    delete battle_;
    delete cards_;
    delete missions_;
    delete battlecards_;
    delete friends_;
    delete helps_;
    delete waitings_;
  }
}

void PBLoginReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLoginReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLoginReceive_descriptor_;
}

const PBLoginReceive& PBLoginReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBLoginReceive* PBLoginReceive::default_instance_ = NULL;

PBLoginReceive* PBLoginReceive::New() const {
  return new PBLoginReceive;
}

void PBLoginReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isregistersucceed_ = false;
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
    if (has_battle()) {
      if (battle_ != NULL) battle_->::PBBattle::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    if (has_missions()) {
      if (missions_ != NULL) missions_->::PBAllMission::Clear();
    }
    if (has_battlecards()) {
      if (battlecards_ != NULL) battlecards_->::PBBattleCard::Clear();
    }
    if (has_friends()) {
      if (friends_ != NULL) friends_->::PBAllFriend::Clear();
    }
    if (has_helps()) {
      if (helps_ != NULL) helps_->::PBHelpFriend::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_waitings()) {
      if (waitings_ != NULL) waitings_->::PBWaitingFriend::Clear();
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLoginReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isRegisterSucceed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isregistersucceed_)));
          set_has_isregistersucceed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // required .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle;
        break;
      }
      
      // required .PBBattle battle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cards;
        break;
      }
      
      // required .PBAllCard cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_missions;
        break;
      }
      
      // required .PBAllMission missions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_battleCards;
        break;
      }
      
      // required .PBBattleCard battleCards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_friends;
        break;
      }
      
      // required .PBAllFriend friends = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_helps;
        break;
      }
      
      // required .PBHelpFriend helps = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_helps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_waitings;
        break;
      }
      
      // required .PBWaitingFriend waitings = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waitings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waitings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_token;
        break;
      }
      
      // required string token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLoginReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isRegisterSucceed = 1;
  if (has_isregistersucceed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isregistersucceed(), output);
  }
  
  // required .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  // required .PBBattle battle = 3;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle(), output);
  }
  
  // required .PBAllCard cards = 4;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cards(), output);
  }
  
  // required .PBAllMission missions = 5;
  if (has_missions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->missions(), output);
  }
  
  // required .PBBattleCard battleCards = 6;
  if (has_battlecards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->battlecards(), output);
  }
  
  // required .PBAllFriend friends = 7;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->friends(), output);
  }
  
  // required .PBHelpFriend helps = 8;
  if (has_helps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->helps(), output);
  }
  
  // required .PBWaitingFriend waitings = 9;
  if (has_waitings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->waitings(), output);
  }
  
  // required string token = 10;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLoginReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isRegisterSucceed = 1;
  if (has_isregistersucceed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isregistersucceed(), target);
  }
  
  // required .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  // required .PBBattle battle = 3;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle(), target);
  }
  
  // required .PBAllCard cards = 4;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cards(), target);
  }
  
  // required .PBAllMission missions = 5;
  if (has_missions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->missions(), target);
  }
  
  // required .PBBattleCard battleCards = 6;
  if (has_battlecards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->battlecards(), target);
  }
  
  // required .PBAllFriend friends = 7;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->friends(), target);
  }
  
  // required .PBHelpFriend helps = 8;
  if (has_helps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->helps(), target);
  }
  
  // required .PBWaitingFriend waitings = 9;
  if (has_waitings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->waitings(), target);
  }
  
  // required string token = 10;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLoginReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isRegisterSucceed = 1;
    if (has_isregistersucceed()) {
      total_size += 1 + 1;
    }
    
    // required .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // required .PBBattle battle = 3;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle());
    }
    
    // required .PBAllCard cards = 4;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // required .PBAllMission missions = 5;
    if (has_missions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missions());
    }
    
    // required .PBBattleCard battleCards = 6;
    if (has_battlecards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecards());
    }
    
    // required .PBAllFriend friends = 7;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }
    
    // required .PBHelpFriend helps = 8;
    if (has_helps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->helps());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .PBWaitingFriend waitings = 9;
    if (has_waitings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waitings());
    }
    
    // required string token = 10;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLoginReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLoginReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLoginReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLoginReceive::MergeFrom(const PBLoginReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isregistersucceed()) {
      set_isregistersucceed(from.isregistersucceed());
    }
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
    if (from.has_battle()) {
      mutable_battle()->::PBBattle::MergeFrom(from.battle());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_missions()) {
      mutable_missions()->::PBAllMission::MergeFrom(from.missions());
    }
    if (from.has_battlecards()) {
      mutable_battlecards()->::PBBattleCard::MergeFrom(from.battlecards());
    }
    if (from.has_friends()) {
      mutable_friends()->::PBAllFriend::MergeFrom(from.friends());
    }
    if (from.has_helps()) {
      mutable_helps()->::PBHelpFriend::MergeFrom(from.helps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_waitings()) {
      mutable_waitings()->::PBWaitingFriend::MergeFrom(from.waitings());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLoginReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoginReceive::CopyFrom(const PBLoginReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLoginReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003fe) != 0x000003fe) return false;
  
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_battle()) {
    if (!this->battle().IsInitialized()) return false;
  }
  if (has_cards()) {
    if (!this->cards().IsInitialized()) return false;
  }
  if (has_missions()) {
    if (!this->missions().IsInitialized()) return false;
  }
  if (has_battlecards()) {
    if (!this->battlecards().IsInitialized()) return false;
  }
  if (has_friends()) {
    if (!this->friends().IsInitialized()) return false;
  }
  if (has_helps()) {
    if (!this->helps().IsInitialized()) return false;
  }
  if (has_waitings()) {
    if (!this->waitings().IsInitialized()) return false;
  }
  return true;
}

void PBLoginReceive::Swap(PBLoginReceive* other) {
  if (other != this) {
    std::swap(isregistersucceed_, other->isregistersucceed_);
    std::swap(user_, other->user_);
    std::swap(battle_, other->battle_);
    std::swap(cards_, other->cards_);
    std::swap(missions_, other->missions_);
    std::swap(battlecards_, other->battlecards_);
    std::swap(friends_, other->friends_);
    std::swap(helps_, other->helps_);
    std::swap(waitings_, other->waitings_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLoginReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLoginReceive_descriptor_;
  metadata.reflection = PBLoginReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardLevelUpSend::kUpCardItemIDFieldNumber;
const int PBCardLevelUpSend::kEatCardItemIDsFieldNumber;
#endif  // !_MSC_VER

PBCardLevelUpSend::PBCardLevelUpSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardLevelUpSend::InitAsDefaultInstance() {
}

PBCardLevelUpSend::PBCardLevelUpSend(const PBCardLevelUpSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardLevelUpSend::SharedCtor() {
  _cached_size_ = 0;
  upcarditemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardLevelUpSend::~PBCardLevelUpSend() {
  SharedDtor();
}

void PBCardLevelUpSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCardLevelUpSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardLevelUpSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardLevelUpSend_descriptor_;
}

const PBCardLevelUpSend& PBCardLevelUpSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardLevelUpSend* PBCardLevelUpSend::default_instance_ = NULL;

PBCardLevelUpSend* PBCardLevelUpSend::New() const {
  return new PBCardLevelUpSend;
}

void PBCardLevelUpSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upcarditemid_ = 0;
  }
  eatcarditemids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardLevelUpSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 upCardItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upcarditemid_)));
          set_has_upcarditemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eatCardItemIDs;
        break;
      }
      
      // repeated int32 eatCardItemIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatCardItemIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_eatcarditemids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_eatcarditemids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eatCardItemIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardLevelUpSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 upCardItemID = 1;
  if (has_upcarditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upcarditemid(), output);
  }
  
  // repeated int32 eatCardItemIDs = 2;
  for (int i = 0; i < this->eatcarditemids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->eatcarditemids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardLevelUpSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 upCardItemID = 1;
  if (has_upcarditemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upcarditemid(), target);
  }
  
  // repeated int32 eatCardItemIDs = 2;
  for (int i = 0; i < this->eatcarditemids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->eatcarditemids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardLevelUpSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 upCardItemID = 1;
    if (has_upcarditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upcarditemid());
    }
    
  }
  // repeated int32 eatCardItemIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->eatcarditemids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->eatcarditemids(i));
    }
    total_size += 1 * this->eatcarditemids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardLevelUpSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardLevelUpSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardLevelUpSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardLevelUpSend::MergeFrom(const PBCardLevelUpSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  eatcarditemids_.MergeFrom(from.eatcarditemids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upcarditemid()) {
      set_upcarditemid(from.upcarditemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardLevelUpSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardLevelUpSend::CopyFrom(const PBCardLevelUpSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardLevelUpSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PBCardLevelUpSend::Swap(PBCardLevelUpSend* other) {
  if (other != this) {
    std::swap(upcarditemid_, other->upcarditemid_);
    eatcarditemids_.Swap(&other->eatcarditemids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardLevelUpSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardLevelUpSend_descriptor_;
  metadata.reflection = PBCardLevelUpSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardLevelUpReceive::kUpResultFieldNumber;
const int PBCardLevelUpReceive::kCardsFieldNumber;
const int PBCardLevelUpReceive::kGoldNumberFieldNumber;
const int PBCardLevelUpReceive::kTargetCardFieldNumber;
#endif  // !_MSC_VER

PBCardLevelUpReceive::PBCardLevelUpReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardLevelUpReceive::InitAsDefaultInstance() {
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
  targetcard_ = const_cast< ::PBCard*>(&::PBCard::default_instance());
}

PBCardLevelUpReceive::PBCardLevelUpReceive(const PBCardLevelUpReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardLevelUpReceive::SharedCtor() {
  _cached_size_ = 0;
  upresult_ = 0;
  cards_ = NULL;
  goldnumber_ = 0;
  targetcard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardLevelUpReceive::~PBCardLevelUpReceive() {
  SharedDtor();
}

void PBCardLevelUpReceive::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
    delete targetcard_;
  }
}

void PBCardLevelUpReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardLevelUpReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardLevelUpReceive_descriptor_;
}

const PBCardLevelUpReceive& PBCardLevelUpReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardLevelUpReceive* PBCardLevelUpReceive::default_instance_ = NULL;

PBCardLevelUpReceive* PBCardLevelUpReceive::New() const {
  return new PBCardLevelUpReceive;
}

void PBCardLevelUpReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upresult_ = 0;
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    goldnumber_ = 0;
    if (has_targetcard()) {
      if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardLevelUpReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 upResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upresult_)));
          set_has_upresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldNumber;
        break;
      }
      
      // optional int32 goldNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldnumber_)));
          set_has_goldnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetCard;
        break;
      }
      
      // optional .PBCard targetCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardLevelUpReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 upResult = 1;
  if (has_upresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upresult(), output);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(), output);
  }
  
  // optional int32 goldNumber = 3;
  if (has_goldnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goldnumber(), output);
  }
  
  // optional .PBCard targetCard = 4;
  if (has_targetcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetcard(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardLevelUpReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 upResult = 1;
  if (has_upresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upresult(), target);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(), target);
  }
  
  // optional int32 goldNumber = 3;
  if (has_goldnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goldnumber(), target);
  }
  
  // optional .PBCard targetCard = 4;
  if (has_targetcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetcard(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardLevelUpReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 upResult = 1;
    if (has_upresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upresult());
    }
    
    // optional .PBAllCard cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional int32 goldNumber = 3;
    if (has_goldnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldnumber());
    }
    
    // optional .PBCard targetCard = 4;
    if (has_targetcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetcard());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardLevelUpReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardLevelUpReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardLevelUpReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardLevelUpReceive::MergeFrom(const PBCardLevelUpReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upresult()) {
      set_upresult(from.upresult());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_goldnumber()) {
      set_goldnumber(from.goldnumber());
    }
    if (from.has_targetcard()) {
      mutable_targetcard()->::PBCard::MergeFrom(from.targetcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardLevelUpReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardLevelUpReceive::CopyFrom(const PBCardLevelUpReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardLevelUpReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_cards()) {
    if (!this->cards().IsInitialized()) return false;
  }
  if (has_targetcard()) {
    if (!this->targetcard().IsInitialized()) return false;
  }
  return true;
}

void PBCardLevelUpReceive::Swap(PBCardLevelUpReceive* other) {
  if (other != this) {
    std::swap(upresult_, other->upresult_);
    std::swap(cards_, other->cards_);
    std::swap(goldnumber_, other->goldnumber_);
    std::swap(targetcard_, other->targetcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardLevelUpReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardLevelUpReceive_descriptor_;
  metadata.reflection = PBCardLevelUpReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardEvolutionSend::kEvolutionResultFieldNumber;
const int PBCardEvolutionSend::kTargetCardFieldNumber;
const int PBCardEvolutionSend::kCardsFieldNumber;
#endif  // !_MSC_VER

PBCardEvolutionSend::PBCardEvolutionSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardEvolutionSend::InitAsDefaultInstance() {
  targetcard_ = const_cast< ::PBCard*>(&::PBCard::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
}

PBCardEvolutionSend::PBCardEvolutionSend(const PBCardEvolutionSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardEvolutionSend::SharedCtor() {
  _cached_size_ = 0;
  evolutionresult_ = 0;
  targetcard_ = NULL;
  cards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardEvolutionSend::~PBCardEvolutionSend() {
  SharedDtor();
}

void PBCardEvolutionSend::SharedDtor() {
  if (this != default_instance_) {
    delete targetcard_;
    delete cards_;
  }
}

void PBCardEvolutionSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardEvolutionSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardEvolutionSend_descriptor_;
}

const PBCardEvolutionSend& PBCardEvolutionSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardEvolutionSend* PBCardEvolutionSend::default_instance_ = NULL;

PBCardEvolutionSend* PBCardEvolutionSend::New() const {
  return new PBCardEvolutionSend;
}

void PBCardEvolutionSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    evolutionresult_ = 0;
    if (has_targetcard()) {
      if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardEvolutionSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 evolutionResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolutionresult_)));
          set_has_evolutionresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetCard;
        break;
      }
      
      // optional .PBCard targetCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardEvolutionSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 evolutionResult = 1;
  if (has_evolutionresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->evolutionresult(), output);
  }
  
  // optional .PBCard targetCard = 2;
  if (has_targetcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetcard(), output);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardEvolutionSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 evolutionResult = 1;
  if (has_evolutionresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->evolutionresult(), target);
  }
  
  // optional .PBCard targetCard = 2;
  if (has_targetcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetcard(), target);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardEvolutionSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 evolutionResult = 1;
    if (has_evolutionresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolutionresult());
    }
    
    // optional .PBCard targetCard = 2;
    if (has_targetcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetcard());
    }
    
    // optional .PBAllCard cards = 3;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardEvolutionSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardEvolutionSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardEvolutionSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardEvolutionSend::MergeFrom(const PBCardEvolutionSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_evolutionresult()) {
      set_evolutionresult(from.evolutionresult());
    }
    if (from.has_targetcard()) {
      mutable_targetcard()->::PBCard::MergeFrom(from.targetcard());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardEvolutionSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardEvolutionSend::CopyFrom(const PBCardEvolutionSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardEvolutionSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_targetcard()) {
    if (!this->targetcard().IsInitialized()) return false;
  }
  if (has_cards()) {
    if (!this->cards().IsInitialized()) return false;
  }
  return true;
}

void PBCardEvolutionSend::Swap(PBCardEvolutionSend* other) {
  if (other != this) {
    std::swap(evolutionresult_, other->evolutionresult_);
    std::swap(targetcard_, other->targetcard_);
    std::swap(cards_, other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardEvolutionSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardEvolutionSend_descriptor_;
  metadata.reflection = PBCardEvolutionSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSkillLevelUpSend::kUpCardItemIDFieldNumber;
#endif  // !_MSC_VER

PBSkillLevelUpSend::PBSkillLevelUpSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillLevelUpSend::InitAsDefaultInstance() {
}

PBSkillLevelUpSend::PBSkillLevelUpSend(const PBSkillLevelUpSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillLevelUpSend::SharedCtor() {
  _cached_size_ = 0;
  upcarditemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillLevelUpSend::~PBSkillLevelUpSend() {
  SharedDtor();
}

void PBSkillLevelUpSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSkillLevelUpSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSkillLevelUpSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillLevelUpSend_descriptor_;
}

const PBSkillLevelUpSend& PBSkillLevelUpSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSkillLevelUpSend* PBSkillLevelUpSend::default_instance_ = NULL;

PBSkillLevelUpSend* PBSkillLevelUpSend::New() const {
  return new PBSkillLevelUpSend;
}

void PBSkillLevelUpSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upcarditemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillLevelUpSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 upCardItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upcarditemid_)));
          set_has_upcarditemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillLevelUpSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 upCardItemID = 1;
  if (has_upcarditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upcarditemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillLevelUpSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 upCardItemID = 1;
  if (has_upcarditemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upcarditemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillLevelUpSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 upCardItemID = 1;
    if (has_upcarditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upcarditemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSkillLevelUpSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillLevelUpSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillLevelUpSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillLevelUpSend::MergeFrom(const PBSkillLevelUpSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upcarditemid()) {
      set_upcarditemid(from.upcarditemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillLevelUpSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillLevelUpSend::CopyFrom(const PBSkillLevelUpSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSkillLevelUpSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PBSkillLevelUpSend::Swap(PBSkillLevelUpSend* other) {
  if (other != this) {
    std::swap(upcarditemid_, other->upcarditemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSkillLevelUpSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSkillLevelUpSend_descriptor_;
  metadata.reflection = PBSkillLevelUpSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSkillLevelUpReceive::kSkillUpResultFieldNumber;
const int PBSkillLevelUpReceive::kTargetCardFieldNumber;
const int PBSkillLevelUpReceive::kCardsFieldNumber;
#endif  // !_MSC_VER

PBSkillLevelUpReceive::PBSkillLevelUpReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillLevelUpReceive::InitAsDefaultInstance() {
  targetcard_ = const_cast< ::PBCard*>(&::PBCard::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
}

PBSkillLevelUpReceive::PBSkillLevelUpReceive(const PBSkillLevelUpReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillLevelUpReceive::SharedCtor() {
  _cached_size_ = 0;
  skillupresult_ = 0;
  targetcard_ = NULL;
  cards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillLevelUpReceive::~PBSkillLevelUpReceive() {
  SharedDtor();
}

void PBSkillLevelUpReceive::SharedDtor() {
  if (this != default_instance_) {
    delete targetcard_;
    delete cards_;
  }
}

void PBSkillLevelUpReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSkillLevelUpReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillLevelUpReceive_descriptor_;
}

const PBSkillLevelUpReceive& PBSkillLevelUpReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSkillLevelUpReceive* PBSkillLevelUpReceive::default_instance_ = NULL;

PBSkillLevelUpReceive* PBSkillLevelUpReceive::New() const {
  return new PBSkillLevelUpReceive;
}

void PBSkillLevelUpReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillupresult_ = 0;
    if (has_targetcard()) {
      if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillLevelUpReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillUpResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillupresult_)));
          set_has_skillupresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetCard;
        break;
      }
      
      // optional .PBCard targetCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillLevelUpReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillUpResult = 1;
  if (has_skillupresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillupresult(), output);
  }
  
  // optional .PBCard targetCard = 2;
  if (has_targetcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetcard(), output);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillLevelUpReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillUpResult = 1;
  if (has_skillupresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillupresult(), target);
  }
  
  // optional .PBCard targetCard = 2;
  if (has_targetcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetcard(), target);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillLevelUpReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillUpResult = 1;
    if (has_skillupresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillupresult());
    }
    
    // optional .PBCard targetCard = 2;
    if (has_targetcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetcard());
    }
    
    // optional .PBAllCard cards = 3;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSkillLevelUpReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillLevelUpReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillLevelUpReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillLevelUpReceive::MergeFrom(const PBSkillLevelUpReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillupresult()) {
      set_skillupresult(from.skillupresult());
    }
    if (from.has_targetcard()) {
      mutable_targetcard()->::PBCard::MergeFrom(from.targetcard());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillLevelUpReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillLevelUpReceive::CopyFrom(const PBSkillLevelUpReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSkillLevelUpReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_targetcard()) {
    if (!this->targetcard().IsInitialized()) return false;
  }
  if (has_cards()) {
    if (!this->cards().IsInitialized()) return false;
  }
  return true;
}

void PBSkillLevelUpReceive::Swap(PBSkillLevelUpReceive* other) {
  if (other != this) {
    std::swap(skillupresult_, other->skillupresult_);
    std::swap(targetcard_, other->targetcard_);
    std::swap(cards_, other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSkillLevelUpReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSkillLevelUpReceive_descriptor_;
  metadata.reflection = PBSkillLevelUpReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardFormSend::kCaptainCardIDFieldNumber;
const int PBCardFormSend::kCardOneIDFieldNumber;
const int PBCardFormSend::kCardTwoIDFieldNumber;
const int PBCardFormSend::kCardThreeIDFieldNumber;
const int PBCardFormSend::kCardFourIDFieldNumber;
#endif  // !_MSC_VER

PBCardFormSend::PBCardFormSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardFormSend::InitAsDefaultInstance() {
}

PBCardFormSend::PBCardFormSend(const PBCardFormSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardFormSend::SharedCtor() {
  _cached_size_ = 0;
  captaincardid_ = 0;
  cardoneid_ = 0;
  cardtwoid_ = 0;
  cardthreeid_ = 0;
  cardfourid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardFormSend::~PBCardFormSend() {
  SharedDtor();
}

void PBCardFormSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCardFormSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardFormSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardFormSend_descriptor_;
}

const PBCardFormSend& PBCardFormSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardFormSend* PBCardFormSend::default_instance_ = NULL;

PBCardFormSend* PBCardFormSend::New() const {
  return new PBCardFormSend;
}

void PBCardFormSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    captaincardid_ = 0;
    cardoneid_ = 0;
    cardtwoid_ = 0;
    cardthreeid_ = 0;
    cardfourid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardFormSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 captainCardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &captaincardid_)));
          set_has_captaincardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardOneID;
        break;
      }
      
      // optional int32 cardOneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardOneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardoneid_)));
          set_has_cardoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cardTwoID;
        break;
      }
      
      // optional int32 cardTwoID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardTwoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtwoid_)));
          set_has_cardtwoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardThreeID;
        break;
      }
      
      // optional int32 cardThreeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardThreeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardthreeid_)));
          set_has_cardthreeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cardFourID;
        break;
      }
      
      // optional int32 cardFourID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardFourID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardfourid_)));
          set_has_cardfourid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardFormSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 captainCardID = 1;
  if (has_captaincardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->captaincardid(), output);
  }
  
  // optional int32 cardOneID = 2;
  if (has_cardoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardoneid(), output);
  }
  
  // optional int32 cardTwoID = 3;
  if (has_cardtwoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardtwoid(), output);
  }
  
  // optional int32 cardThreeID = 4;
  if (has_cardthreeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardthreeid(), output);
  }
  
  // optional int32 cardFourID = 5;
  if (has_cardfourid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardfourid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardFormSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 captainCardID = 1;
  if (has_captaincardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->captaincardid(), target);
  }
  
  // optional int32 cardOneID = 2;
  if (has_cardoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardoneid(), target);
  }
  
  // optional int32 cardTwoID = 3;
  if (has_cardtwoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardtwoid(), target);
  }
  
  // optional int32 cardThreeID = 4;
  if (has_cardthreeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardthreeid(), target);
  }
  
  // optional int32 cardFourID = 5;
  if (has_cardfourid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardfourid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardFormSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 captainCardID = 1;
    if (has_captaincardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->captaincardid());
    }
    
    // optional int32 cardOneID = 2;
    if (has_cardoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardoneid());
    }
    
    // optional int32 cardTwoID = 3;
    if (has_cardtwoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtwoid());
    }
    
    // optional int32 cardThreeID = 4;
    if (has_cardthreeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardthreeid());
    }
    
    // optional int32 cardFourID = 5;
    if (has_cardfourid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardfourid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardFormSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardFormSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardFormSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardFormSend::MergeFrom(const PBCardFormSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_captaincardid()) {
      set_captaincardid(from.captaincardid());
    }
    if (from.has_cardoneid()) {
      set_cardoneid(from.cardoneid());
    }
    if (from.has_cardtwoid()) {
      set_cardtwoid(from.cardtwoid());
    }
    if (from.has_cardthreeid()) {
      set_cardthreeid(from.cardthreeid());
    }
    if (from.has_cardfourid()) {
      set_cardfourid(from.cardfourid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardFormSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardFormSend::CopyFrom(const PBCardFormSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardFormSend::IsInitialized() const {
  
  return true;
}

void PBCardFormSend::Swap(PBCardFormSend* other) {
  if (other != this) {
    std::swap(captaincardid_, other->captaincardid_);
    std::swap(cardoneid_, other->cardoneid_);
    std::swap(cardtwoid_, other->cardtwoid_);
    std::swap(cardthreeid_, other->cardthreeid_);
    std::swap(cardfourid_, other->cardfourid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardFormSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardFormSend_descriptor_;
  metadata.reflection = PBCardFormSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardFormReceive::kFormResultFieldNumber;
const int PBCardFormReceive::kCardsFieldNumber;
#endif  // !_MSC_VER

PBCardFormReceive::PBCardFormReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardFormReceive::InitAsDefaultInstance() {
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
}

PBCardFormReceive::PBCardFormReceive(const PBCardFormReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardFormReceive::SharedCtor() {
  _cached_size_ = 0;
  formresult_ = 0;
  cards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardFormReceive::~PBCardFormReceive() {
  SharedDtor();
}

void PBCardFormReceive::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
  }
}

void PBCardFormReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardFormReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardFormReceive_descriptor_;
}

const PBCardFormReceive& PBCardFormReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardFormReceive* PBCardFormReceive::default_instance_ = NULL;

PBCardFormReceive* PBCardFormReceive::New() const {
  return new PBCardFormReceive;
}

void PBCardFormReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    formresult_ = 0;
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardFormReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 formResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formresult_)));
          set_has_formresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardFormReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 formResult = 1;
  if (has_formresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->formresult(), output);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardFormReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 formResult = 1;
  if (has_formresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->formresult(), target);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardFormReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 formResult = 1;
    if (has_formresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formresult());
    }
    
    // optional .PBAllCard cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardFormReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardFormReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardFormReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardFormReceive::MergeFrom(const PBCardFormReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formresult()) {
      set_formresult(from.formresult());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardFormReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardFormReceive::CopyFrom(const PBCardFormReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardFormReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_cards()) {
    if (!this->cards().IsInitialized()) return false;
  }
  return true;
}

void PBCardFormReceive::Swap(PBCardFormReceive* other) {
  if (other != this) {
    std::swap(formresult_, other->formresult_);
    std::swap(cards_, other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardFormReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardFormReceive_descriptor_;
  metadata.reflection = PBCardFormReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleSend::kBattleIDFieldNumber;
#endif  // !_MSC_VER

PBBattleSend::PBBattleSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleSend::InitAsDefaultInstance() {
}

PBBattleSend::PBBattleSend(const PBBattleSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleSend::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleSend::~PBBattleSend() {
  SharedDtor();
}

void PBBattleSend::SharedDtor() {
  if (battleid_ != &::google::protobuf::internal::kEmptyString) {
    delete battleid_;
  }
  if (this != default_instance_) {
  }
}

void PBBattleSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleSend_descriptor_;
}

const PBBattleSend& PBBattleSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleSend* PBBattleSend::default_instance_ = NULL;

PBBattleSend* PBBattleSend::New() const {
  return new PBBattleSend;
}

void PBBattleSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battleid()) {
      if (battleid_ != &::google::protobuf::internal::kEmptyString) {
        battleid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string battleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battleid().data(), this->battleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string battleID = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->battleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string battleID = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->battleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string battleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleSend::MergeFrom(const PBBattleSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleSend::CopyFrom(const PBBattleSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PBBattleSend::Swap(PBBattleSend* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleSend_descriptor_;
  metadata.reflection = PBBattleSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleAward::kAwardIDFieldNumber;
const int PBBattleAward::kAwardTypeFieldNumber;
const int PBBattleAward::kAwardNumberFieldNumber;
#endif  // !_MSC_VER

PBBattleAward::PBBattleAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleAward::InitAsDefaultInstance() {
}

PBBattleAward::PBBattleAward(const PBBattleAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleAward::SharedCtor() {
  _cached_size_ = 0;
  awardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardtype_ = 0;
  awardnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleAward::~PBBattleAward() {
  SharedDtor();
}

void PBBattleAward::SharedDtor() {
  if (awardid_ != &::google::protobuf::internal::kEmptyString) {
    delete awardid_;
  }
  if (this != default_instance_) {
  }
}

void PBBattleAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleAward_descriptor_;
}

const PBBattleAward& PBBattleAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleAward* PBBattleAward::default_instance_ = NULL;

PBBattleAward* PBBattleAward::New() const {
  return new PBBattleAward;
}

void PBBattleAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_awardid()) {
      if (awardid_ != &::google::protobuf::internal::kEmptyString) {
        awardid_->clear();
      }
    }
    awardtype_ = 0;
    awardnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string awardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awardid().data(), this->awardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awardType;
        break;
      }
      
      // required int32 awardType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardNumber;
        break;
      }
      
      // required int32 awardNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardnumber_)));
          set_has_awardnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string awardID = 1;
  if (has_awardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardid().data(), this->awardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->awardid(), output);
  }
  
  // required int32 awardType = 2;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->awardtype(), output);
  }
  
  // required int32 awardNumber = 3;
  if (has_awardnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string awardID = 1;
  if (has_awardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardid().data(), this->awardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->awardid(), target);
  }
  
  // required int32 awardType = 2;
  if (has_awardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->awardtype(), target);
  }
  
  // required int32 awardNumber = 3;
  if (has_awardnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string awardID = 1;
    if (has_awardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardid());
    }
    
    // required int32 awardType = 2;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardtype());
    }
    
    // required int32 awardNumber = 3;
    if (has_awardnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardnumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleAward::MergeFrom(const PBBattleAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardid()) {
      set_awardid(from.awardid());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_awardnumber()) {
      set_awardnumber(from.awardnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleAward::CopyFrom(const PBBattleAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PBBattleAward::Swap(PBBattleAward* other) {
  if (other != this) {
    std::swap(awardid_, other->awardid_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(awardnumber_, other->awardnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleAward_descriptor_;
  metadata.reflection = PBBattleAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleReceive::kAllBattleAwardsFieldNumber;
#endif  // !_MSC_VER

PBBattleReceive::PBBattleReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleReceive::InitAsDefaultInstance() {
}

PBBattleReceive::PBBattleReceive(const PBBattleReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleReceive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleReceive::~PBBattleReceive() {
  SharedDtor();
}

void PBBattleReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBattleReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleReceive_descriptor_;
}

const PBBattleReceive& PBBattleReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleReceive* PBBattleReceive::default_instance_ = NULL;

PBBattleReceive* PBBattleReceive::New() const {
  return new PBBattleReceive;
}

void PBBattleReceive::Clear() {
  allbattleawards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBBattleAward allBattleAwards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allBattleAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allbattleawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allBattleAwards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBBattleAward allBattleAwards = 1;
  for (int i = 0; i < this->allbattleawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allbattleawards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBBattleAward allBattleAwards = 1;
  for (int i = 0; i < this->allbattleawards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allbattleawards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleReceive::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBBattleAward allBattleAwards = 1;
  total_size += 1 * this->allbattleawards_size();
  for (int i = 0; i < this->allbattleawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allbattleawards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleReceive::MergeFrom(const PBBattleReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  allbattleawards_.MergeFrom(from.allbattleawards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleReceive::CopyFrom(const PBBattleReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleReceive::IsInitialized() const {
  
  for (int i = 0; i < allbattleawards_size(); i++) {
    if (!this->allbattleawards(i).IsInitialized()) return false;
  }
  return true;
}

void PBBattleReceive::Swap(PBBattleReceive* other) {
  if (other != this) {
    allbattleawards_.Swap(&other->allbattleawards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleReceive_descriptor_;
  metadata.reflection = PBBattleReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSkillExpAdd::kCardItemIdFieldNumber;
const int PBSkillExpAdd::kSkillExpFieldNumber;
#endif  // !_MSC_VER

PBSkillExpAdd::PBSkillExpAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillExpAdd::InitAsDefaultInstance() {
}

PBSkillExpAdd::PBSkillExpAdd(const PBSkillExpAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillExpAdd::SharedCtor() {
  _cached_size_ = 0;
  carditemid_ = 0;
  skillexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillExpAdd::~PBSkillExpAdd() {
  SharedDtor();
}

void PBSkillExpAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSkillExpAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSkillExpAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillExpAdd_descriptor_;
}

const PBSkillExpAdd& PBSkillExpAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSkillExpAdd* PBSkillExpAdd::default_instance_ = NULL;

PBSkillExpAdd* PBSkillExpAdd::New() const {
  return new PBSkillExpAdd;
}

void PBSkillExpAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    carditemid_ = 0;
    skillexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillExpAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cardItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carditemid_)));
          set_has_carditemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillExp;
        break;
      }
      
      // required int32 skillExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillexp_)));
          set_has_skillexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillExpAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cardItemId = 1;
  if (has_carditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->carditemid(), output);
  }
  
  // required int32 skillExp = 2;
  if (has_skillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillExpAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cardItemId = 1;
  if (has_carditemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->carditemid(), target);
  }
  
  // required int32 skillExp = 2;
  if (has_skillexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillExpAdd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cardItemId = 1;
    if (has_carditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carditemid());
    }
    
    // required int32 skillExp = 2;
    if (has_skillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillexp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSkillExpAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillExpAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillExpAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillExpAdd::MergeFrom(const PBSkillExpAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carditemid()) {
      set_carditemid(from.carditemid());
    }
    if (from.has_skillexp()) {
      set_skillexp(from.skillexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillExpAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillExpAdd::CopyFrom(const PBSkillExpAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSkillExpAdd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PBSkillExpAdd::Swap(PBSkillExpAdd* other) {
  if (other != this) {
    std::swap(carditemid_, other->carditemid_);
    std::swap(skillexp_, other->skillexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSkillExpAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSkillExpAdd_descriptor_;
  metadata.reflection = PBSkillExpAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleResultSend::kBattleResultFieldNumber;
const int PBBattleResultSend::kSkillExpAddFieldNumber;
#endif  // !_MSC_VER

PBBattleResultSend::PBBattleResultSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleResultSend::InitAsDefaultInstance() {
}

PBBattleResultSend::PBBattleResultSend(const PBBattleResultSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleResultSend::SharedCtor() {
  _cached_size_ = 0;
  battleresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleResultSend::~PBBattleResultSend() {
  SharedDtor();
}

void PBBattleResultSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBattleResultSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleResultSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleResultSend_descriptor_;
}

const PBBattleResultSend& PBBattleResultSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleResultSend* PBBattleResultSend::default_instance_ = NULL;

PBBattleResultSend* PBBattleResultSend::New() const {
  return new PBBattleResultSend;
}

void PBBattleResultSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleresult_ = 0;
  }
  skillexpadd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleResultSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 battleResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleresult_)));
          set_has_battleresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillExpAdd;
        break;
      }
      
      // repeated .PBSkillExpAdd skillExpAdd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillExpAdd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillexpadd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillExpAdd;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleResultSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 battleResult = 1;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battleresult(), output);
  }
  
  // repeated .PBSkillExpAdd skillExpAdd = 2;
  for (int i = 0; i < this->skillexpadd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillexpadd(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleResultSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 battleResult = 1;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battleresult(), target);
  }
  
  // repeated .PBSkillExpAdd skillExpAdd = 2;
  for (int i = 0; i < this->skillexpadd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillexpadd(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleResultSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 battleResult = 1;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleresult());
    }
    
  }
  // repeated .PBSkillExpAdd skillExpAdd = 2;
  total_size += 1 * this->skillexpadd_size();
  for (int i = 0; i < this->skillexpadd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillexpadd(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleResultSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleResultSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleResultSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleResultSend::MergeFrom(const PBBattleResultSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillexpadd_.MergeFrom(from.skillexpadd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleresult()) {
      set_battleresult(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleResultSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleResultSend::CopyFrom(const PBBattleResultSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleResultSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < skillexpadd_size(); i++) {
    if (!this->skillexpadd(i).IsInitialized()) return false;
  }
  return true;
}

void PBBattleResultSend::Swap(PBBattleResultSend* other) {
  if (other != this) {
    std::swap(battleresult_, other->battleresult_);
    skillexpadd_.Swap(&other->skillexpadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleResultSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleResultSend_descriptor_;
  metadata.reflection = PBBattleResultSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleResultReceive::kCardsFieldNumber;
const int PBBattleResultReceive::kUserFieldNumber;
#endif  // !_MSC_VER

PBBattleResultReceive::PBBattleResultReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleResultReceive::InitAsDefaultInstance() {
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
}

PBBattleResultReceive::PBBattleResultReceive(const PBBattleResultReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleResultReceive::SharedCtor() {
  _cached_size_ = 0;
  cards_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleResultReceive::~PBBattleResultReceive() {
  SharedDtor();
}

void PBBattleResultReceive::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
    delete user_;
  }
}

void PBBattleResultReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleResultReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleResultReceive_descriptor_;
}

const PBBattleResultReceive& PBBattleResultReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleResultReceive* PBBattleResultReceive::default_instance_ = NULL;

PBBattleResultReceive* PBBattleResultReceive::New() const {
  return new PBBattleResultReceive;
}

void PBBattleResultReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleResultReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBAllCard cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // required .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleResultReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PBAllCard cards = 1;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(), output);
  }
  
  // required .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleResultReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PBAllCard cards = 1;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cards(), target);
  }
  
  // required .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleResultReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBAllCard cards = 1;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // required .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleResultReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleResultReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleResultReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleResultReceive::MergeFrom(const PBBattleResultReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleResultReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleResultReceive::CopyFrom(const PBBattleResultReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleResultReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_cards()) {
    if (!this->cards().IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void PBBattleResultReceive::Swap(PBBattleResultReceive* other) {
  if (other != this) {
    std::swap(cards_, other->cards_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleResultReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleResultReceive_descriptor_;
  metadata.reflection = PBBattleResultReceive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
