// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MagicCard.proto

#ifndef PROTOBUF_MagicCard_2eproto__INCLUDED
#define PROTOBUF_MagicCard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MagicCard_2eproto();
void protobuf_AssignDesc_MagicCard_2eproto();
void protobuf_ShutdownFile_MagicCard_2eproto();

class PBServer;
class PBSystemInfoReceive;
class PBCard;
class PBAllCard;
class PBBattleCard;
class PBFriend;
class PBAllFriend;
class PBHelpFriend;
class PBWaitingFriend;
class PBFriendSend;
class PBFriendAgreeReceive;
class PBAddFriendReceive;
class PBBattle;
class PBMission;
class PBAllMission;
class PBMissionAwardSend;
class PBUser;
class PBMissionAwardReceive;
class PBRunningAfficheReceive;
class PBAwardReceive;
class PBBuyEnergyReceive;
class PBRegisterSend;
class PBLoginSend;
class PBLoginReceive;
class PBCardLevelUpSend;
class PBCardLevelUpReceive;
class PBCardEvolutionSend;
class PBSkillLevelUpSend;
class PBSkillLevelUpReceive;
class PBCardFormSend;
class PBCardFormReceive;
class PBBattleSend;
class PBBattleAward;
class PBBattleReceive;
class PBSkillExpAdd;
class PBBattleResultSend;
class PBBattleResultReceive;

// ===================================================================

class PBServer : public ::google::protobuf::Message {
 public:
  PBServer();
  virtual ~PBServer();
  
  PBServer(const PBServer& from);
  
  inline PBServer& operator=(const PBServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBServer& default_instance();
  
  void Swap(PBServer* other);
  
  // implements Message ----------------------------------------------
  
  PBServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBServer& from);
  void MergeFrom(const PBServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string serverName = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  
  // required string serverUrl = 2;
  inline bool has_serverurl() const;
  inline void clear_serverurl();
  static const int kServerUrlFieldNumber = 2;
  inline const ::std::string& serverurl() const;
  inline void set_serverurl(const ::std::string& value);
  inline void set_serverurl(const char* value);
  inline void set_serverurl(const char* value, size_t size);
  inline ::std::string* mutable_serverurl();
  inline ::std::string* release_serverurl();
  
  // @@protoc_insertion_point(class_scope:PBServer)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serverurl();
  inline void clear_has_serverurl();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* servername_;
  ::std::string* serverurl_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBServer* default_instance_;
};
// -------------------------------------------------------------------

class PBSystemInfoReceive : public ::google::protobuf::Message {
 public:
  PBSystemInfoReceive();
  virtual ~PBSystemInfoReceive();
  
  PBSystemInfoReceive(const PBSystemInfoReceive& from);
  
  inline PBSystemInfoReceive& operator=(const PBSystemInfoReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSystemInfoReceive& default_instance();
  
  void Swap(PBSystemInfoReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBSystemInfoReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSystemInfoReceive& from);
  void MergeFrom(const PBSystemInfoReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string affiche = 1;
  inline bool has_affiche() const;
  inline void clear_affiche();
  static const int kAfficheFieldNumber = 1;
  inline const ::std::string& affiche() const;
  inline void set_affiche(const ::std::string& value);
  inline void set_affiche(const char* value);
  inline void set_affiche(const char* value, size_t size);
  inline ::std::string* mutable_affiche();
  inline ::std::string* release_affiche();
  
  // repeated .PBServer allServer = 2;
  inline int allserver_size() const;
  inline void clear_allserver();
  static const int kAllServerFieldNumber = 2;
  inline const ::PBServer& allserver(int index) const;
  inline ::PBServer* mutable_allserver(int index);
  inline ::PBServer* add_allserver();
  inline const ::google::protobuf::RepeatedPtrField< ::PBServer >&
      allserver() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBServer >*
      mutable_allserver();
  
  // required string gameVersion = 3;
  inline bool has_gameversion() const;
  inline void clear_gameversion();
  static const int kGameVersionFieldNumber = 3;
  inline const ::std::string& gameversion() const;
  inline void set_gameversion(const ::std::string& value);
  inline void set_gameversion(const char* value);
  inline void set_gameversion(const char* value, size_t size);
  inline ::std::string* mutable_gameversion();
  inline ::std::string* release_gameversion();
  
  // required string resourceVersion = 4;
  inline bool has_resourceversion() const;
  inline void clear_resourceversion();
  static const int kResourceVersionFieldNumber = 4;
  inline const ::std::string& resourceversion() const;
  inline void set_resourceversion(const ::std::string& value);
  inline void set_resourceversion(const char* value);
  inline void set_resourceversion(const char* value, size_t size);
  inline ::std::string* mutable_resourceversion();
  inline ::std::string* release_resourceversion();
  
  // required string battleVersion = 5;
  inline bool has_battleversion() const;
  inline void clear_battleversion();
  static const int kBattleVersionFieldNumber = 5;
  inline const ::std::string& battleversion() const;
  inline void set_battleversion(const ::std::string& value);
  inline void set_battleversion(const char* value);
  inline void set_battleversion(const char* value, size_t size);
  inline ::std::string* mutable_battleversion();
  inline ::std::string* release_battleversion();
  
  // @@protoc_insertion_point(class_scope:PBSystemInfoReceive)
 private:
  inline void set_has_affiche();
  inline void clear_has_affiche();
  inline void set_has_gameversion();
  inline void clear_has_gameversion();
  inline void set_has_resourceversion();
  inline void clear_has_resourceversion();
  inline void set_has_battleversion();
  inline void clear_has_battleversion();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* affiche_;
  ::google::protobuf::RepeatedPtrField< ::PBServer > allserver_;
  ::std::string* gameversion_;
  ::std::string* resourceversion_;
  ::std::string* battleversion_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSystemInfoReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBCard : public ::google::protobuf::Message {
 public:
  PBCard();
  virtual ~PBCard();
  
  PBCard(const PBCard& from);
  
  inline PBCard& operator=(const PBCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCard& default_instance();
  
  void Swap(PBCard* other);
  
  // implements Message ----------------------------------------------
  
  PBCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCard& from);
  void MergeFrom(const PBCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // required int32 cardID = 2;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardIDFieldNumber = 2;
  inline ::google::protobuf::int32 cardid() const;
  inline void set_cardid(::google::protobuf::int32 value);
  
  // required int32 cardLevel = 3;
  inline bool has_cardlevel() const;
  inline void clear_cardlevel();
  static const int kCardLevelFieldNumber = 3;
  inline ::google::protobuf::int32 cardlevel() const;
  inline void set_cardlevel(::google::protobuf::int32 value);
  
  // required int32 cardExp = 4;
  inline bool has_cardexp() const;
  inline void clear_cardexp();
  static const int kCardExpFieldNumber = 4;
  inline ::google::protobuf::int32 cardexp() const;
  inline void set_cardexp(::google::protobuf::int32 value);
  
  // optional int32 skillExp = 5;
  inline bool has_skillexp() const;
  inline void clear_skillexp();
  static const int kSkillExpFieldNumber = 5;
  inline ::google::protobuf::int32 skillexp() const;
  inline void set_skillexp(::google::protobuf::int32 value);
  
  // optional int32 skillLevel = 6;
  inline bool has_skilllevel() const;
  inline void clear_skilllevel();
  static const int kSkillLevelFieldNumber = 6;
  inline ::google::protobuf::int32 skilllevel() const;
  inline void set_skilllevel(::google::protobuf::int32 value);
  
  // optional int32 weaponID = 7;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 7;
  inline ::google::protobuf::int32 weaponid() const;
  inline void set_weaponid(::google::protobuf::int32 value);
  
  // required int32 battlePosition = 8;
  inline bool has_battleposition() const;
  inline void clear_battleposition();
  static const int kBattlePositionFieldNumber = 8;
  inline ::google::protobuf::int32 battleposition() const;
  inline void set_battleposition(::google::protobuf::int32 value);
  
  // required int32 VTLGrow = 9;
  inline bool has_vtlgrow() const;
  inline void clear_vtlgrow();
  static const int kVTLGrowFieldNumber = 9;
  inline ::google::protobuf::int32 vtlgrow() const;
  inline void set_vtlgrow(::google::protobuf::int32 value);
  
  // required int32 STRGrow = 10;
  inline bool has_strgrow() const;
  inline void clear_strgrow();
  static const int kSTRGrowFieldNumber = 10;
  inline ::google::protobuf::int32 strgrow() const;
  inline void set_strgrow(::google::protobuf::int32 value);
  
  // required int32 TGHGrow = 11;
  inline bool has_tghgrow() const;
  inline void clear_tghgrow();
  static const int kTGHGrowFieldNumber = 11;
  inline ::google::protobuf::int32 tghgrow() const;
  inline void set_tghgrow(::google::protobuf::int32 value);
  
  // required int32 QUIGrow = 12;
  inline bool has_quigrow() const;
  inline void clear_quigrow();
  static const int kQUIGrowFieldNumber = 12;
  inline ::google::protobuf::int32 quigrow() const;
  inline void set_quigrow(::google::protobuf::int32 value);
  
  // required int32 MGCGrow = 13;
  inline bool has_mgcgrow() const;
  inline void clear_mgcgrow();
  static const int kMGCGrowFieldNumber = 13;
  inline ::google::protobuf::int32 mgcgrow() const;
  inline void set_mgcgrow(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBCard)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_cardlevel();
  inline void clear_has_cardlevel();
  inline void set_has_cardexp();
  inline void clear_has_cardexp();
  inline void set_has_skillexp();
  inline void clear_has_skillexp();
  inline void set_has_skilllevel();
  inline void clear_has_skilllevel();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_battleposition();
  inline void clear_has_battleposition();
  inline void set_has_vtlgrow();
  inline void clear_has_vtlgrow();
  inline void set_has_strgrow();
  inline void clear_has_strgrow();
  inline void set_has_tghgrow();
  inline void clear_has_tghgrow();
  inline void set_has_quigrow();
  inline void clear_has_quigrow();
  inline void set_has_mgcgrow();
  inline void clear_has_mgcgrow();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 cardid_;
  ::google::protobuf::int32 cardlevel_;
  ::google::protobuf::int32 cardexp_;
  ::google::protobuf::int32 skillexp_;
  ::google::protobuf::int32 skilllevel_;
  ::google::protobuf::int32 weaponid_;
  ::google::protobuf::int32 battleposition_;
  ::google::protobuf::int32 vtlgrow_;
  ::google::protobuf::int32 strgrow_;
  ::google::protobuf::int32 tghgrow_;
  ::google::protobuf::int32 quigrow_;
  ::google::protobuf::int32 mgcgrow_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCard* default_instance_;
};
// -------------------------------------------------------------------

class PBAllCard : public ::google::protobuf::Message {
 public:
  PBAllCard();
  virtual ~PBAllCard();
  
  PBAllCard(const PBAllCard& from);
  
  inline PBAllCard& operator=(const PBAllCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAllCard& default_instance();
  
  void Swap(PBAllCard* other);
  
  // implements Message ----------------------------------------------
  
  PBAllCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAllCard& from);
  void MergeFrom(const PBAllCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBCard allCard = 1;
  inline int allcard_size() const;
  inline void clear_allcard();
  static const int kAllCardFieldNumber = 1;
  inline const ::PBCard& allcard(int index) const;
  inline ::PBCard* mutable_allcard(int index);
  inline ::PBCard* add_allcard();
  inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
      allcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
      mutable_allcard();
  
  // @@protoc_insertion_point(class_scope:PBAllCard)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBCard > allcard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAllCard* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleCard : public ::google::protobuf::Message {
 public:
  PBBattleCard();
  virtual ~PBBattleCard();
  
  PBBattleCard(const PBBattleCard& from);
  
  inline PBBattleCard& operator=(const PBBattleCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleCard& default_instance();
  
  void Swap(PBBattleCard* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleCard& from);
  void MergeFrom(const PBBattleCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBCard battleCard = 1;
  inline int battlecard_size() const;
  inline void clear_battlecard();
  static const int kBattleCardFieldNumber = 1;
  inline const ::PBCard& battlecard(int index) const;
  inline ::PBCard* mutable_battlecard(int index);
  inline ::PBCard* add_battlecard();
  inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
      battlecard() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
      mutable_battlecard();
  
  // @@protoc_insertion_point(class_scope:PBBattleCard)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBCard > battlecard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleCard* default_instance_;
};
// -------------------------------------------------------------------

class PBFriend : public ::google::protobuf::Message {
 public:
  PBFriend();
  virtual ~PBFriend();
  
  PBFriend(const PBFriend& from);
  
  inline PBFriend& operator=(const PBFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFriend& default_instance();
  
  void Swap(PBFriend* other);
  
  // implements Message ----------------------------------------------
  
  PBFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFriend& from);
  void MergeFrom(const PBFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 friendID = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIDFieldNumber = 1;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);
  
  // required string friendName = 2;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 2;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  
  // required int32 friendLevel = 3;
  inline bool has_friendlevel() const;
  inline void clear_friendlevel();
  static const int kFriendLevelFieldNumber = 3;
  inline ::google::protobuf::int32 friendlevel() const;
  inline void set_friendlevel(::google::protobuf::int32 value);
  
  // required .PBCard friendCard = 4;
  inline bool has_friendcard() const;
  inline void clear_friendcard();
  static const int kFriendCardFieldNumber = 4;
  inline const ::PBCard& friendcard() const;
  inline ::PBCard* mutable_friendcard();
  inline ::PBCard* release_friendcard();
  
  // optional int32 FriendStatus = 5;
  inline bool has_friendstatus() const;
  inline void clear_friendstatus();
  static const int kFriendStatusFieldNumber = 5;
  inline ::google::protobuf::int32 friendstatus() const;
  inline void set_friendstatus(::google::protobuf::int32 value);
  
  // optional bool isFriend = 6;
  inline bool has_isfriend() const;
  inline void clear_isfriend();
  static const int kIsFriendFieldNumber = 6;
  inline bool isfriend() const;
  inline void set_isfriend(bool value);
  
  // @@protoc_insertion_point(class_scope:PBFriend)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_friendlevel();
  inline void clear_has_friendlevel();
  inline void set_has_friendcard();
  inline void clear_has_friendcard();
  inline void set_has_friendstatus();
  inline void clear_has_friendstatus();
  inline void set_has_isfriend();
  inline void clear_has_isfriend();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* friendname_;
  ::google::protobuf::int32 friendid_;
  ::google::protobuf::int32 friendlevel_;
  ::PBCard* friendcard_;
  ::google::protobuf::int32 friendstatus_;
  bool isfriend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBFriend* default_instance_;
};
// -------------------------------------------------------------------

class PBAllFriend : public ::google::protobuf::Message {
 public:
  PBAllFriend();
  virtual ~PBAllFriend();
  
  PBAllFriend(const PBAllFriend& from);
  
  inline PBAllFriend& operator=(const PBAllFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAllFriend& default_instance();
  
  void Swap(PBAllFriend* other);
  
  // implements Message ----------------------------------------------
  
  PBAllFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAllFriend& from);
  void MergeFrom(const PBAllFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFriend allFriend = 1;
  inline int allfriend_size() const;
  inline void clear_allfriend();
  static const int kAllFriendFieldNumber = 1;
  inline const ::PBFriend& allfriend(int index) const;
  inline ::PBFriend* mutable_allfriend(int index);
  inline ::PBFriend* add_allfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
      allfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
      mutable_allfriend();
  
  // @@protoc_insertion_point(class_scope:PBAllFriend)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFriend > allfriend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAllFriend* default_instance_;
};
// -------------------------------------------------------------------

class PBHelpFriend : public ::google::protobuf::Message {
 public:
  PBHelpFriend();
  virtual ~PBHelpFriend();
  
  PBHelpFriend(const PBHelpFriend& from);
  
  inline PBHelpFriend& operator=(const PBHelpFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBHelpFriend& default_instance();
  
  void Swap(PBHelpFriend* other);
  
  // implements Message ----------------------------------------------
  
  PBHelpFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBHelpFriend& from);
  void MergeFrom(const PBHelpFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFriend helpFriend = 1;
  inline int helpfriend_size() const;
  inline void clear_helpfriend();
  static const int kHelpFriendFieldNumber = 1;
  inline const ::PBFriend& helpfriend(int index) const;
  inline ::PBFriend* mutable_helpfriend(int index);
  inline ::PBFriend* add_helpfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
      helpfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
      mutable_helpfriend();
  
  // @@protoc_insertion_point(class_scope:PBHelpFriend)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFriend > helpfriend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBHelpFriend* default_instance_;
};
// -------------------------------------------------------------------

class PBWaitingFriend : public ::google::protobuf::Message {
 public:
  PBWaitingFriend();
  virtual ~PBWaitingFriend();
  
  PBWaitingFriend(const PBWaitingFriend& from);
  
  inline PBWaitingFriend& operator=(const PBWaitingFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBWaitingFriend& default_instance();
  
  void Swap(PBWaitingFriend* other);
  
  // implements Message ----------------------------------------------
  
  PBWaitingFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBWaitingFriend& from);
  void MergeFrom(const PBWaitingFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBFriend waitingFriend = 1;
  inline int waitingfriend_size() const;
  inline void clear_waitingfriend();
  static const int kWaitingFriendFieldNumber = 1;
  inline const ::PBFriend& waitingfriend(int index) const;
  inline ::PBFriend* mutable_waitingfriend(int index);
  inline ::PBFriend* add_waitingfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
      waitingfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
      mutable_waitingfriend();
  
  // @@protoc_insertion_point(class_scope:PBWaitingFriend)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBFriend > waitingfriend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBWaitingFriend* default_instance_;
};
// -------------------------------------------------------------------

class PBFriendSend : public ::google::protobuf::Message {
 public:
  PBFriendSend();
  virtual ~PBFriendSend();
  
  PBFriendSend(const PBFriendSend& from);
  
  inline PBFriendSend& operator=(const PBFriendSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFriendSend& default_instance();
  
  void Swap(PBFriendSend* other);
  
  // implements Message ----------------------------------------------
  
  PBFriendSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFriendSend& from);
  void MergeFrom(const PBFriendSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 friendID = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIDFieldNumber = 1;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBFriendSend)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 friendid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBFriendSend* default_instance_;
};
// -------------------------------------------------------------------

class PBFriendAgreeReceive : public ::google::protobuf::Message {
 public:
  PBFriendAgreeReceive();
  virtual ~PBFriendAgreeReceive();
  
  PBFriendAgreeReceive(const PBFriendAgreeReceive& from);
  
  inline PBFriendAgreeReceive& operator=(const PBFriendAgreeReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFriendAgreeReceive& default_instance();
  
  void Swap(PBFriendAgreeReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBFriendAgreeReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFriendAgreeReceive& from);
  void MergeFrom(const PBFriendAgreeReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 agreeResult = 1;
  inline bool has_agreeresult() const;
  inline void clear_agreeresult();
  static const int kAgreeResultFieldNumber = 1;
  inline ::google::protobuf::int32 agreeresult() const;
  inline void set_agreeresult(::google::protobuf::int32 value);
  
  // optional .PBWaitingFriend waitings = 2;
  inline bool has_waitings() const;
  inline void clear_waitings();
  static const int kWaitingsFieldNumber = 2;
  inline const ::PBWaitingFriend& waitings() const;
  inline ::PBWaitingFriend* mutable_waitings();
  inline ::PBWaitingFriend* release_waitings();
  
  // optional .PBAllFriend friends = 3;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 3;
  inline const ::PBAllFriend& friends() const;
  inline ::PBAllFriend* mutable_friends();
  inline ::PBAllFriend* release_friends();
  
  // @@protoc_insertion_point(class_scope:PBFriendAgreeReceive)
 private:
  inline void set_has_agreeresult();
  inline void clear_has_agreeresult();
  inline void set_has_waitings();
  inline void clear_has_waitings();
  inline void set_has_friends();
  inline void clear_has_friends();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBWaitingFriend* waitings_;
  ::PBAllFriend* friends_;
  ::google::protobuf::int32 agreeresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBFriendAgreeReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBAddFriendReceive : public ::google::protobuf::Message {
 public:
  PBAddFriendReceive();
  virtual ~PBAddFriendReceive();
  
  PBAddFriendReceive(const PBAddFriendReceive& from);
  
  inline PBAddFriendReceive& operator=(const PBAddFriendReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAddFriendReceive& default_instance();
  
  void Swap(PBAddFriendReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBAddFriendReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAddFriendReceive& from);
  void MergeFrom(const PBAddFriendReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 addResult = 1;
  inline bool has_addresult() const;
  inline void clear_addresult();
  static const int kAddResultFieldNumber = 1;
  inline ::google::protobuf::int32 addresult() const;
  inline void set_addresult(::google::protobuf::int32 value);
  
  // optional .PBAllFriend friends = 2;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 2;
  inline const ::PBAllFriend& friends() const;
  inline ::PBAllFriend* mutable_friends();
  inline ::PBAllFriend* release_friends();
  
  // @@protoc_insertion_point(class_scope:PBAddFriendReceive)
 private:
  inline void set_has_addresult();
  inline void clear_has_addresult();
  inline void set_has_friends();
  inline void clear_has_friends();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllFriend* friends_;
  ::google::protobuf::int32 addresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAddFriendReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBBattle : public ::google::protobuf::Message {
 public:
  PBBattle();
  virtual ~PBBattle();
  
  PBBattle(const PBBattle& from);
  
  inline PBBattle& operator=(const PBBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattle& default_instance();
  
  void Swap(PBBattle* other);
  
  // implements Message ----------------------------------------------
  
  PBBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattle& from);
  void MergeFrom(const PBBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string pveProgress = 11;
  inline bool has_pveprogress() const;
  inline void clear_pveprogress();
  static const int kPveProgressFieldNumber = 11;
  inline const ::std::string& pveprogress() const;
  inline void set_pveprogress(const ::std::string& value);
  inline void set_pveprogress(const char* value);
  inline void set_pveprogress(const char* value, size_t size);
  inline ::std::string* mutable_pveprogress();
  inline ::std::string* release_pveprogress();
  
  // required int32 activityPveNum = 13;
  inline bool has_activitypvenum() const;
  inline void clear_activitypvenum();
  static const int kActivityPveNumFieldNumber = 13;
  inline ::google::protobuf::int32 activitypvenum() const;
  inline void set_activitypvenum(::google::protobuf::int32 value);
  
  // repeated int32 allActivityPveID = 14;
  inline int allactivitypveid_size() const;
  inline void clear_allactivitypveid();
  static const int kAllActivityPveIDFieldNumber = 14;
  inline ::google::protobuf::int32 allactivitypveid(int index) const;
  inline void set_allactivitypveid(int index, ::google::protobuf::int32 value);
  inline void add_allactivitypveid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      allactivitypveid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_allactivitypveid();
  
  // @@protoc_insertion_point(class_scope:PBBattle)
 private:
  inline void set_has_pveprogress();
  inline void clear_has_pveprogress();
  inline void set_has_activitypvenum();
  inline void clear_has_activitypvenum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pveprogress_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > allactivitypveid_;
  ::google::protobuf::int32 activitypvenum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattle* default_instance_;
};
// -------------------------------------------------------------------

class PBMission : public ::google::protobuf::Message {
 public:
  PBMission();
  virtual ~PBMission();
  
  PBMission(const PBMission& from);
  
  inline PBMission& operator=(const PBMission& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMission& default_instance();
  
  void Swap(PBMission* other);
  
  // implements Message ----------------------------------------------
  
  PBMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMission& from);
  void MergeFrom(const PBMission& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 missionID = 1;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionIDFieldNumber = 1;
  inline ::google::protobuf::int32 missionid() const;
  inline void set_missionid(::google::protobuf::int32 value);
  
  // required bool isMissinFinished = 2;
  inline bool has_ismissinfinished() const;
  inline void clear_ismissinfinished();
  static const int kIsMissinFinishedFieldNumber = 2;
  inline bool ismissinfinished() const;
  inline void set_ismissinfinished(bool value);
  
  // optional string missonProgress = 3;
  inline bool has_missonprogress() const;
  inline void clear_missonprogress();
  static const int kMissonProgressFieldNumber = 3;
  inline const ::std::string& missonprogress() const;
  inline void set_missonprogress(const ::std::string& value);
  inline void set_missonprogress(const char* value);
  inline void set_missonprogress(const char* value, size_t size);
  inline ::std::string* mutable_missonprogress();
  inline ::std::string* release_missonprogress();
  
  // @@protoc_insertion_point(class_scope:PBMission)
 private:
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_ismissinfinished();
  inline void clear_has_ismissinfinished();
  inline void set_has_missonprogress();
  inline void clear_has_missonprogress();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 missionid_;
  bool ismissinfinished_;
  ::std::string* missonprogress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMission* default_instance_;
};
// -------------------------------------------------------------------

class PBAllMission : public ::google::protobuf::Message {
 public:
  PBAllMission();
  virtual ~PBAllMission();
  
  PBAllMission(const PBAllMission& from);
  
  inline PBAllMission& operator=(const PBAllMission& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAllMission& default_instance();
  
  void Swap(PBAllMission* other);
  
  // implements Message ----------------------------------------------
  
  PBAllMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAllMission& from);
  void MergeFrom(const PBAllMission& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBMission allMission = 1;
  inline int allmission_size() const;
  inline void clear_allmission();
  static const int kAllMissionFieldNumber = 1;
  inline const ::PBMission& allmission(int index) const;
  inline ::PBMission* mutable_allmission(int index);
  inline ::PBMission* add_allmission();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMission >&
      allmission() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMission >*
      mutable_allmission();
  
  // @@protoc_insertion_point(class_scope:PBAllMission)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBMission > allmission_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAllMission* default_instance_;
};
// -------------------------------------------------------------------

class PBMissionAwardSend : public ::google::protobuf::Message {
 public:
  PBMissionAwardSend();
  virtual ~PBMissionAwardSend();
  
  PBMissionAwardSend(const PBMissionAwardSend& from);
  
  inline PBMissionAwardSend& operator=(const PBMissionAwardSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMissionAwardSend& default_instance();
  
  void Swap(PBMissionAwardSend* other);
  
  // implements Message ----------------------------------------------
  
  PBMissionAwardSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMissionAwardSend& from);
  void MergeFrom(const PBMissionAwardSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 missionID = 1;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionIDFieldNumber = 1;
  inline ::google::protobuf::int32 missionid() const;
  inline void set_missionid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBMissionAwardSend)
 private:
  inline void set_has_missionid();
  inline void clear_has_missionid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 missionid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMissionAwardSend* default_instance_;
};
// -------------------------------------------------------------------

class PBUser : public ::google::protobuf::Message {
 public:
  PBUser();
  virtual ~PBUser();
  
  PBUser(const PBUser& from);
  
  inline PBUser& operator=(const PBUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUser& default_instance();
  
  void Swap(PBUser* other);
  
  // implements Message ----------------------------------------------
  
  PBUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUser& from);
  void MergeFrom(const PBUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);
  
  // required string userName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required int32 userLevel = 3;
  inline bool has_userlevel() const;
  inline void clear_userlevel();
  static const int kUserLevelFieldNumber = 3;
  inline ::google::protobuf::int32 userlevel() const;
  inline void set_userlevel(::google::protobuf::int32 value);
  
  // required int32 userExp = 4;
  inline bool has_userexp() const;
  inline void clear_userexp();
  static const int kUserExpFieldNumber = 4;
  inline ::google::protobuf::int32 userexp() const;
  inline void set_userexp(::google::protobuf::int32 value);
  
  // required int32 energy = 5;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 5;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);
  
  // required int32 nextEnergyTime = 6;
  inline bool has_nextenergytime() const;
  inline void clear_nextenergytime();
  static const int kNextEnergyTimeFieldNumber = 6;
  inline ::google::protobuf::int32 nextenergytime() const;
  inline void set_nextenergytime(::google::protobuf::int32 value);
  
  // required int32 buyEnergyTime = 7;
  inline bool has_buyenergytime() const;
  inline void clear_buyenergytime();
  static const int kBuyEnergyTimeFieldNumber = 7;
  inline ::google::protobuf::int32 buyenergytime() const;
  inline void set_buyenergytime(::google::protobuf::int32 value);
  
  // required int32 diamondNumber = 8;
  inline bool has_diamondnumber() const;
  inline void clear_diamondnumber();
  static const int kDiamondNumberFieldNumber = 8;
  inline ::google::protobuf::int32 diamondnumber() const;
  inline void set_diamondnumber(::google::protobuf::int32 value);
  
  // required int32 friendValue = 9;
  inline bool has_friendvalue() const;
  inline void clear_friendvalue();
  static const int kFriendValueFieldNumber = 9;
  inline ::google::protobuf::int32 friendvalue() const;
  inline void set_friendvalue(::google::protobuf::int32 value);
  
  // required int32 goldNumber = 10;
  inline bool has_goldnumber() const;
  inline void clear_goldnumber();
  static const int kGoldNumberFieldNumber = 10;
  inline ::google::protobuf::int32 goldnumber() const;
  inline void set_goldnumber(::google::protobuf::int32 value);
  
  // required int32 leaderValue = 11;
  inline bool has_leadervalue() const;
  inline void clear_leadervalue();
  static const int kLeaderValueFieldNumber = 11;
  inline ::google::protobuf::int32 leadervalue() const;
  inline void set_leadervalue(::google::protobuf::int32 value);
  
  // required bool hasMissionFinished = 12;
  inline bool has_hasmissionfinished() const;
  inline void clear_hasmissionfinished();
  static const int kHasMissionFinishedFieldNumber = 12;
  inline bool hasmissionfinished() const;
  inline void set_hasmissionfinished(bool value);
  
  // @@protoc_insertion_point(class_scope:PBUser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userlevel();
  inline void clear_has_userlevel();
  inline void set_has_userexp();
  inline void clear_has_userexp();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_nextenergytime();
  inline void clear_has_nextenergytime();
  inline void set_has_buyenergytime();
  inline void clear_has_buyenergytime();
  inline void set_has_diamondnumber();
  inline void clear_has_diamondnumber();
  inline void set_has_friendvalue();
  inline void clear_has_friendvalue();
  inline void set_has_goldnumber();
  inline void clear_has_goldnumber();
  inline void set_has_leadervalue();
  inline void clear_has_leadervalue();
  inline void set_has_hasmissionfinished();
  inline void clear_has_hasmissionfinished();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 userlevel_;
  ::google::protobuf::int32 userexp_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 nextenergytime_;
  ::google::protobuf::int32 buyenergytime_;
  ::google::protobuf::int32 diamondnumber_;
  ::google::protobuf::int32 friendvalue_;
  ::google::protobuf::int32 goldnumber_;
  ::google::protobuf::int32 leadervalue_;
  bool hasmissionfinished_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBUser* default_instance_;
};
// -------------------------------------------------------------------

class PBMissionAwardReceive : public ::google::protobuf::Message {
 public:
  PBMissionAwardReceive();
  virtual ~PBMissionAwardReceive();
  
  PBMissionAwardReceive(const PBMissionAwardReceive& from);
  
  inline PBMissionAwardReceive& operator=(const PBMissionAwardReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMissionAwardReceive& default_instance();
  
  void Swap(PBMissionAwardReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBMissionAwardReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMissionAwardReceive& from);
  void MergeFrom(const PBMissionAwardReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .PBUser user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // optional .PBAllCard cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // @@protoc_insertion_point(class_scope:PBMissionAwardReceive)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_cards();
  inline void clear_has_cards();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  ::PBAllCard* cards_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBMissionAwardReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBRunningAfficheReceive : public ::google::protobuf::Message {
 public:
  PBRunningAfficheReceive();
  virtual ~PBRunningAfficheReceive();
  
  PBRunningAfficheReceive(const PBRunningAfficheReceive& from);
  
  inline PBRunningAfficheReceive& operator=(const PBRunningAfficheReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRunningAfficheReceive& default_instance();
  
  void Swap(PBRunningAfficheReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBRunningAfficheReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRunningAfficheReceive& from);
  void MergeFrom(const PBRunningAfficheReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string affiches = 1;
  inline int affiches_size() const;
  inline void clear_affiches();
  static const int kAffichesFieldNumber = 1;
  inline const ::std::string& affiches(int index) const;
  inline ::std::string* mutable_affiches(int index);
  inline void set_affiches(int index, const ::std::string& value);
  inline void set_affiches(int index, const char* value);
  inline void set_affiches(int index, const char* value, size_t size);
  inline ::std::string* add_affiches();
  inline void add_affiches(const ::std::string& value);
  inline void add_affiches(const char* value);
  inline void add_affiches(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& affiches() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_affiches();
  
  // @@protoc_insertion_point(class_scope:PBRunningAfficheReceive)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> affiches_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBRunningAfficheReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBAwardReceive : public ::google::protobuf::Message {
 public:
  PBAwardReceive();
  virtual ~PBAwardReceive();
  
  PBAwardReceive(const PBAwardReceive& from);
  
  inline PBAwardReceive& operator=(const PBAwardReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAwardReceive& default_instance();
  
  void Swap(PBAwardReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBAwardReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAwardReceive& from);
  void MergeFrom(const PBAwardReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 awardResult = 1;
  inline bool has_awardresult() const;
  inline void clear_awardresult();
  static const int kAwardResultFieldNumber = 1;
  inline ::google::protobuf::int32 awardresult() const;
  inline void set_awardresult(::google::protobuf::int32 value);
  
  // optional .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // optional .PBAllCard cards = 3;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // @@protoc_insertion_point(class_scope:PBAwardReceive)
 private:
  inline void set_has_awardresult();
  inline void clear_has_awardresult();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_cards();
  inline void clear_has_cards();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  ::PBAllCard* cards_;
  ::google::protobuf::int32 awardresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBAwardReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBBuyEnergyReceive : public ::google::protobuf::Message {
 public:
  PBBuyEnergyReceive();
  virtual ~PBBuyEnergyReceive();
  
  PBBuyEnergyReceive(const PBBuyEnergyReceive& from);
  
  inline PBBuyEnergyReceive& operator=(const PBBuyEnergyReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBuyEnergyReceive& default_instance();
  
  void Swap(PBBuyEnergyReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBBuyEnergyReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBuyEnergyReceive& from);
  void MergeFrom(const PBBuyEnergyReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 buyResult = 1;
  inline bool has_buyresult() const;
  inline void clear_buyresult();
  static const int kBuyResultFieldNumber = 1;
  inline ::google::protobuf::int32 buyresult() const;
  inline void set_buyresult(::google::protobuf::int32 value);
  
  // optional .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // @@protoc_insertion_point(class_scope:PBBuyEnergyReceive)
 private:
  inline void set_has_buyresult();
  inline void clear_has_buyresult();
  inline void set_has_user();
  inline void clear_has_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  ::google::protobuf::int32 buyresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBuyEnergyReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBRegisterSend : public ::google::protobuf::Message {
 public:
  PBRegisterSend();
  virtual ~PBRegisterSend();
  
  PBRegisterSend(const PBRegisterSend& from);
  
  inline PBRegisterSend& operator=(const PBRegisterSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRegisterSend& default_instance();
  
  void Swap(PBRegisterSend* other);
  
  // implements Message ----------------------------------------------
  
  PBRegisterSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRegisterSend& from);
  void MergeFrom(const PBRegisterSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string macAddress = 1;
  inline bool has_macaddress() const;
  inline void clear_macaddress();
  static const int kMacAddressFieldNumber = 1;
  inline const ::std::string& macaddress() const;
  inline void set_macaddress(const ::std::string& value);
  inline void set_macaddress(const char* value);
  inline void set_macaddress(const char* value, size_t size);
  inline ::std::string* mutable_macaddress();
  inline ::std::string* release_macaddress();
  
  // required string userName = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // @@protoc_insertion_point(class_scope:PBRegisterSend)
 private:
  inline void set_has_macaddress();
  inline void clear_has_macaddress();
  inline void set_has_username();
  inline void clear_has_username();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* macaddress_;
  ::std::string* username_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBRegisterSend* default_instance_;
};
// -------------------------------------------------------------------

class PBLoginSend : public ::google::protobuf::Message {
 public:
  PBLoginSend();
  virtual ~PBLoginSend();
  
  PBLoginSend(const PBLoginSend& from);
  
  inline PBLoginSend& operator=(const PBLoginSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBLoginSend& default_instance();
  
  void Swap(PBLoginSend* other);
  
  // implements Message ----------------------------------------------
  
  PBLoginSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBLoginSend& from);
  void MergeFrom(const PBLoginSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string macAddress = 1;
  inline bool has_macaddress() const;
  inline void clear_macaddress();
  static const int kMacAddressFieldNumber = 1;
  inline const ::std::string& macaddress() const;
  inline void set_macaddress(const ::std::string& value);
  inline void set_macaddress(const char* value);
  inline void set_macaddress(const char* value, size_t size);
  inline ::std::string* mutable_macaddress();
  inline ::std::string* release_macaddress();
  
  // @@protoc_insertion_point(class_scope:PBLoginSend)
 private:
  inline void set_has_macaddress();
  inline void clear_has_macaddress();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* macaddress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBLoginSend* default_instance_;
};
// -------------------------------------------------------------------

class PBLoginReceive : public ::google::protobuf::Message {
 public:
  PBLoginReceive();
  virtual ~PBLoginReceive();
  
  PBLoginReceive(const PBLoginReceive& from);
  
  inline PBLoginReceive& operator=(const PBLoginReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBLoginReceive& default_instance();
  
  void Swap(PBLoginReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBLoginReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBLoginReceive& from);
  void MergeFrom(const PBLoginReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool isRegisterSucceed = 1;
  inline bool has_isregistersucceed() const;
  inline void clear_isregistersucceed();
  static const int kIsRegisterSucceedFieldNumber = 1;
  inline bool isregistersucceed() const;
  inline void set_isregistersucceed(bool value);
  
  // required .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // required .PBBattle battle = 3;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 3;
  inline const ::PBBattle& battle() const;
  inline ::PBBattle* mutable_battle();
  inline ::PBBattle* release_battle();
  
  // required .PBAllCard cards = 4;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 4;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // required .PBAllMission missions = 5;
  inline bool has_missions() const;
  inline void clear_missions();
  static const int kMissionsFieldNumber = 5;
  inline const ::PBAllMission& missions() const;
  inline ::PBAllMission* mutable_missions();
  inline ::PBAllMission* release_missions();
  
  // required .PBBattleCard battleCards = 6;
  inline bool has_battlecards() const;
  inline void clear_battlecards();
  static const int kBattleCardsFieldNumber = 6;
  inline const ::PBBattleCard& battlecards() const;
  inline ::PBBattleCard* mutable_battlecards();
  inline ::PBBattleCard* release_battlecards();
  
  // required .PBAllFriend friends = 7;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 7;
  inline const ::PBAllFriend& friends() const;
  inline ::PBAllFriend* mutable_friends();
  inline ::PBAllFriend* release_friends();
  
  // required .PBHelpFriend helps = 8;
  inline bool has_helps() const;
  inline void clear_helps();
  static const int kHelpsFieldNumber = 8;
  inline const ::PBHelpFriend& helps() const;
  inline ::PBHelpFriend* mutable_helps();
  inline ::PBHelpFriend* release_helps();
  
  // required .PBWaitingFriend waitings = 9;
  inline bool has_waitings() const;
  inline void clear_waitings();
  static const int kWaitingsFieldNumber = 9;
  inline const ::PBWaitingFriend& waitings() const;
  inline ::PBWaitingFriend* mutable_waitings();
  inline ::PBWaitingFriend* release_waitings();
  
  // required string token = 10;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 10;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // @@protoc_insertion_point(class_scope:PBLoginReceive)
 private:
  inline void set_has_isregistersucceed();
  inline void clear_has_isregistersucceed();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_missions();
  inline void clear_has_missions();
  inline void set_has_battlecards();
  inline void clear_has_battlecards();
  inline void set_has_friends();
  inline void clear_has_friends();
  inline void set_has_helps();
  inline void clear_has_helps();
  inline void set_has_waitings();
  inline void clear_has_waitings();
  inline void set_has_token();
  inline void clear_has_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBUser* user_;
  ::PBBattle* battle_;
  ::PBAllCard* cards_;
  ::PBAllMission* missions_;
  ::PBBattleCard* battlecards_;
  ::PBAllFriend* friends_;
  ::PBHelpFriend* helps_;
  ::PBWaitingFriend* waitings_;
  ::std::string* token_;
  bool isregistersucceed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBLoginReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBCardLevelUpSend : public ::google::protobuf::Message {
 public:
  PBCardLevelUpSend();
  virtual ~PBCardLevelUpSend();
  
  PBCardLevelUpSend(const PBCardLevelUpSend& from);
  
  inline PBCardLevelUpSend& operator=(const PBCardLevelUpSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardLevelUpSend& default_instance();
  
  void Swap(PBCardLevelUpSend* other);
  
  // implements Message ----------------------------------------------
  
  PBCardLevelUpSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardLevelUpSend& from);
  void MergeFrom(const PBCardLevelUpSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 upCardItemID = 1;
  inline bool has_upcarditemid() const;
  inline void clear_upcarditemid();
  static const int kUpCardItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 upcarditemid() const;
  inline void set_upcarditemid(::google::protobuf::int32 value);
  
  // repeated int32 eatCardItemIDs = 2;
  inline int eatcarditemids_size() const;
  inline void clear_eatcarditemids();
  static const int kEatCardItemIDsFieldNumber = 2;
  inline ::google::protobuf::int32 eatcarditemids(int index) const;
  inline void set_eatcarditemids(int index, ::google::protobuf::int32 value);
  inline void add_eatcarditemids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      eatcarditemids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_eatcarditemids();
  
  // @@protoc_insertion_point(class_scope:PBCardLevelUpSend)
 private:
  inline void set_has_upcarditemid();
  inline void clear_has_upcarditemid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > eatcarditemids_;
  ::google::protobuf::int32 upcarditemid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardLevelUpSend* default_instance_;
};
// -------------------------------------------------------------------

class PBCardLevelUpReceive : public ::google::protobuf::Message {
 public:
  PBCardLevelUpReceive();
  virtual ~PBCardLevelUpReceive();
  
  PBCardLevelUpReceive(const PBCardLevelUpReceive& from);
  
  inline PBCardLevelUpReceive& operator=(const PBCardLevelUpReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardLevelUpReceive& default_instance();
  
  void Swap(PBCardLevelUpReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBCardLevelUpReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardLevelUpReceive& from);
  void MergeFrom(const PBCardLevelUpReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 upResult = 1;
  inline bool has_upresult() const;
  inline void clear_upresult();
  static const int kUpResultFieldNumber = 1;
  inline ::google::protobuf::int32 upresult() const;
  inline void set_upresult(::google::protobuf::int32 value);
  
  // optional .PBAllCard cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // optional int32 goldNumber = 3;
  inline bool has_goldnumber() const;
  inline void clear_goldnumber();
  static const int kGoldNumberFieldNumber = 3;
  inline ::google::protobuf::int32 goldnumber() const;
  inline void set_goldnumber(::google::protobuf::int32 value);
  
  // optional .PBCard targetCard = 4;
  inline bool has_targetcard() const;
  inline void clear_targetcard();
  static const int kTargetCardFieldNumber = 4;
  inline const ::PBCard& targetcard() const;
  inline ::PBCard* mutable_targetcard();
  inline ::PBCard* release_targetcard();
  
  // @@protoc_insertion_point(class_scope:PBCardLevelUpReceive)
 private:
  inline void set_has_upresult();
  inline void clear_has_upresult();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_goldnumber();
  inline void clear_has_goldnumber();
  inline void set_has_targetcard();
  inline void clear_has_targetcard();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllCard* cards_;
  ::google::protobuf::int32 upresult_;
  ::google::protobuf::int32 goldnumber_;
  ::PBCard* targetcard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardLevelUpReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBCardEvolutionSend : public ::google::protobuf::Message {
 public:
  PBCardEvolutionSend();
  virtual ~PBCardEvolutionSend();
  
  PBCardEvolutionSend(const PBCardEvolutionSend& from);
  
  inline PBCardEvolutionSend& operator=(const PBCardEvolutionSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardEvolutionSend& default_instance();
  
  void Swap(PBCardEvolutionSend* other);
  
  // implements Message ----------------------------------------------
  
  PBCardEvolutionSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardEvolutionSend& from);
  void MergeFrom(const PBCardEvolutionSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 evolutionResult = 1;
  inline bool has_evolutionresult() const;
  inline void clear_evolutionresult();
  static const int kEvolutionResultFieldNumber = 1;
  inline ::google::protobuf::int32 evolutionresult() const;
  inline void set_evolutionresult(::google::protobuf::int32 value);
  
  // optional .PBCard targetCard = 2;
  inline bool has_targetcard() const;
  inline void clear_targetcard();
  static const int kTargetCardFieldNumber = 2;
  inline const ::PBCard& targetcard() const;
  inline ::PBCard* mutable_targetcard();
  inline ::PBCard* release_targetcard();
  
  // optional .PBAllCard cards = 3;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // @@protoc_insertion_point(class_scope:PBCardEvolutionSend)
 private:
  inline void set_has_evolutionresult();
  inline void clear_has_evolutionresult();
  inline void set_has_targetcard();
  inline void clear_has_targetcard();
  inline void set_has_cards();
  inline void clear_has_cards();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCard* targetcard_;
  ::PBAllCard* cards_;
  ::google::protobuf::int32 evolutionresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardEvolutionSend* default_instance_;
};
// -------------------------------------------------------------------

class PBSkillLevelUpSend : public ::google::protobuf::Message {
 public:
  PBSkillLevelUpSend();
  virtual ~PBSkillLevelUpSend();
  
  PBSkillLevelUpSend(const PBSkillLevelUpSend& from);
  
  inline PBSkillLevelUpSend& operator=(const PBSkillLevelUpSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSkillLevelUpSend& default_instance();
  
  void Swap(PBSkillLevelUpSend* other);
  
  // implements Message ----------------------------------------------
  
  PBSkillLevelUpSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSkillLevelUpSend& from);
  void MergeFrom(const PBSkillLevelUpSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 upCardItemID = 1;
  inline bool has_upcarditemid() const;
  inline void clear_upcarditemid();
  static const int kUpCardItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 upcarditemid() const;
  inline void set_upcarditemid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBSkillLevelUpSend)
 private:
  inline void set_has_upcarditemid();
  inline void clear_has_upcarditemid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 upcarditemid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSkillLevelUpSend* default_instance_;
};
// -------------------------------------------------------------------

class PBSkillLevelUpReceive : public ::google::protobuf::Message {
 public:
  PBSkillLevelUpReceive();
  virtual ~PBSkillLevelUpReceive();
  
  PBSkillLevelUpReceive(const PBSkillLevelUpReceive& from);
  
  inline PBSkillLevelUpReceive& operator=(const PBSkillLevelUpReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSkillLevelUpReceive& default_instance();
  
  void Swap(PBSkillLevelUpReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBSkillLevelUpReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSkillLevelUpReceive& from);
  void MergeFrom(const PBSkillLevelUpReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 skillUpResult = 1;
  inline bool has_skillupresult() const;
  inline void clear_skillupresult();
  static const int kSkillUpResultFieldNumber = 1;
  inline ::google::protobuf::int32 skillupresult() const;
  inline void set_skillupresult(::google::protobuf::int32 value);
  
  // optional .PBCard targetCard = 2;
  inline bool has_targetcard() const;
  inline void clear_targetcard();
  static const int kTargetCardFieldNumber = 2;
  inline const ::PBCard& targetcard() const;
  inline ::PBCard* mutable_targetcard();
  inline ::PBCard* release_targetcard();
  
  // optional .PBAllCard cards = 3;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // @@protoc_insertion_point(class_scope:PBSkillLevelUpReceive)
 private:
  inline void set_has_skillupresult();
  inline void clear_has_skillupresult();
  inline void set_has_targetcard();
  inline void clear_has_targetcard();
  inline void set_has_cards();
  inline void clear_has_cards();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBCard* targetcard_;
  ::PBAllCard* cards_;
  ::google::protobuf::int32 skillupresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSkillLevelUpReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBCardFormSend : public ::google::protobuf::Message {
 public:
  PBCardFormSend();
  virtual ~PBCardFormSend();
  
  PBCardFormSend(const PBCardFormSend& from);
  
  inline PBCardFormSend& operator=(const PBCardFormSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardFormSend& default_instance();
  
  void Swap(PBCardFormSend* other);
  
  // implements Message ----------------------------------------------
  
  PBCardFormSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardFormSend& from);
  void MergeFrom(const PBCardFormSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 captainCardID = 1;
  inline bool has_captaincardid() const;
  inline void clear_captaincardid();
  static const int kCaptainCardIDFieldNumber = 1;
  inline ::google::protobuf::int32 captaincardid() const;
  inline void set_captaincardid(::google::protobuf::int32 value);
  
  // optional int32 cardOneID = 2;
  inline bool has_cardoneid() const;
  inline void clear_cardoneid();
  static const int kCardOneIDFieldNumber = 2;
  inline ::google::protobuf::int32 cardoneid() const;
  inline void set_cardoneid(::google::protobuf::int32 value);
  
  // optional int32 cardTwoID = 3;
  inline bool has_cardtwoid() const;
  inline void clear_cardtwoid();
  static const int kCardTwoIDFieldNumber = 3;
  inline ::google::protobuf::int32 cardtwoid() const;
  inline void set_cardtwoid(::google::protobuf::int32 value);
  
  // optional int32 cardThreeID = 4;
  inline bool has_cardthreeid() const;
  inline void clear_cardthreeid();
  static const int kCardThreeIDFieldNumber = 4;
  inline ::google::protobuf::int32 cardthreeid() const;
  inline void set_cardthreeid(::google::protobuf::int32 value);
  
  // optional int32 cardFourID = 5;
  inline bool has_cardfourid() const;
  inline void clear_cardfourid();
  static const int kCardFourIDFieldNumber = 5;
  inline ::google::protobuf::int32 cardfourid() const;
  inline void set_cardfourid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBCardFormSend)
 private:
  inline void set_has_captaincardid();
  inline void clear_has_captaincardid();
  inline void set_has_cardoneid();
  inline void clear_has_cardoneid();
  inline void set_has_cardtwoid();
  inline void clear_has_cardtwoid();
  inline void set_has_cardthreeid();
  inline void clear_has_cardthreeid();
  inline void set_has_cardfourid();
  inline void clear_has_cardfourid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 captaincardid_;
  ::google::protobuf::int32 cardoneid_;
  ::google::protobuf::int32 cardtwoid_;
  ::google::protobuf::int32 cardthreeid_;
  ::google::protobuf::int32 cardfourid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardFormSend* default_instance_;
};
// -------------------------------------------------------------------

class PBCardFormReceive : public ::google::protobuf::Message {
 public:
  PBCardFormReceive();
  virtual ~PBCardFormReceive();
  
  PBCardFormReceive(const PBCardFormReceive& from);
  
  inline PBCardFormReceive& operator=(const PBCardFormReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBCardFormReceive& default_instance();
  
  void Swap(PBCardFormReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBCardFormReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBCardFormReceive& from);
  void MergeFrom(const PBCardFormReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 formResult = 1;
  inline bool has_formresult() const;
  inline void clear_formresult();
  static const int kFormResultFieldNumber = 1;
  inline ::google::protobuf::int32 formresult() const;
  inline void set_formresult(::google::protobuf::int32 value);
  
  // optional .PBAllCard cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // @@protoc_insertion_point(class_scope:PBCardFormReceive)
 private:
  inline void set_has_formresult();
  inline void clear_has_formresult();
  inline void set_has_cards();
  inline void clear_has_cards();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllCard* cards_;
  ::google::protobuf::int32 formresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBCardFormReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleSend : public ::google::protobuf::Message {
 public:
  PBBattleSend();
  virtual ~PBBattleSend();
  
  PBBattleSend(const PBBattleSend& from);
  
  inline PBBattleSend& operator=(const PBBattleSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleSend& default_instance();
  
  void Swap(PBBattleSend* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleSend& from);
  void MergeFrom(const PBBattleSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string battleID = 1;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIDFieldNumber = 1;
  inline const ::std::string& battleid() const;
  inline void set_battleid(const ::std::string& value);
  inline void set_battleid(const char* value);
  inline void set_battleid(const char* value, size_t size);
  inline ::std::string* mutable_battleid();
  inline ::std::string* release_battleid();
  
  // @@protoc_insertion_point(class_scope:PBBattleSend)
 private:
  inline void set_has_battleid();
  inline void clear_has_battleid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* battleid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleSend* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleAward : public ::google::protobuf::Message {
 public:
  PBBattleAward();
  virtual ~PBBattleAward();
  
  PBBattleAward(const PBBattleAward& from);
  
  inline PBBattleAward& operator=(const PBBattleAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleAward& default_instance();
  
  void Swap(PBBattleAward* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleAward& from);
  void MergeFrom(const PBBattleAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string awardID = 1;
  inline bool has_awardid() const;
  inline void clear_awardid();
  static const int kAwardIDFieldNumber = 1;
  inline const ::std::string& awardid() const;
  inline void set_awardid(const ::std::string& value);
  inline void set_awardid(const char* value);
  inline void set_awardid(const char* value, size_t size);
  inline ::std::string* mutable_awardid();
  inline ::std::string* release_awardid();
  
  // required int32 awardType = 2;
  inline bool has_awardtype() const;
  inline void clear_awardtype();
  static const int kAwardTypeFieldNumber = 2;
  inline ::google::protobuf::int32 awardtype() const;
  inline void set_awardtype(::google::protobuf::int32 value);
  
  // required int32 awardNumber = 3;
  inline bool has_awardnumber() const;
  inline void clear_awardnumber();
  static const int kAwardNumberFieldNumber = 3;
  inline ::google::protobuf::int32 awardnumber() const;
  inline void set_awardnumber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBBattleAward)
 private:
  inline void set_has_awardid();
  inline void clear_has_awardid();
  inline void set_has_awardtype();
  inline void clear_has_awardtype();
  inline void set_has_awardnumber();
  inline void clear_has_awardnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* awardid_;
  ::google::protobuf::int32 awardtype_;
  ::google::protobuf::int32 awardnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleAward* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleReceive : public ::google::protobuf::Message {
 public:
  PBBattleReceive();
  virtual ~PBBattleReceive();
  
  PBBattleReceive(const PBBattleReceive& from);
  
  inline PBBattleReceive& operator=(const PBBattleReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleReceive& default_instance();
  
  void Swap(PBBattleReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleReceive& from);
  void MergeFrom(const PBBattleReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PBBattleAward allBattleAwards = 1;
  inline int allbattleawards_size() const;
  inline void clear_allbattleawards();
  static const int kAllBattleAwardsFieldNumber = 1;
  inline const ::PBBattleAward& allbattleawards(int index) const;
  inline ::PBBattleAward* mutable_allbattleawards(int index);
  inline ::PBBattleAward* add_allbattleawards();
  inline const ::google::protobuf::RepeatedPtrField< ::PBBattleAward >&
      allbattleawards() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBBattleAward >*
      mutable_allbattleawards();
  
  // @@protoc_insertion_point(class_scope:PBBattleReceive)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBBattleAward > allbattleawards_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleReceive* default_instance_;
};
// -------------------------------------------------------------------

class PBSkillExpAdd : public ::google::protobuf::Message {
 public:
  PBSkillExpAdd();
  virtual ~PBSkillExpAdd();
  
  PBSkillExpAdd(const PBSkillExpAdd& from);
  
  inline PBSkillExpAdd& operator=(const PBSkillExpAdd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSkillExpAdd& default_instance();
  
  void Swap(PBSkillExpAdd* other);
  
  // implements Message ----------------------------------------------
  
  PBSkillExpAdd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBSkillExpAdd& from);
  void MergeFrom(const PBSkillExpAdd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 cardItemId = 1;
  inline bool has_carditemid() const;
  inline void clear_carditemid();
  static const int kCardItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 carditemid() const;
  inline void set_carditemid(::google::protobuf::int32 value);
  
  // required int32 skillExp = 2;
  inline bool has_skillexp() const;
  inline void clear_skillexp();
  static const int kSkillExpFieldNumber = 2;
  inline ::google::protobuf::int32 skillexp() const;
  inline void set_skillexp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PBSkillExpAdd)
 private:
  inline void set_has_carditemid();
  inline void clear_has_carditemid();
  inline void set_has_skillexp();
  inline void clear_has_skillexp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 carditemid_;
  ::google::protobuf::int32 skillexp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBSkillExpAdd* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleResultSend : public ::google::protobuf::Message {
 public:
  PBBattleResultSend();
  virtual ~PBBattleResultSend();
  
  PBBattleResultSend(const PBBattleResultSend& from);
  
  inline PBBattleResultSend& operator=(const PBBattleResultSend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleResultSend& default_instance();
  
  void Swap(PBBattleResultSend* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleResultSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleResultSend& from);
  void MergeFrom(const PBBattleResultSend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 battleResult = 1;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 1;
  inline ::google::protobuf::int32 battleresult() const;
  inline void set_battleresult(::google::protobuf::int32 value);
  
  // repeated .PBSkillExpAdd skillExpAdd = 2;
  inline int skillexpadd_size() const;
  inline void clear_skillexpadd();
  static const int kSkillExpAddFieldNumber = 2;
  inline const ::PBSkillExpAdd& skillexpadd(int index) const;
  inline ::PBSkillExpAdd* mutable_skillexpadd(int index);
  inline ::PBSkillExpAdd* add_skillexpadd();
  inline const ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd >&
      skillexpadd() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd >*
      mutable_skillexpadd();
  
  // @@protoc_insertion_point(class_scope:PBBattleResultSend)
 private:
  inline void set_has_battleresult();
  inline void clear_has_battleresult();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd > skillexpadd_;
  ::google::protobuf::int32 battleresult_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleResultSend* default_instance_;
};
// -------------------------------------------------------------------

class PBBattleResultReceive : public ::google::protobuf::Message {
 public:
  PBBattleResultReceive();
  virtual ~PBBattleResultReceive();
  
  PBBattleResultReceive(const PBBattleResultReceive& from);
  
  inline PBBattleResultReceive& operator=(const PBBattleResultReceive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleResultReceive& default_instance();
  
  void Swap(PBBattleResultReceive* other);
  
  // implements Message ----------------------------------------------
  
  PBBattleResultReceive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleResultReceive& from);
  void MergeFrom(const PBBattleResultReceive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .PBAllCard cards = 1;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline const ::PBAllCard& cards() const;
  inline ::PBAllCard* mutable_cards();
  inline ::PBAllCard* release_cards();
  
  // required .PBUser user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::PBUser& user() const;
  inline ::PBUser* mutable_user();
  inline ::PBUser* release_user();
  
  // @@protoc_insertion_point(class_scope:PBBattleResultReceive)
 private:
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_user();
  inline void clear_has_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PBAllCard* cards_;
  ::PBUser* user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MagicCard_2eproto();
  friend void protobuf_AssignDesc_MagicCard_2eproto();
  friend void protobuf_ShutdownFile_MagicCard_2eproto();
  
  void InitAsDefaultInstance();
  static PBBattleResultReceive* default_instance_;
};
// ===================================================================


// ===================================================================

// PBServer

// required string serverName = 1;
inline bool PBServer::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBServer::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBServer::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBServer::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& PBServer::servername() const {
  return *servername_;
}
inline void PBServer::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void PBServer::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void PBServer::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBServer::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* PBServer::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string serverUrl = 2;
inline bool PBServer::has_serverurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBServer::set_has_serverurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBServer::clear_has_serverurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBServer::clear_serverurl() {
  if (serverurl_ != &::google::protobuf::internal::kEmptyString) {
    serverurl_->clear();
  }
  clear_has_serverurl();
}
inline const ::std::string& PBServer::serverurl() const {
  return *serverurl_;
}
inline void PBServer::set_serverurl(const ::std::string& value) {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  serverurl_->assign(value);
}
inline void PBServer::set_serverurl(const char* value) {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  serverurl_->assign(value);
}
inline void PBServer::set_serverurl(const char* value, size_t size) {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  serverurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBServer::mutable_serverurl() {
  set_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    serverurl_ = new ::std::string;
  }
  return serverurl_;
}
inline ::std::string* PBServer::release_serverurl() {
  clear_has_serverurl();
  if (serverurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverurl_;
    serverurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBSystemInfoReceive

// required string affiche = 1;
inline bool PBSystemInfoReceive::has_affiche() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSystemInfoReceive::set_has_affiche() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSystemInfoReceive::clear_has_affiche() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSystemInfoReceive::clear_affiche() {
  if (affiche_ != &::google::protobuf::internal::kEmptyString) {
    affiche_->clear();
  }
  clear_has_affiche();
}
inline const ::std::string& PBSystemInfoReceive::affiche() const {
  return *affiche_;
}
inline void PBSystemInfoReceive::set_affiche(const ::std::string& value) {
  set_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    affiche_ = new ::std::string;
  }
  affiche_->assign(value);
}
inline void PBSystemInfoReceive::set_affiche(const char* value) {
  set_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    affiche_ = new ::std::string;
  }
  affiche_->assign(value);
}
inline void PBSystemInfoReceive::set_affiche(const char* value, size_t size) {
  set_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    affiche_ = new ::std::string;
  }
  affiche_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSystemInfoReceive::mutable_affiche() {
  set_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    affiche_ = new ::std::string;
  }
  return affiche_;
}
inline ::std::string* PBSystemInfoReceive::release_affiche() {
  clear_has_affiche();
  if (affiche_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = affiche_;
    affiche_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .PBServer allServer = 2;
inline int PBSystemInfoReceive::allserver_size() const {
  return allserver_.size();
}
inline void PBSystemInfoReceive::clear_allserver() {
  allserver_.Clear();
}
inline const ::PBServer& PBSystemInfoReceive::allserver(int index) const {
  return allserver_.Get(index);
}
inline ::PBServer* PBSystemInfoReceive::mutable_allserver(int index) {
  return allserver_.Mutable(index);
}
inline ::PBServer* PBSystemInfoReceive::add_allserver() {
  return allserver_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBServer >&
PBSystemInfoReceive::allserver() const {
  return allserver_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBServer >*
PBSystemInfoReceive::mutable_allserver() {
  return &allserver_;
}

// required string gameVersion = 3;
inline bool PBSystemInfoReceive::has_gameversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSystemInfoReceive::set_has_gameversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSystemInfoReceive::clear_has_gameversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSystemInfoReceive::clear_gameversion() {
  if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
    gameversion_->clear();
  }
  clear_has_gameversion();
}
inline const ::std::string& PBSystemInfoReceive::gameversion() const {
  return *gameversion_;
}
inline void PBSystemInfoReceive::set_gameversion(const ::std::string& value) {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  gameversion_->assign(value);
}
inline void PBSystemInfoReceive::set_gameversion(const char* value) {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  gameversion_->assign(value);
}
inline void PBSystemInfoReceive::set_gameversion(const char* value, size_t size) {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  gameversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSystemInfoReceive::mutable_gameversion() {
  set_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    gameversion_ = new ::std::string;
  }
  return gameversion_;
}
inline ::std::string* PBSystemInfoReceive::release_gameversion() {
  clear_has_gameversion();
  if (gameversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameversion_;
    gameversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string resourceVersion = 4;
inline bool PBSystemInfoReceive::has_resourceversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBSystemInfoReceive::set_has_resourceversion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBSystemInfoReceive::clear_has_resourceversion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBSystemInfoReceive::clear_resourceversion() {
  if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
    resourceversion_->clear();
  }
  clear_has_resourceversion();
}
inline const ::std::string& PBSystemInfoReceive::resourceversion() const {
  return *resourceversion_;
}
inline void PBSystemInfoReceive::set_resourceversion(const ::std::string& value) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(value);
}
inline void PBSystemInfoReceive::set_resourceversion(const char* value) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(value);
}
inline void PBSystemInfoReceive::set_resourceversion(const char* value, size_t size) {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  resourceversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSystemInfoReceive::mutable_resourceversion() {
  set_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    resourceversion_ = new ::std::string;
  }
  return resourceversion_;
}
inline ::std::string* PBSystemInfoReceive::release_resourceversion() {
  clear_has_resourceversion();
  if (resourceversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resourceversion_;
    resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string battleVersion = 5;
inline bool PBSystemInfoReceive::has_battleversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBSystemInfoReceive::set_has_battleversion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBSystemInfoReceive::clear_has_battleversion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBSystemInfoReceive::clear_battleversion() {
  if (battleversion_ != &::google::protobuf::internal::kEmptyString) {
    battleversion_->clear();
  }
  clear_has_battleversion();
}
inline const ::std::string& PBSystemInfoReceive::battleversion() const {
  return *battleversion_;
}
inline void PBSystemInfoReceive::set_battleversion(const ::std::string& value) {
  set_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    battleversion_ = new ::std::string;
  }
  battleversion_->assign(value);
}
inline void PBSystemInfoReceive::set_battleversion(const char* value) {
  set_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    battleversion_ = new ::std::string;
  }
  battleversion_->assign(value);
}
inline void PBSystemInfoReceive::set_battleversion(const char* value, size_t size) {
  set_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    battleversion_ = new ::std::string;
  }
  battleversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBSystemInfoReceive::mutable_battleversion() {
  set_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    battleversion_ = new ::std::string;
  }
  return battleversion_;
}
inline ::std::string* PBSystemInfoReceive::release_battleversion() {
  clear_has_battleversion();
  if (battleversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = battleversion_;
    battleversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBCard

// required int32 itemID = 1;
inline bool PBCard::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCard::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCard::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCard::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 PBCard::itemid() const {
  return itemid_;
}
inline void PBCard::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 cardID = 2;
inline bool PBCard::has_cardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCard::set_has_cardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCard::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCard::clear_cardid() {
  cardid_ = 0;
  clear_has_cardid();
}
inline ::google::protobuf::int32 PBCard::cardid() const {
  return cardid_;
}
inline void PBCard::set_cardid(::google::protobuf::int32 value) {
  set_has_cardid();
  cardid_ = value;
}

// required int32 cardLevel = 3;
inline bool PBCard::has_cardlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCard::set_has_cardlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCard::clear_has_cardlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCard::clear_cardlevel() {
  cardlevel_ = 0;
  clear_has_cardlevel();
}
inline ::google::protobuf::int32 PBCard::cardlevel() const {
  return cardlevel_;
}
inline void PBCard::set_cardlevel(::google::protobuf::int32 value) {
  set_has_cardlevel();
  cardlevel_ = value;
}

// required int32 cardExp = 4;
inline bool PBCard::has_cardexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCard::set_has_cardexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCard::clear_has_cardexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCard::clear_cardexp() {
  cardexp_ = 0;
  clear_has_cardexp();
}
inline ::google::protobuf::int32 PBCard::cardexp() const {
  return cardexp_;
}
inline void PBCard::set_cardexp(::google::protobuf::int32 value) {
  set_has_cardexp();
  cardexp_ = value;
}

// optional int32 skillExp = 5;
inline bool PBCard::has_skillexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCard::set_has_skillexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCard::clear_has_skillexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCard::clear_skillexp() {
  skillexp_ = 0;
  clear_has_skillexp();
}
inline ::google::protobuf::int32 PBCard::skillexp() const {
  return skillexp_;
}
inline void PBCard::set_skillexp(::google::protobuf::int32 value) {
  set_has_skillexp();
  skillexp_ = value;
}

// optional int32 skillLevel = 6;
inline bool PBCard::has_skilllevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBCard::set_has_skilllevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBCard::clear_has_skilllevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBCard::clear_skilllevel() {
  skilllevel_ = 0;
  clear_has_skilllevel();
}
inline ::google::protobuf::int32 PBCard::skilllevel() const {
  return skilllevel_;
}
inline void PBCard::set_skilllevel(::google::protobuf::int32 value) {
  set_has_skilllevel();
  skilllevel_ = value;
}

// optional int32 weaponID = 7;
inline bool PBCard::has_weaponid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBCard::set_has_weaponid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBCard::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBCard::clear_weaponid() {
  weaponid_ = 0;
  clear_has_weaponid();
}
inline ::google::protobuf::int32 PBCard::weaponid() const {
  return weaponid_;
}
inline void PBCard::set_weaponid(::google::protobuf::int32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// required int32 battlePosition = 8;
inline bool PBCard::has_battleposition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBCard::set_has_battleposition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBCard::clear_has_battleposition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBCard::clear_battleposition() {
  battleposition_ = 0;
  clear_has_battleposition();
}
inline ::google::protobuf::int32 PBCard::battleposition() const {
  return battleposition_;
}
inline void PBCard::set_battleposition(::google::protobuf::int32 value) {
  set_has_battleposition();
  battleposition_ = value;
}

// required int32 VTLGrow = 9;
inline bool PBCard::has_vtlgrow() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBCard::set_has_vtlgrow() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBCard::clear_has_vtlgrow() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBCard::clear_vtlgrow() {
  vtlgrow_ = 0;
  clear_has_vtlgrow();
}
inline ::google::protobuf::int32 PBCard::vtlgrow() const {
  return vtlgrow_;
}
inline void PBCard::set_vtlgrow(::google::protobuf::int32 value) {
  set_has_vtlgrow();
  vtlgrow_ = value;
}

// required int32 STRGrow = 10;
inline bool PBCard::has_strgrow() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBCard::set_has_strgrow() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBCard::clear_has_strgrow() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBCard::clear_strgrow() {
  strgrow_ = 0;
  clear_has_strgrow();
}
inline ::google::protobuf::int32 PBCard::strgrow() const {
  return strgrow_;
}
inline void PBCard::set_strgrow(::google::protobuf::int32 value) {
  set_has_strgrow();
  strgrow_ = value;
}

// required int32 TGHGrow = 11;
inline bool PBCard::has_tghgrow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBCard::set_has_tghgrow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBCard::clear_has_tghgrow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBCard::clear_tghgrow() {
  tghgrow_ = 0;
  clear_has_tghgrow();
}
inline ::google::protobuf::int32 PBCard::tghgrow() const {
  return tghgrow_;
}
inline void PBCard::set_tghgrow(::google::protobuf::int32 value) {
  set_has_tghgrow();
  tghgrow_ = value;
}

// required int32 QUIGrow = 12;
inline bool PBCard::has_quigrow() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBCard::set_has_quigrow() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBCard::clear_has_quigrow() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBCard::clear_quigrow() {
  quigrow_ = 0;
  clear_has_quigrow();
}
inline ::google::protobuf::int32 PBCard::quigrow() const {
  return quigrow_;
}
inline void PBCard::set_quigrow(::google::protobuf::int32 value) {
  set_has_quigrow();
  quigrow_ = value;
}

// required int32 MGCGrow = 13;
inline bool PBCard::has_mgcgrow() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PBCard::set_has_mgcgrow() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PBCard::clear_has_mgcgrow() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PBCard::clear_mgcgrow() {
  mgcgrow_ = 0;
  clear_has_mgcgrow();
}
inline ::google::protobuf::int32 PBCard::mgcgrow() const {
  return mgcgrow_;
}
inline void PBCard::set_mgcgrow(::google::protobuf::int32 value) {
  set_has_mgcgrow();
  mgcgrow_ = value;
}

// -------------------------------------------------------------------

// PBAllCard

// repeated .PBCard allCard = 1;
inline int PBAllCard::allcard_size() const {
  return allcard_.size();
}
inline void PBAllCard::clear_allcard() {
  allcard_.Clear();
}
inline const ::PBCard& PBAllCard::allcard(int index) const {
  return allcard_.Get(index);
}
inline ::PBCard* PBAllCard::mutable_allcard(int index) {
  return allcard_.Mutable(index);
}
inline ::PBCard* PBAllCard::add_allcard() {
  return allcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
PBAllCard::allcard() const {
  return allcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
PBAllCard::mutable_allcard() {
  return &allcard_;
}

// -------------------------------------------------------------------

// PBBattleCard

// repeated .PBCard battleCard = 1;
inline int PBBattleCard::battlecard_size() const {
  return battlecard_.size();
}
inline void PBBattleCard::clear_battlecard() {
  battlecard_.Clear();
}
inline const ::PBCard& PBBattleCard::battlecard(int index) const {
  return battlecard_.Get(index);
}
inline ::PBCard* PBBattleCard::mutable_battlecard(int index) {
  return battlecard_.Mutable(index);
}
inline ::PBCard* PBBattleCard::add_battlecard() {
  return battlecard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBCard >&
PBBattleCard::battlecard() const {
  return battlecard_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBCard >*
PBBattleCard::mutable_battlecard() {
  return &battlecard_;
}

// -------------------------------------------------------------------

// PBFriend

// required int32 friendID = 1;
inline bool PBFriend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBFriend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBFriend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBFriend::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 PBFriend::friendid() const {
  return friendid_;
}
inline void PBFriend::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
}

// required string friendName = 2;
inline bool PBFriend::has_friendname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBFriend::set_has_friendname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBFriend::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBFriend::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& PBFriend::friendname() const {
  return *friendname_;
}
inline void PBFriend::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void PBFriend::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void PBFriend::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBFriend::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* PBFriend::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 friendLevel = 3;
inline bool PBFriend::has_friendlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBFriend::set_has_friendlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBFriend::clear_has_friendlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBFriend::clear_friendlevel() {
  friendlevel_ = 0;
  clear_has_friendlevel();
}
inline ::google::protobuf::int32 PBFriend::friendlevel() const {
  return friendlevel_;
}
inline void PBFriend::set_friendlevel(::google::protobuf::int32 value) {
  set_has_friendlevel();
  friendlevel_ = value;
}

// required .PBCard friendCard = 4;
inline bool PBFriend::has_friendcard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBFriend::set_has_friendcard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBFriend::clear_has_friendcard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBFriend::clear_friendcard() {
  if (friendcard_ != NULL) friendcard_->::PBCard::Clear();
  clear_has_friendcard();
}
inline const ::PBCard& PBFriend::friendcard() const {
  return friendcard_ != NULL ? *friendcard_ : *default_instance_->friendcard_;
}
inline ::PBCard* PBFriend::mutable_friendcard() {
  set_has_friendcard();
  if (friendcard_ == NULL) friendcard_ = new ::PBCard;
  return friendcard_;
}
inline ::PBCard* PBFriend::release_friendcard() {
  clear_has_friendcard();
  ::PBCard* temp = friendcard_;
  friendcard_ = NULL;
  return temp;
}

// optional int32 FriendStatus = 5;
inline bool PBFriend::has_friendstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBFriend::set_has_friendstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBFriend::clear_has_friendstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBFriend::clear_friendstatus() {
  friendstatus_ = 0;
  clear_has_friendstatus();
}
inline ::google::protobuf::int32 PBFriend::friendstatus() const {
  return friendstatus_;
}
inline void PBFriend::set_friendstatus(::google::protobuf::int32 value) {
  set_has_friendstatus();
  friendstatus_ = value;
}

// optional bool isFriend = 6;
inline bool PBFriend::has_isfriend() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBFriend::set_has_isfriend() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBFriend::clear_has_isfriend() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBFriend::clear_isfriend() {
  isfriend_ = false;
  clear_has_isfriend();
}
inline bool PBFriend::isfriend() const {
  return isfriend_;
}
inline void PBFriend::set_isfriend(bool value) {
  set_has_isfriend();
  isfriend_ = value;
}

// -------------------------------------------------------------------

// PBAllFriend

// repeated .PBFriend allFriend = 1;
inline int PBAllFriend::allfriend_size() const {
  return allfriend_.size();
}
inline void PBAllFriend::clear_allfriend() {
  allfriend_.Clear();
}
inline const ::PBFriend& PBAllFriend::allfriend(int index) const {
  return allfriend_.Get(index);
}
inline ::PBFriend* PBAllFriend::mutable_allfriend(int index) {
  return allfriend_.Mutable(index);
}
inline ::PBFriend* PBAllFriend::add_allfriend() {
  return allfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
PBAllFriend::allfriend() const {
  return allfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
PBAllFriend::mutable_allfriend() {
  return &allfriend_;
}

// -------------------------------------------------------------------

// PBHelpFriend

// repeated .PBFriend helpFriend = 1;
inline int PBHelpFriend::helpfriend_size() const {
  return helpfriend_.size();
}
inline void PBHelpFriend::clear_helpfriend() {
  helpfriend_.Clear();
}
inline const ::PBFriend& PBHelpFriend::helpfriend(int index) const {
  return helpfriend_.Get(index);
}
inline ::PBFriend* PBHelpFriend::mutable_helpfriend(int index) {
  return helpfriend_.Mutable(index);
}
inline ::PBFriend* PBHelpFriend::add_helpfriend() {
  return helpfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
PBHelpFriend::helpfriend() const {
  return helpfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
PBHelpFriend::mutable_helpfriend() {
  return &helpfriend_;
}

// -------------------------------------------------------------------

// PBWaitingFriend

// repeated .PBFriend waitingFriend = 1;
inline int PBWaitingFriend::waitingfriend_size() const {
  return waitingfriend_.size();
}
inline void PBWaitingFriend::clear_waitingfriend() {
  waitingfriend_.Clear();
}
inline const ::PBFriend& PBWaitingFriend::waitingfriend(int index) const {
  return waitingfriend_.Get(index);
}
inline ::PBFriend* PBWaitingFriend::mutable_waitingfriend(int index) {
  return waitingfriend_.Mutable(index);
}
inline ::PBFriend* PBWaitingFriend::add_waitingfriend() {
  return waitingfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBFriend >&
PBWaitingFriend::waitingfriend() const {
  return waitingfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBFriend >*
PBWaitingFriend::mutable_waitingfriend() {
  return &waitingfriend_;
}

// -------------------------------------------------------------------

// PBFriendSend

// required int32 friendID = 1;
inline bool PBFriendSend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBFriendSend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBFriendSend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBFriendSend::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 PBFriendSend::friendid() const {
  return friendid_;
}
inline void PBFriendSend::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
}

// -------------------------------------------------------------------

// PBFriendAgreeReceive

// required int32 agreeResult = 1;
inline bool PBFriendAgreeReceive::has_agreeresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBFriendAgreeReceive::set_has_agreeresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBFriendAgreeReceive::clear_has_agreeresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBFriendAgreeReceive::clear_agreeresult() {
  agreeresult_ = 0;
  clear_has_agreeresult();
}
inline ::google::protobuf::int32 PBFriendAgreeReceive::agreeresult() const {
  return agreeresult_;
}
inline void PBFriendAgreeReceive::set_agreeresult(::google::protobuf::int32 value) {
  set_has_agreeresult();
  agreeresult_ = value;
}

// optional .PBWaitingFriend waitings = 2;
inline bool PBFriendAgreeReceive::has_waitings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBFriendAgreeReceive::set_has_waitings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBFriendAgreeReceive::clear_has_waitings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBFriendAgreeReceive::clear_waitings() {
  if (waitings_ != NULL) waitings_->::PBWaitingFriend::Clear();
  clear_has_waitings();
}
inline const ::PBWaitingFriend& PBFriendAgreeReceive::waitings() const {
  return waitings_ != NULL ? *waitings_ : *default_instance_->waitings_;
}
inline ::PBWaitingFriend* PBFriendAgreeReceive::mutable_waitings() {
  set_has_waitings();
  if (waitings_ == NULL) waitings_ = new ::PBWaitingFriend;
  return waitings_;
}
inline ::PBWaitingFriend* PBFriendAgreeReceive::release_waitings() {
  clear_has_waitings();
  ::PBWaitingFriend* temp = waitings_;
  waitings_ = NULL;
  return temp;
}

// optional .PBAllFriend friends = 3;
inline bool PBFriendAgreeReceive::has_friends() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBFriendAgreeReceive::set_has_friends() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBFriendAgreeReceive::clear_has_friends() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBFriendAgreeReceive::clear_friends() {
  if (friends_ != NULL) friends_->::PBAllFriend::Clear();
  clear_has_friends();
}
inline const ::PBAllFriend& PBFriendAgreeReceive::friends() const {
  return friends_ != NULL ? *friends_ : *default_instance_->friends_;
}
inline ::PBAllFriend* PBFriendAgreeReceive::mutable_friends() {
  set_has_friends();
  if (friends_ == NULL) friends_ = new ::PBAllFriend;
  return friends_;
}
inline ::PBAllFriend* PBFriendAgreeReceive::release_friends() {
  clear_has_friends();
  ::PBAllFriend* temp = friends_;
  friends_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBAddFriendReceive

// required int32 addResult = 1;
inline bool PBAddFriendReceive::has_addresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAddFriendReceive::set_has_addresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAddFriendReceive::clear_has_addresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAddFriendReceive::clear_addresult() {
  addresult_ = 0;
  clear_has_addresult();
}
inline ::google::protobuf::int32 PBAddFriendReceive::addresult() const {
  return addresult_;
}
inline void PBAddFriendReceive::set_addresult(::google::protobuf::int32 value) {
  set_has_addresult();
  addresult_ = value;
}

// optional .PBAllFriend friends = 2;
inline bool PBAddFriendReceive::has_friends() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAddFriendReceive::set_has_friends() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAddFriendReceive::clear_has_friends() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAddFriendReceive::clear_friends() {
  if (friends_ != NULL) friends_->::PBAllFriend::Clear();
  clear_has_friends();
}
inline const ::PBAllFriend& PBAddFriendReceive::friends() const {
  return friends_ != NULL ? *friends_ : *default_instance_->friends_;
}
inline ::PBAllFriend* PBAddFriendReceive::mutable_friends() {
  set_has_friends();
  if (friends_ == NULL) friends_ = new ::PBAllFriend;
  return friends_;
}
inline ::PBAllFriend* PBAddFriendReceive::release_friends() {
  clear_has_friends();
  ::PBAllFriend* temp = friends_;
  friends_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBBattle

// required string pveProgress = 11;
inline bool PBBattle::has_pveprogress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattle::set_has_pveprogress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattle::clear_has_pveprogress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattle::clear_pveprogress() {
  if (pveprogress_ != &::google::protobuf::internal::kEmptyString) {
    pveprogress_->clear();
  }
  clear_has_pveprogress();
}
inline const ::std::string& PBBattle::pveprogress() const {
  return *pveprogress_;
}
inline void PBBattle::set_pveprogress(const ::std::string& value) {
  set_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    pveprogress_ = new ::std::string;
  }
  pveprogress_->assign(value);
}
inline void PBBattle::set_pveprogress(const char* value) {
  set_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    pveprogress_ = new ::std::string;
  }
  pveprogress_->assign(value);
}
inline void PBBattle::set_pveprogress(const char* value, size_t size) {
  set_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    pveprogress_ = new ::std::string;
  }
  pveprogress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattle::mutable_pveprogress() {
  set_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    pveprogress_ = new ::std::string;
  }
  return pveprogress_;
}
inline ::std::string* PBBattle::release_pveprogress() {
  clear_has_pveprogress();
  if (pveprogress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pveprogress_;
    pveprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 activityPveNum = 13;
inline bool PBBattle::has_activitypvenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBattle::set_has_activitypvenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBattle::clear_has_activitypvenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBattle::clear_activitypvenum() {
  activitypvenum_ = 0;
  clear_has_activitypvenum();
}
inline ::google::protobuf::int32 PBBattle::activitypvenum() const {
  return activitypvenum_;
}
inline void PBBattle::set_activitypvenum(::google::protobuf::int32 value) {
  set_has_activitypvenum();
  activitypvenum_ = value;
}

// repeated int32 allActivityPveID = 14;
inline int PBBattle::allactivitypveid_size() const {
  return allactivitypveid_.size();
}
inline void PBBattle::clear_allactivitypveid() {
  allactivitypveid_.Clear();
}
inline ::google::protobuf::int32 PBBattle::allactivitypveid(int index) const {
  return allactivitypveid_.Get(index);
}
inline void PBBattle::set_allactivitypveid(int index, ::google::protobuf::int32 value) {
  allactivitypveid_.Set(index, value);
}
inline void PBBattle::add_allactivitypveid(::google::protobuf::int32 value) {
  allactivitypveid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBBattle::allactivitypveid() const {
  return allactivitypveid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBBattle::mutable_allactivitypveid() {
  return &allactivitypveid_;
}

// -------------------------------------------------------------------

// PBMission

// required int32 missionID = 1;
inline bool PBMission::has_missionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMission::set_has_missionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMission::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMission::clear_missionid() {
  missionid_ = 0;
  clear_has_missionid();
}
inline ::google::protobuf::int32 PBMission::missionid() const {
  return missionid_;
}
inline void PBMission::set_missionid(::google::protobuf::int32 value) {
  set_has_missionid();
  missionid_ = value;
}

// required bool isMissinFinished = 2;
inline bool PBMission::has_ismissinfinished() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMission::set_has_ismissinfinished() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMission::clear_has_ismissinfinished() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMission::clear_ismissinfinished() {
  ismissinfinished_ = false;
  clear_has_ismissinfinished();
}
inline bool PBMission::ismissinfinished() const {
  return ismissinfinished_;
}
inline void PBMission::set_ismissinfinished(bool value) {
  set_has_ismissinfinished();
  ismissinfinished_ = value;
}

// optional string missonProgress = 3;
inline bool PBMission::has_missonprogress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMission::set_has_missonprogress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMission::clear_has_missonprogress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMission::clear_missonprogress() {
  if (missonprogress_ != &::google::protobuf::internal::kEmptyString) {
    missonprogress_->clear();
  }
  clear_has_missonprogress();
}
inline const ::std::string& PBMission::missonprogress() const {
  return *missonprogress_;
}
inline void PBMission::set_missonprogress(const ::std::string& value) {
  set_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    missonprogress_ = new ::std::string;
  }
  missonprogress_->assign(value);
}
inline void PBMission::set_missonprogress(const char* value) {
  set_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    missonprogress_ = new ::std::string;
  }
  missonprogress_->assign(value);
}
inline void PBMission::set_missonprogress(const char* value, size_t size) {
  set_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    missonprogress_ = new ::std::string;
  }
  missonprogress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMission::mutable_missonprogress() {
  set_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    missonprogress_ = new ::std::string;
  }
  return missonprogress_;
}
inline ::std::string* PBMission::release_missonprogress() {
  clear_has_missonprogress();
  if (missonprogress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = missonprogress_;
    missonprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBAllMission

// repeated .PBMission allMission = 1;
inline int PBAllMission::allmission_size() const {
  return allmission_.size();
}
inline void PBAllMission::clear_allmission() {
  allmission_.Clear();
}
inline const ::PBMission& PBAllMission::allmission(int index) const {
  return allmission_.Get(index);
}
inline ::PBMission* PBAllMission::mutable_allmission(int index) {
  return allmission_.Mutable(index);
}
inline ::PBMission* PBAllMission::add_allmission() {
  return allmission_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMission >&
PBAllMission::allmission() const {
  return allmission_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMission >*
PBAllMission::mutable_allmission() {
  return &allmission_;
}

// -------------------------------------------------------------------

// PBMissionAwardSend

// required int32 missionID = 1;
inline bool PBMissionAwardSend::has_missionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMissionAwardSend::set_has_missionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMissionAwardSend::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMissionAwardSend::clear_missionid() {
  missionid_ = 0;
  clear_has_missionid();
}
inline ::google::protobuf::int32 PBMissionAwardSend::missionid() const {
  return missionid_;
}
inline void PBMissionAwardSend::set_missionid(::google::protobuf::int32 value) {
  set_has_missionid();
  missionid_ = value;
}

// -------------------------------------------------------------------

// PBUser

// required int32 userID = 1;
inline bool PBUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBUser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PBUser::userid() const {
  return userid_;
}
inline void PBUser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required string userName = 2;
inline bool PBUser::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBUser::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBUser::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBUser::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBUser::username() const {
  return *username_;
}
inline void PBUser::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBUser::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBUser::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBUser::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBUser::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 userLevel = 3;
inline bool PBUser::has_userlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBUser::set_has_userlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBUser::clear_has_userlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBUser::clear_userlevel() {
  userlevel_ = 0;
  clear_has_userlevel();
}
inline ::google::protobuf::int32 PBUser::userlevel() const {
  return userlevel_;
}
inline void PBUser::set_userlevel(::google::protobuf::int32 value) {
  set_has_userlevel();
  userlevel_ = value;
}

// required int32 userExp = 4;
inline bool PBUser::has_userexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBUser::set_has_userexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBUser::clear_has_userexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBUser::clear_userexp() {
  userexp_ = 0;
  clear_has_userexp();
}
inline ::google::protobuf::int32 PBUser::userexp() const {
  return userexp_;
}
inline void PBUser::set_userexp(::google::protobuf::int32 value) {
  set_has_userexp();
  userexp_ = value;
}

// required int32 energy = 5;
inline bool PBUser::has_energy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBUser::set_has_energy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBUser::clear_has_energy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBUser::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 PBUser::energy() const {
  return energy_;
}
inline void PBUser::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// required int32 nextEnergyTime = 6;
inline bool PBUser::has_nextenergytime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBUser::set_has_nextenergytime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBUser::clear_has_nextenergytime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBUser::clear_nextenergytime() {
  nextenergytime_ = 0;
  clear_has_nextenergytime();
}
inline ::google::protobuf::int32 PBUser::nextenergytime() const {
  return nextenergytime_;
}
inline void PBUser::set_nextenergytime(::google::protobuf::int32 value) {
  set_has_nextenergytime();
  nextenergytime_ = value;
}

// required int32 buyEnergyTime = 7;
inline bool PBUser::has_buyenergytime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBUser::set_has_buyenergytime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBUser::clear_has_buyenergytime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBUser::clear_buyenergytime() {
  buyenergytime_ = 0;
  clear_has_buyenergytime();
}
inline ::google::protobuf::int32 PBUser::buyenergytime() const {
  return buyenergytime_;
}
inline void PBUser::set_buyenergytime(::google::protobuf::int32 value) {
  set_has_buyenergytime();
  buyenergytime_ = value;
}

// required int32 diamondNumber = 8;
inline bool PBUser::has_diamondnumber() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBUser::set_has_diamondnumber() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBUser::clear_has_diamondnumber() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBUser::clear_diamondnumber() {
  diamondnumber_ = 0;
  clear_has_diamondnumber();
}
inline ::google::protobuf::int32 PBUser::diamondnumber() const {
  return diamondnumber_;
}
inline void PBUser::set_diamondnumber(::google::protobuf::int32 value) {
  set_has_diamondnumber();
  diamondnumber_ = value;
}

// required int32 friendValue = 9;
inline bool PBUser::has_friendvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBUser::set_has_friendvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBUser::clear_has_friendvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBUser::clear_friendvalue() {
  friendvalue_ = 0;
  clear_has_friendvalue();
}
inline ::google::protobuf::int32 PBUser::friendvalue() const {
  return friendvalue_;
}
inline void PBUser::set_friendvalue(::google::protobuf::int32 value) {
  set_has_friendvalue();
  friendvalue_ = value;
}

// required int32 goldNumber = 10;
inline bool PBUser::has_goldnumber() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBUser::set_has_goldnumber() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBUser::clear_has_goldnumber() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBUser::clear_goldnumber() {
  goldnumber_ = 0;
  clear_has_goldnumber();
}
inline ::google::protobuf::int32 PBUser::goldnumber() const {
  return goldnumber_;
}
inline void PBUser::set_goldnumber(::google::protobuf::int32 value) {
  set_has_goldnumber();
  goldnumber_ = value;
}

// required int32 leaderValue = 11;
inline bool PBUser::has_leadervalue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBUser::set_has_leadervalue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBUser::clear_has_leadervalue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBUser::clear_leadervalue() {
  leadervalue_ = 0;
  clear_has_leadervalue();
}
inline ::google::protobuf::int32 PBUser::leadervalue() const {
  return leadervalue_;
}
inline void PBUser::set_leadervalue(::google::protobuf::int32 value) {
  set_has_leadervalue();
  leadervalue_ = value;
}

// required bool hasMissionFinished = 12;
inline bool PBUser::has_hasmissionfinished() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBUser::set_has_hasmissionfinished() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBUser::clear_has_hasmissionfinished() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBUser::clear_hasmissionfinished() {
  hasmissionfinished_ = false;
  clear_has_hasmissionfinished();
}
inline bool PBUser::hasmissionfinished() const {
  return hasmissionfinished_;
}
inline void PBUser::set_hasmissionfinished(bool value) {
  set_has_hasmissionfinished();
  hasmissionfinished_ = value;
}

// -------------------------------------------------------------------

// PBMissionAwardReceive

// optional .PBUser user = 1;
inline bool PBMissionAwardReceive::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMissionAwardReceive::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMissionAwardReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMissionAwardReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBMissionAwardReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBMissionAwardReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBMissionAwardReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// optional .PBAllCard cards = 2;
inline bool PBMissionAwardReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMissionAwardReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMissionAwardReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMissionAwardReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBMissionAwardReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBMissionAwardReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBMissionAwardReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBRunningAfficheReceive

// repeated string affiches = 1;
inline int PBRunningAfficheReceive::affiches_size() const {
  return affiches_.size();
}
inline void PBRunningAfficheReceive::clear_affiches() {
  affiches_.Clear();
}
inline const ::std::string& PBRunningAfficheReceive::affiches(int index) const {
  return affiches_.Get(index);
}
inline ::std::string* PBRunningAfficheReceive::mutable_affiches(int index) {
  return affiches_.Mutable(index);
}
inline void PBRunningAfficheReceive::set_affiches(int index, const ::std::string& value) {
  affiches_.Mutable(index)->assign(value);
}
inline void PBRunningAfficheReceive::set_affiches(int index, const char* value) {
  affiches_.Mutable(index)->assign(value);
}
inline void PBRunningAfficheReceive::set_affiches(int index, const char* value, size_t size) {
  affiches_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRunningAfficheReceive::add_affiches() {
  return affiches_.Add();
}
inline void PBRunningAfficheReceive::add_affiches(const ::std::string& value) {
  affiches_.Add()->assign(value);
}
inline void PBRunningAfficheReceive::add_affiches(const char* value) {
  affiches_.Add()->assign(value);
}
inline void PBRunningAfficheReceive::add_affiches(const char* value, size_t size) {
  affiches_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBRunningAfficheReceive::affiches() const {
  return affiches_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBRunningAfficheReceive::mutable_affiches() {
  return &affiches_;
}

// -------------------------------------------------------------------

// PBAwardReceive

// required int32 awardResult = 1;
inline bool PBAwardReceive::has_awardresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAwardReceive::set_has_awardresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAwardReceive::clear_has_awardresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAwardReceive::clear_awardresult() {
  awardresult_ = 0;
  clear_has_awardresult();
}
inline ::google::protobuf::int32 PBAwardReceive::awardresult() const {
  return awardresult_;
}
inline void PBAwardReceive::set_awardresult(::google::protobuf::int32 value) {
  set_has_awardresult();
  awardresult_ = value;
}

// optional .PBUser user = 2;
inline bool PBAwardReceive::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAwardReceive::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAwardReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAwardReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBAwardReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBAwardReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBAwardReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// optional .PBAllCard cards = 3;
inline bool PBAwardReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBAwardReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBAwardReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBAwardReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBAwardReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBAwardReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBAwardReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBBuyEnergyReceive

// required int32 buyResult = 1;
inline bool PBBuyEnergyReceive::has_buyresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBuyEnergyReceive::set_has_buyresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBuyEnergyReceive::clear_has_buyresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBuyEnergyReceive::clear_buyresult() {
  buyresult_ = 0;
  clear_has_buyresult();
}
inline ::google::protobuf::int32 PBBuyEnergyReceive::buyresult() const {
  return buyresult_;
}
inline void PBBuyEnergyReceive::set_buyresult(::google::protobuf::int32 value) {
  set_has_buyresult();
  buyresult_ = value;
}

// optional .PBUser user = 2;
inline bool PBBuyEnergyReceive::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBuyEnergyReceive::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBuyEnergyReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBuyEnergyReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBBuyEnergyReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBBuyEnergyReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBBuyEnergyReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBRegisterSend

// required string macAddress = 1;
inline bool PBRegisterSend::has_macaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRegisterSend::set_has_macaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRegisterSend::clear_has_macaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRegisterSend::clear_macaddress() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    macaddress_->clear();
  }
  clear_has_macaddress();
}
inline const ::std::string& PBRegisterSend::macaddress() const {
  return *macaddress_;
}
inline void PBRegisterSend::set_macaddress(const ::std::string& value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBRegisterSend::set_macaddress(const char* value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBRegisterSend::set_macaddress(const char* value, size_t size) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterSend::mutable_macaddress() {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  return macaddress_;
}
inline ::std::string* PBRegisterSend::release_macaddress() {
  clear_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = macaddress_;
    macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string userName = 3;
inline bool PBRegisterSend::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRegisterSend::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRegisterSend::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRegisterSend::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PBRegisterSend::username() const {
  return *username_;
}
inline void PBRegisterSend::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBRegisterSend::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PBRegisterSend::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRegisterSend::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PBRegisterSend::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBLoginSend

// required string macAddress = 1;
inline bool PBLoginSend::has_macaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBLoginSend::set_has_macaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBLoginSend::clear_has_macaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBLoginSend::clear_macaddress() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    macaddress_->clear();
  }
  clear_has_macaddress();
}
inline const ::std::string& PBLoginSend::macaddress() const {
  return *macaddress_;
}
inline void PBLoginSend::set_macaddress(const ::std::string& value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBLoginSend::set_macaddress(const char* value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void PBLoginSend::set_macaddress(const char* value, size_t size) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBLoginSend::mutable_macaddress() {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  return macaddress_;
}
inline ::std::string* PBLoginSend::release_macaddress() {
  clear_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = macaddress_;
    macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBLoginReceive

// optional bool isRegisterSucceed = 1;
inline bool PBLoginReceive::has_isregistersucceed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBLoginReceive::set_has_isregistersucceed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBLoginReceive::clear_has_isregistersucceed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBLoginReceive::clear_isregistersucceed() {
  isregistersucceed_ = false;
  clear_has_isregistersucceed();
}
inline bool PBLoginReceive::isregistersucceed() const {
  return isregistersucceed_;
}
inline void PBLoginReceive::set_isregistersucceed(bool value) {
  set_has_isregistersucceed();
  isregistersucceed_ = value;
}

// required .PBUser user = 2;
inline bool PBLoginReceive::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBLoginReceive::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBLoginReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBLoginReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBLoginReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBLoginReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBLoginReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}

// required .PBBattle battle = 3;
inline bool PBLoginReceive::has_battle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBLoginReceive::set_has_battle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBLoginReceive::clear_has_battle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBLoginReceive::clear_battle() {
  if (battle_ != NULL) battle_->::PBBattle::Clear();
  clear_has_battle();
}
inline const ::PBBattle& PBLoginReceive::battle() const {
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::PBBattle* PBLoginReceive::mutable_battle() {
  set_has_battle();
  if (battle_ == NULL) battle_ = new ::PBBattle;
  return battle_;
}
inline ::PBBattle* PBLoginReceive::release_battle() {
  clear_has_battle();
  ::PBBattle* temp = battle_;
  battle_ = NULL;
  return temp;
}

// required .PBAllCard cards = 4;
inline bool PBLoginReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBLoginReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBLoginReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBLoginReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBLoginReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBLoginReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBLoginReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// required .PBAllMission missions = 5;
inline bool PBLoginReceive::has_missions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBLoginReceive::set_has_missions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBLoginReceive::clear_has_missions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBLoginReceive::clear_missions() {
  if (missions_ != NULL) missions_->::PBAllMission::Clear();
  clear_has_missions();
}
inline const ::PBAllMission& PBLoginReceive::missions() const {
  return missions_ != NULL ? *missions_ : *default_instance_->missions_;
}
inline ::PBAllMission* PBLoginReceive::mutable_missions() {
  set_has_missions();
  if (missions_ == NULL) missions_ = new ::PBAllMission;
  return missions_;
}
inline ::PBAllMission* PBLoginReceive::release_missions() {
  clear_has_missions();
  ::PBAllMission* temp = missions_;
  missions_ = NULL;
  return temp;
}

// required .PBBattleCard battleCards = 6;
inline bool PBLoginReceive::has_battlecards() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBLoginReceive::set_has_battlecards() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBLoginReceive::clear_has_battlecards() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBLoginReceive::clear_battlecards() {
  if (battlecards_ != NULL) battlecards_->::PBBattleCard::Clear();
  clear_has_battlecards();
}
inline const ::PBBattleCard& PBLoginReceive::battlecards() const {
  return battlecards_ != NULL ? *battlecards_ : *default_instance_->battlecards_;
}
inline ::PBBattleCard* PBLoginReceive::mutable_battlecards() {
  set_has_battlecards();
  if (battlecards_ == NULL) battlecards_ = new ::PBBattleCard;
  return battlecards_;
}
inline ::PBBattleCard* PBLoginReceive::release_battlecards() {
  clear_has_battlecards();
  ::PBBattleCard* temp = battlecards_;
  battlecards_ = NULL;
  return temp;
}

// required .PBAllFriend friends = 7;
inline bool PBLoginReceive::has_friends() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBLoginReceive::set_has_friends() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBLoginReceive::clear_has_friends() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBLoginReceive::clear_friends() {
  if (friends_ != NULL) friends_->::PBAllFriend::Clear();
  clear_has_friends();
}
inline const ::PBAllFriend& PBLoginReceive::friends() const {
  return friends_ != NULL ? *friends_ : *default_instance_->friends_;
}
inline ::PBAllFriend* PBLoginReceive::mutable_friends() {
  set_has_friends();
  if (friends_ == NULL) friends_ = new ::PBAllFriend;
  return friends_;
}
inline ::PBAllFriend* PBLoginReceive::release_friends() {
  clear_has_friends();
  ::PBAllFriend* temp = friends_;
  friends_ = NULL;
  return temp;
}

// required .PBHelpFriend helps = 8;
inline bool PBLoginReceive::has_helps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBLoginReceive::set_has_helps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBLoginReceive::clear_has_helps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBLoginReceive::clear_helps() {
  if (helps_ != NULL) helps_->::PBHelpFriend::Clear();
  clear_has_helps();
}
inline const ::PBHelpFriend& PBLoginReceive::helps() const {
  return helps_ != NULL ? *helps_ : *default_instance_->helps_;
}
inline ::PBHelpFriend* PBLoginReceive::mutable_helps() {
  set_has_helps();
  if (helps_ == NULL) helps_ = new ::PBHelpFriend;
  return helps_;
}
inline ::PBHelpFriend* PBLoginReceive::release_helps() {
  clear_has_helps();
  ::PBHelpFriend* temp = helps_;
  helps_ = NULL;
  return temp;
}

// required .PBWaitingFriend waitings = 9;
inline bool PBLoginReceive::has_waitings() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBLoginReceive::set_has_waitings() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBLoginReceive::clear_has_waitings() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBLoginReceive::clear_waitings() {
  if (waitings_ != NULL) waitings_->::PBWaitingFriend::Clear();
  clear_has_waitings();
}
inline const ::PBWaitingFriend& PBLoginReceive::waitings() const {
  return waitings_ != NULL ? *waitings_ : *default_instance_->waitings_;
}
inline ::PBWaitingFriend* PBLoginReceive::mutable_waitings() {
  set_has_waitings();
  if (waitings_ == NULL) waitings_ = new ::PBWaitingFriend;
  return waitings_;
}
inline ::PBWaitingFriend* PBLoginReceive::release_waitings() {
  clear_has_waitings();
  ::PBWaitingFriend* temp = waitings_;
  waitings_ = NULL;
  return temp;
}

// required string token = 10;
inline bool PBLoginReceive::has_token() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBLoginReceive::set_has_token() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBLoginReceive::clear_has_token() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBLoginReceive::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& PBLoginReceive::token() const {
  return *token_;
}
inline void PBLoginReceive::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void PBLoginReceive::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void PBLoginReceive::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBLoginReceive::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* PBLoginReceive::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBCardLevelUpSend

// required int32 upCardItemID = 1;
inline bool PBCardLevelUpSend::has_upcarditemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardLevelUpSend::set_has_upcarditemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardLevelUpSend::clear_has_upcarditemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardLevelUpSend::clear_upcarditemid() {
  upcarditemid_ = 0;
  clear_has_upcarditemid();
}
inline ::google::protobuf::int32 PBCardLevelUpSend::upcarditemid() const {
  return upcarditemid_;
}
inline void PBCardLevelUpSend::set_upcarditemid(::google::protobuf::int32 value) {
  set_has_upcarditemid();
  upcarditemid_ = value;
}

// repeated int32 eatCardItemIDs = 2;
inline int PBCardLevelUpSend::eatcarditemids_size() const {
  return eatcarditemids_.size();
}
inline void PBCardLevelUpSend::clear_eatcarditemids() {
  eatcarditemids_.Clear();
}
inline ::google::protobuf::int32 PBCardLevelUpSend::eatcarditemids(int index) const {
  return eatcarditemids_.Get(index);
}
inline void PBCardLevelUpSend::set_eatcarditemids(int index, ::google::protobuf::int32 value) {
  eatcarditemids_.Set(index, value);
}
inline void PBCardLevelUpSend::add_eatcarditemids(::google::protobuf::int32 value) {
  eatcarditemids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBCardLevelUpSend::eatcarditemids() const {
  return eatcarditemids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBCardLevelUpSend::mutable_eatcarditemids() {
  return &eatcarditemids_;
}

// -------------------------------------------------------------------

// PBCardLevelUpReceive

// required int32 upResult = 1;
inline bool PBCardLevelUpReceive::has_upresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardLevelUpReceive::set_has_upresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardLevelUpReceive::clear_has_upresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardLevelUpReceive::clear_upresult() {
  upresult_ = 0;
  clear_has_upresult();
}
inline ::google::protobuf::int32 PBCardLevelUpReceive::upresult() const {
  return upresult_;
}
inline void PBCardLevelUpReceive::set_upresult(::google::protobuf::int32 value) {
  set_has_upresult();
  upresult_ = value;
}

// optional .PBAllCard cards = 2;
inline bool PBCardLevelUpReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardLevelUpReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardLevelUpReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardLevelUpReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBCardLevelUpReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBCardLevelUpReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBCardLevelUpReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional int32 goldNumber = 3;
inline bool PBCardLevelUpReceive::has_goldnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCardLevelUpReceive::set_has_goldnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCardLevelUpReceive::clear_has_goldnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCardLevelUpReceive::clear_goldnumber() {
  goldnumber_ = 0;
  clear_has_goldnumber();
}
inline ::google::protobuf::int32 PBCardLevelUpReceive::goldnumber() const {
  return goldnumber_;
}
inline void PBCardLevelUpReceive::set_goldnumber(::google::protobuf::int32 value) {
  set_has_goldnumber();
  goldnumber_ = value;
}

// optional .PBCard targetCard = 4;
inline bool PBCardLevelUpReceive::has_targetcard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCardLevelUpReceive::set_has_targetcard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCardLevelUpReceive::clear_has_targetcard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCardLevelUpReceive::clear_targetcard() {
  if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
  clear_has_targetcard();
}
inline const ::PBCard& PBCardLevelUpReceive::targetcard() const {
  return targetcard_ != NULL ? *targetcard_ : *default_instance_->targetcard_;
}
inline ::PBCard* PBCardLevelUpReceive::mutable_targetcard() {
  set_has_targetcard();
  if (targetcard_ == NULL) targetcard_ = new ::PBCard;
  return targetcard_;
}
inline ::PBCard* PBCardLevelUpReceive::release_targetcard() {
  clear_has_targetcard();
  ::PBCard* temp = targetcard_;
  targetcard_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCardEvolutionSend

// required int32 evolutionResult = 1;
inline bool PBCardEvolutionSend::has_evolutionresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardEvolutionSend::set_has_evolutionresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardEvolutionSend::clear_has_evolutionresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardEvolutionSend::clear_evolutionresult() {
  evolutionresult_ = 0;
  clear_has_evolutionresult();
}
inline ::google::protobuf::int32 PBCardEvolutionSend::evolutionresult() const {
  return evolutionresult_;
}
inline void PBCardEvolutionSend::set_evolutionresult(::google::protobuf::int32 value) {
  set_has_evolutionresult();
  evolutionresult_ = value;
}

// optional .PBCard targetCard = 2;
inline bool PBCardEvolutionSend::has_targetcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardEvolutionSend::set_has_targetcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardEvolutionSend::clear_has_targetcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardEvolutionSend::clear_targetcard() {
  if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
  clear_has_targetcard();
}
inline const ::PBCard& PBCardEvolutionSend::targetcard() const {
  return targetcard_ != NULL ? *targetcard_ : *default_instance_->targetcard_;
}
inline ::PBCard* PBCardEvolutionSend::mutable_targetcard() {
  set_has_targetcard();
  if (targetcard_ == NULL) targetcard_ = new ::PBCard;
  return targetcard_;
}
inline ::PBCard* PBCardEvolutionSend::release_targetcard() {
  clear_has_targetcard();
  ::PBCard* temp = targetcard_;
  targetcard_ = NULL;
  return temp;
}

// optional .PBAllCard cards = 3;
inline bool PBCardEvolutionSend::has_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCardEvolutionSend::set_has_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCardEvolutionSend::clear_has_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCardEvolutionSend::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBCardEvolutionSend::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBCardEvolutionSend::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBCardEvolutionSend::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBSkillLevelUpSend

// required int32 upCardItemID = 1;
inline bool PBSkillLevelUpSend::has_upcarditemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSkillLevelUpSend::set_has_upcarditemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSkillLevelUpSend::clear_has_upcarditemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSkillLevelUpSend::clear_upcarditemid() {
  upcarditemid_ = 0;
  clear_has_upcarditemid();
}
inline ::google::protobuf::int32 PBSkillLevelUpSend::upcarditemid() const {
  return upcarditemid_;
}
inline void PBSkillLevelUpSend::set_upcarditemid(::google::protobuf::int32 value) {
  set_has_upcarditemid();
  upcarditemid_ = value;
}

// -------------------------------------------------------------------

// PBSkillLevelUpReceive

// required int32 skillUpResult = 1;
inline bool PBSkillLevelUpReceive::has_skillupresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSkillLevelUpReceive::set_has_skillupresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSkillLevelUpReceive::clear_has_skillupresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSkillLevelUpReceive::clear_skillupresult() {
  skillupresult_ = 0;
  clear_has_skillupresult();
}
inline ::google::protobuf::int32 PBSkillLevelUpReceive::skillupresult() const {
  return skillupresult_;
}
inline void PBSkillLevelUpReceive::set_skillupresult(::google::protobuf::int32 value) {
  set_has_skillupresult();
  skillupresult_ = value;
}

// optional .PBCard targetCard = 2;
inline bool PBSkillLevelUpReceive::has_targetcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSkillLevelUpReceive::set_has_targetcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSkillLevelUpReceive::clear_has_targetcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSkillLevelUpReceive::clear_targetcard() {
  if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
  clear_has_targetcard();
}
inline const ::PBCard& PBSkillLevelUpReceive::targetcard() const {
  return targetcard_ != NULL ? *targetcard_ : *default_instance_->targetcard_;
}
inline ::PBCard* PBSkillLevelUpReceive::mutable_targetcard() {
  set_has_targetcard();
  if (targetcard_ == NULL) targetcard_ = new ::PBCard;
  return targetcard_;
}
inline ::PBCard* PBSkillLevelUpReceive::release_targetcard() {
  clear_has_targetcard();
  ::PBCard* temp = targetcard_;
  targetcard_ = NULL;
  return temp;
}

// optional .PBAllCard cards = 3;
inline bool PBSkillLevelUpReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBSkillLevelUpReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBSkillLevelUpReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBSkillLevelUpReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBSkillLevelUpReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBSkillLevelUpReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBSkillLevelUpReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBCardFormSend

// optional int32 captainCardID = 1;
inline bool PBCardFormSend::has_captaincardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardFormSend::set_has_captaincardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardFormSend::clear_has_captaincardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardFormSend::clear_captaincardid() {
  captaincardid_ = 0;
  clear_has_captaincardid();
}
inline ::google::protobuf::int32 PBCardFormSend::captaincardid() const {
  return captaincardid_;
}
inline void PBCardFormSend::set_captaincardid(::google::protobuf::int32 value) {
  set_has_captaincardid();
  captaincardid_ = value;
}

// optional int32 cardOneID = 2;
inline bool PBCardFormSend::has_cardoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardFormSend::set_has_cardoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardFormSend::clear_has_cardoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardFormSend::clear_cardoneid() {
  cardoneid_ = 0;
  clear_has_cardoneid();
}
inline ::google::protobuf::int32 PBCardFormSend::cardoneid() const {
  return cardoneid_;
}
inline void PBCardFormSend::set_cardoneid(::google::protobuf::int32 value) {
  set_has_cardoneid();
  cardoneid_ = value;
}

// optional int32 cardTwoID = 3;
inline bool PBCardFormSend::has_cardtwoid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBCardFormSend::set_has_cardtwoid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBCardFormSend::clear_has_cardtwoid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBCardFormSend::clear_cardtwoid() {
  cardtwoid_ = 0;
  clear_has_cardtwoid();
}
inline ::google::protobuf::int32 PBCardFormSend::cardtwoid() const {
  return cardtwoid_;
}
inline void PBCardFormSend::set_cardtwoid(::google::protobuf::int32 value) {
  set_has_cardtwoid();
  cardtwoid_ = value;
}

// optional int32 cardThreeID = 4;
inline bool PBCardFormSend::has_cardthreeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBCardFormSend::set_has_cardthreeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBCardFormSend::clear_has_cardthreeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBCardFormSend::clear_cardthreeid() {
  cardthreeid_ = 0;
  clear_has_cardthreeid();
}
inline ::google::protobuf::int32 PBCardFormSend::cardthreeid() const {
  return cardthreeid_;
}
inline void PBCardFormSend::set_cardthreeid(::google::protobuf::int32 value) {
  set_has_cardthreeid();
  cardthreeid_ = value;
}

// optional int32 cardFourID = 5;
inline bool PBCardFormSend::has_cardfourid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBCardFormSend::set_has_cardfourid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBCardFormSend::clear_has_cardfourid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBCardFormSend::clear_cardfourid() {
  cardfourid_ = 0;
  clear_has_cardfourid();
}
inline ::google::protobuf::int32 PBCardFormSend::cardfourid() const {
  return cardfourid_;
}
inline void PBCardFormSend::set_cardfourid(::google::protobuf::int32 value) {
  set_has_cardfourid();
  cardfourid_ = value;
}

// -------------------------------------------------------------------

// PBCardFormReceive

// required int32 formResult = 1;
inline bool PBCardFormReceive::has_formresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBCardFormReceive::set_has_formresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBCardFormReceive::clear_has_formresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBCardFormReceive::clear_formresult() {
  formresult_ = 0;
  clear_has_formresult();
}
inline ::google::protobuf::int32 PBCardFormReceive::formresult() const {
  return formresult_;
}
inline void PBCardFormReceive::set_formresult(::google::protobuf::int32 value) {
  set_has_formresult();
  formresult_ = value;
}

// optional .PBAllCard cards = 2;
inline bool PBCardFormReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBCardFormReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBCardFormReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBCardFormReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBCardFormReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBCardFormReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBCardFormReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PBBattleSend

// required string battleID = 1;
inline bool PBBattleSend::has_battleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleSend::set_has_battleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleSend::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleSend::clear_battleid() {
  if (battleid_ != &::google::protobuf::internal::kEmptyString) {
    battleid_->clear();
  }
  clear_has_battleid();
}
inline const ::std::string& PBBattleSend::battleid() const {
  return *battleid_;
}
inline void PBBattleSend::set_battleid(const ::std::string& value) {
  set_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    battleid_ = new ::std::string;
  }
  battleid_->assign(value);
}
inline void PBBattleSend::set_battleid(const char* value) {
  set_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    battleid_ = new ::std::string;
  }
  battleid_->assign(value);
}
inline void PBBattleSend::set_battleid(const char* value, size_t size) {
  set_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    battleid_ = new ::std::string;
  }
  battleid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattleSend::mutable_battleid() {
  set_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    battleid_ = new ::std::string;
  }
  return battleid_;
}
inline ::std::string* PBBattleSend::release_battleid() {
  clear_has_battleid();
  if (battleid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = battleid_;
    battleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PBBattleAward

// required string awardID = 1;
inline bool PBBattleAward::has_awardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleAward::set_has_awardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleAward::clear_has_awardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleAward::clear_awardid() {
  if (awardid_ != &::google::protobuf::internal::kEmptyString) {
    awardid_->clear();
  }
  clear_has_awardid();
}
inline const ::std::string& PBBattleAward::awardid() const {
  return *awardid_;
}
inline void PBBattleAward::set_awardid(const ::std::string& value) {
  set_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    awardid_ = new ::std::string;
  }
  awardid_->assign(value);
}
inline void PBBattleAward::set_awardid(const char* value) {
  set_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    awardid_ = new ::std::string;
  }
  awardid_->assign(value);
}
inline void PBBattleAward::set_awardid(const char* value, size_t size) {
  set_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    awardid_ = new ::std::string;
  }
  awardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattleAward::mutable_awardid() {
  set_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    awardid_ = new ::std::string;
  }
  return awardid_;
}
inline ::std::string* PBBattleAward::release_awardid() {
  clear_has_awardid();
  if (awardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awardid_;
    awardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 awardType = 2;
inline bool PBBattleAward::has_awardtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBattleAward::set_has_awardtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBattleAward::clear_has_awardtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBattleAward::clear_awardtype() {
  awardtype_ = 0;
  clear_has_awardtype();
}
inline ::google::protobuf::int32 PBBattleAward::awardtype() const {
  return awardtype_;
}
inline void PBBattleAward::set_awardtype(::google::protobuf::int32 value) {
  set_has_awardtype();
  awardtype_ = value;
}

// required int32 awardNumber = 3;
inline bool PBBattleAward::has_awardnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBBattleAward::set_has_awardnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBBattleAward::clear_has_awardnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBBattleAward::clear_awardnumber() {
  awardnumber_ = 0;
  clear_has_awardnumber();
}
inline ::google::protobuf::int32 PBBattleAward::awardnumber() const {
  return awardnumber_;
}
inline void PBBattleAward::set_awardnumber(::google::protobuf::int32 value) {
  set_has_awardnumber();
  awardnumber_ = value;
}

// -------------------------------------------------------------------

// PBBattleReceive

// repeated .PBBattleAward allBattleAwards = 1;
inline int PBBattleReceive::allbattleawards_size() const {
  return allbattleawards_.size();
}
inline void PBBattleReceive::clear_allbattleawards() {
  allbattleawards_.Clear();
}
inline const ::PBBattleAward& PBBattleReceive::allbattleawards(int index) const {
  return allbattleawards_.Get(index);
}
inline ::PBBattleAward* PBBattleReceive::mutable_allbattleawards(int index) {
  return allbattleawards_.Mutable(index);
}
inline ::PBBattleAward* PBBattleReceive::add_allbattleawards() {
  return allbattleawards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBBattleAward >&
PBBattleReceive::allbattleawards() const {
  return allbattleawards_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBBattleAward >*
PBBattleReceive::mutable_allbattleawards() {
  return &allbattleawards_;
}

// -------------------------------------------------------------------

// PBSkillExpAdd

// required int32 cardItemId = 1;
inline bool PBSkillExpAdd::has_carditemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBSkillExpAdd::set_has_carditemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBSkillExpAdd::clear_has_carditemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBSkillExpAdd::clear_carditemid() {
  carditemid_ = 0;
  clear_has_carditemid();
}
inline ::google::protobuf::int32 PBSkillExpAdd::carditemid() const {
  return carditemid_;
}
inline void PBSkillExpAdd::set_carditemid(::google::protobuf::int32 value) {
  set_has_carditemid();
  carditemid_ = value;
}

// required int32 skillExp = 2;
inline bool PBSkillExpAdd::has_skillexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBSkillExpAdd::set_has_skillexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBSkillExpAdd::clear_has_skillexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBSkillExpAdd::clear_skillexp() {
  skillexp_ = 0;
  clear_has_skillexp();
}
inline ::google::protobuf::int32 PBSkillExpAdd::skillexp() const {
  return skillexp_;
}
inline void PBSkillExpAdd::set_skillexp(::google::protobuf::int32 value) {
  set_has_skillexp();
  skillexp_ = value;
}

// -------------------------------------------------------------------

// PBBattleResultSend

// required int32 battleResult = 1;
inline bool PBBattleResultSend::has_battleresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleResultSend::set_has_battleresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleResultSend::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleResultSend::clear_battleresult() {
  battleresult_ = 0;
  clear_has_battleresult();
}
inline ::google::protobuf::int32 PBBattleResultSend::battleresult() const {
  return battleresult_;
}
inline void PBBattleResultSend::set_battleresult(::google::protobuf::int32 value) {
  set_has_battleresult();
  battleresult_ = value;
}

// repeated .PBSkillExpAdd skillExpAdd = 2;
inline int PBBattleResultSend::skillexpadd_size() const {
  return skillexpadd_.size();
}
inline void PBBattleResultSend::clear_skillexpadd() {
  skillexpadd_.Clear();
}
inline const ::PBSkillExpAdd& PBBattleResultSend::skillexpadd(int index) const {
  return skillexpadd_.Get(index);
}
inline ::PBSkillExpAdd* PBBattleResultSend::mutable_skillexpadd(int index) {
  return skillexpadd_.Mutable(index);
}
inline ::PBSkillExpAdd* PBBattleResultSend::add_skillexpadd() {
  return skillexpadd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd >&
PBBattleResultSend::skillexpadd() const {
  return skillexpadd_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBSkillExpAdd >*
PBBattleResultSend::mutable_skillexpadd() {
  return &skillexpadd_;
}

// -------------------------------------------------------------------

// PBBattleResultReceive

// required .PBAllCard cards = 1;
inline bool PBBattleResultReceive::has_cards() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleResultReceive::set_has_cards() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleResultReceive::clear_has_cards() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleResultReceive::clear_cards() {
  if (cards_ != NULL) cards_->::PBAllCard::Clear();
  clear_has_cards();
}
inline const ::PBAllCard& PBBattleResultReceive::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::PBAllCard* PBBattleResultReceive::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::PBAllCard;
  return cards_;
}
inline ::PBAllCard* PBBattleResultReceive::release_cards() {
  clear_has_cards();
  ::PBAllCard* temp = cards_;
  cards_ = NULL;
  return temp;
}

// required .PBUser user = 2;
inline bool PBBattleResultReceive::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBattleResultReceive::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBattleResultReceive::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBattleResultReceive::clear_user() {
  if (user_ != NULL) user_->::PBUser::Clear();
  clear_has_user();
}
inline const ::PBUser& PBBattleResultReceive::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PBUser* PBBattleResultReceive::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PBUser;
  return user_;
}
inline ::PBUser* PBBattleResultReceive::release_user() {
  clear_has_user();
  ::PBUser* temp = user_;
  user_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MagicCard_2eproto__INCLUDED
