// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../include/MagicCard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSystemInfoReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSystemInfoReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAllCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAllCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAllFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAllFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHelpFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHelpFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBWaitingFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBWaitingFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriendSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriendSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFriendAgreeReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFriendAgreeReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAddFriendReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAddFriendReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBActivityBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBActivityBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAllGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAllGem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAllMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAllMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMissionAwardSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMissionAwardSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMissionAwardReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMissionAwardReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRunningAfficheReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRunningAfficheReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAwardSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAwardSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBAwardReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBAwardReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUseEnergyReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUseEnergyReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRegisterCheckSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRegisterCheckSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRegisterCheckReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRegisterCheckReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRegisterSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRegisterSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLoginSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLoginSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLoginReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLoginReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardLevelUpSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardLevelUpSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardLevelUpReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardLevelUpReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardEvolutionSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardEvolutionSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardEvolutionRecieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardEvolutionRecieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillLevelUpSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillLevelUpSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillLevelUpReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillLevelUpReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardFormSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardFormSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardFormReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardFormReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSkillExpAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSkillExpAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCardDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCardDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleResultSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleResultSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleResultReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleResultReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSoldCardSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSoldCardSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSoldCardReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSoldCardReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGetFriendValueReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGetFriendValueReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBShopBuySend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBShopBuySend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBShopBuySendReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBShopBuySendReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSearchFriendSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSearchFriendSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBSearchFriendReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSearchFriendReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDownloadSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDownloadSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBInvitationCodeSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBInvitationCodeSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBInvitationCodeReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBInvitationCodeReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEnergyReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEnergyReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBIAPSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBIAPSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBIAPRecv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBIAPRecv_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMainServerRegisterSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMainServerRegisterSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMainServerRegisterReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMainServerRegisterReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMainServerLoginSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMainServerLoginSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMainServerLoginReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMainServerLoginReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRankSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRankSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRankPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRankPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRankRecv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRankRecv_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBFiveSixStarCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFiveSixStarCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEvolutionSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEvolutionSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPassLevelPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPassLevelPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBCapacity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBCapacity_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGameNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGameNotice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MagicCard_2eproto() {
  protobuf_AddDesc_MagicCard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MagicCard.proto");
  GOOGLE_CHECK(file != NULL);
  PBServer_descriptor_ = file->message_type(0);
  static const int PBServer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, serverurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, serverport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, serverstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, payserverurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, payserverport_),
  };
  PBServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBServer_descriptor_,
      PBServer::default_instance_,
      PBServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBServer));
  PBSystemInfoReceive_descriptor_ = file->message_type(1);
  static const int PBSystemInfoReceive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, affiche_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, allserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, resourceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, battleversion_),
  };
  PBSystemInfoReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSystemInfoReceive_descriptor_,
      PBSystemInfoReceive::default_instance_,
      PBSystemInfoReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSystemInfoReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSystemInfoReceive));
  PBCard_descriptor_ = file->message_type(2);
  static const int PBCard_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, cardlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, cardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, skillexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, battleposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, vtlgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, strgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, tghgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, quigrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, mgcgrow_),
  };
  PBCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCard_descriptor_,
      PBCard::default_instance_,
      PBCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCard));
  PBAllCard_descriptor_ = file->message_type(3);
  static const int PBAllCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllCard, allcard_),
  };
  PBAllCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAllCard_descriptor_,
      PBAllCard::default_instance_,
      PBAllCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAllCard));
  PBBattleCard_descriptor_ = file->message_type(4);
  static const int PBBattleCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCard, battlecard_),
  };
  PBBattleCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleCard_descriptor_,
      PBBattleCard::default_instance_,
      PBBattleCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleCard));
  PBFriend_descriptor_ = file->message_type(5);
  static const int PBFriend_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, friendstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, isfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, isgetfriendvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, fightcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, capitorcardfightcapacity_),
  };
  PBFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriend_descriptor_,
      PBFriend::default_instance_,
      PBFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriend));
  PBAllFriend_descriptor_ = file->message_type(6);
  static const int PBAllFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllFriend, allfriend_),
  };
  PBAllFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAllFriend_descriptor_,
      PBAllFriend::default_instance_,
      PBAllFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAllFriend));
  PBHelpFriend_descriptor_ = file->message_type(7);
  static const int PBHelpFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHelpFriend, helpfriend_),
  };
  PBHelpFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHelpFriend_descriptor_,
      PBHelpFriend::default_instance_,
      PBHelpFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHelpFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHelpFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHelpFriend));
  PBWaitingFriend_descriptor_ = file->message_type(8);
  static const int PBWaitingFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWaitingFriend, waitingfriend_),
  };
  PBWaitingFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBWaitingFriend_descriptor_,
      PBWaitingFriend::default_instance_,
      PBWaitingFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWaitingFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBWaitingFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBWaitingFriend));
  PBFriendSend_descriptor_ = file->message_type(9);
  static const int PBFriendSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendSend, friendid_),
  };
  PBFriendSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriendSend_descriptor_,
      PBFriendSend::default_instance_,
      PBFriendSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriendSend));
  PBFriendAgreeReceive_descriptor_ = file->message_type(10);
  static const int PBFriendAgreeReceive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, agreeresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, waitings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, friends_),
  };
  PBFriendAgreeReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFriendAgreeReceive_descriptor_,
      PBFriendAgreeReceive::default_instance_,
      PBFriendAgreeReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFriendAgreeReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFriendAgreeReceive));
  PBAddFriendReceive_descriptor_ = file->message_type(11);
  static const int PBAddFriendReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddFriendReceive, addresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddFriendReceive, friends_),
  };
  PBAddFriendReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAddFriendReceive_descriptor_,
      PBAddFriendReceive::default_instance_,
      PBAddFriendReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddFriendReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAddFriendReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAddFriendReceive));
  PBActivityBattle_descriptor_ = file->message_type(12);
  static const int PBActivityBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityBattle, activitybattleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityBattle, fightcount_),
  };
  PBActivityBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBActivityBattle_descriptor_,
      PBActivityBattle::default_instance_,
      PBActivityBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBActivityBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBActivityBattle));
  PBBattle_descriptor_ = file->message_type(13);
  static const int PBBattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattle, pveprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattle, allactivitybattle_),
  };
  PBBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattle_descriptor_,
      PBBattle::default_instance_,
      PBBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattle));
  PBGem_descriptor_ = file->message_type(14);
  static const int PBGem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGem, gemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGem, gemnumber_),
  };
  PBGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGem_descriptor_,
      PBGem::default_instance_,
      PBGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGem));
  PBAllGem_descriptor_ = file->message_type(15);
  static const int PBAllGem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllGem, allgem_),
  };
  PBAllGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAllGem_descriptor_,
      PBAllGem::default_instance_,
      PBAllGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAllGem));
  PBMission_descriptor_ = file->message_type(16);
  static const int PBMission_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, ismissinfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, missonprogress_),
  };
  PBMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMission_descriptor_,
      PBMission::default_instance_,
      PBMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMission));
  PBAllMission_descriptor_ = file->message_type(17);
  static const int PBAllMission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllMission, allmission_),
  };
  PBAllMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAllMission_descriptor_,
      PBAllMission::default_instance_,
      PBAllMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAllMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAllMission));
  PBMissionAwardSend_descriptor_ = file->message_type(18);
  static const int PBMissionAwardSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardSend, missionid_),
  };
  PBMissionAwardSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMissionAwardSend_descriptor_,
      PBMissionAwardSend::default_instance_,
      PBMissionAwardSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMissionAwardSend));
  PBUser_descriptor_ = file->message_type(19);
  static const int PBUser_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, userexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, nextenergytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, buyenergytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, diamondnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, friendvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, goldnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, leadervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, hasmissionfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, bagmaxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, energyagentiacount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, captainindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, rechargeddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, wipeoutcount_),
  };
  PBUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUser_descriptor_,
      PBUser::default_instance_,
      PBUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUser));
  PBMissionAwardReceive_descriptor_ = file->message_type(20);
  static const int PBMissionAwardReceive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardReceive, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardReceive, gems_),
  };
  PBMissionAwardReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMissionAwardReceive_descriptor_,
      PBMissionAwardReceive::default_instance_,
      PBMissionAwardReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMissionAwardReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMissionAwardReceive));
  PBRunningAfficheReceive_descriptor_ = file->message_type(21);
  static const int PBRunningAfficheReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRunningAfficheReceive, affiches_),
  };
  PBRunningAfficheReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRunningAfficheReceive_descriptor_,
      PBRunningAfficheReceive::default_instance_,
      PBRunningAfficheReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRunningAfficheReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRunningAfficheReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRunningAfficheReceive));
  PBAwardSend_descriptor_ = file->message_type(22);
  static const int PBAwardSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardSend, awardtype_),
  };
  PBAwardSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAwardSend_descriptor_,
      PBAwardSend::default_instance_,
      PBAwardSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAwardSend));
  PBAwardReceive_descriptor_ = file->message_type(23);
  static const int PBAwardReceive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, awardresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, awardcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, gems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, awardgem_),
  };
  PBAwardReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBAwardReceive_descriptor_,
      PBAwardReceive::default_instance_,
      PBAwardReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAwardReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBAwardReceive));
  PBUseEnergyReceive_descriptor_ = file->message_type(24);
  static const int PBUseEnergyReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUseEnergyReceive, user_),
  };
  PBUseEnergyReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUseEnergyReceive_descriptor_,
      PBUseEnergyReceive::default_instance_,
      PBUseEnergyReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUseEnergyReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUseEnergyReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUseEnergyReceive));
  PBRegisterCheckSend_descriptor_ = file->message_type(25);
  static const int PBRegisterCheckSend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckSend, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckSend, usersourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckSend, useraccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckSend, userpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckSend, username_),
  };
  PBRegisterCheckSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRegisterCheckSend_descriptor_,
      PBRegisterCheckSend::default_instance_,
      PBRegisterCheckSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRegisterCheckSend));
  PBRegisterCheckReceive_descriptor_ = file->message_type(26);
  static const int PBRegisterCheckReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckReceive, result_),
  };
  PBRegisterCheckReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRegisterCheckReceive_descriptor_,
      PBRegisterCheckReceive::default_instance_,
      PBRegisterCheckReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterCheckReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRegisterCheckReceive));
  PBRegisterSend_descriptor_ = file->message_type(27);
  static const int PBRegisterSend_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, usersourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, useraccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, userpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, captainindex_),
  };
  PBRegisterSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRegisterSend_descriptor_,
      PBRegisterSend::default_instance_,
      PBRegisterSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRegisterSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRegisterSend));
  PBLoginSend_descriptor_ = file->message_type(28);
  static const int PBLoginSend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginSend, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginSend, usersourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginSend, useraccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginSend, userpasswd_),
  };
  PBLoginSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLoginSend_descriptor_,
      PBLoginSend::default_instance_,
      PBLoginSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLoginSend));
  PBLoginReceive_descriptor_ = file->message_type(29);
  static const int PBLoginReceive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, battlecards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, gems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, fightcapacity_),
  };
  PBLoginReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLoginReceive_descriptor_,
      PBLoginReceive::default_instance_,
      PBLoginReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLoginReceive));
  PBCardLevelUpSend_descriptor_ = file->message_type(30);
  static const int PBCardLevelUpSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpSend, upcarditemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpSend, eatcarditemids_),
  };
  PBCardLevelUpSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardLevelUpSend_descriptor_,
      PBCardLevelUpSend::default_instance_,
      PBCardLevelUpSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardLevelUpSend));
  PBCardLevelUpReceive_descriptor_ = file->message_type(31);
  static const int PBCardLevelUpReceive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, upresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, goldnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, targetcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, fightcapacity_),
  };
  PBCardLevelUpReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardLevelUpReceive_descriptor_,
      PBCardLevelUpReceive::default_instance_,
      PBCardLevelUpReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardLevelUpReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardLevelUpReceive));
  PBCardEvolutionSend_descriptor_ = file->message_type(32);
  static const int PBCardEvolutionSend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, targetcarditemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, targetgemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, materialcarditemids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, gemid_),
  };
  PBCardEvolutionSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardEvolutionSend_descriptor_,
      PBCardEvolutionSend::default_instance_,
      PBCardEvolutionSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardEvolutionSend));
  PBCardEvolutionRecieve_descriptor_ = file->message_type(33);
  static const int PBCardEvolutionRecieve_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionRecieve, evolutionresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionRecieve, targetcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionRecieve, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionRecieve, gems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionRecieve, allgoldnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionRecieve, fightcapacity_),
  };
  PBCardEvolutionRecieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardEvolutionRecieve_descriptor_,
      PBCardEvolutionRecieve::default_instance_,
      PBCardEvolutionRecieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionRecieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardEvolutionRecieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardEvolutionRecieve));
  PBSkillLevelUpSend_descriptor_ = file->message_type(34);
  static const int PBSkillLevelUpSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpSend, upcarditemid_),
  };
  PBSkillLevelUpSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillLevelUpSend_descriptor_,
      PBSkillLevelUpSend::default_instance_,
      PBSkillLevelUpSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillLevelUpSend));
  PBSkillLevelUpReceive_descriptor_ = file->message_type(35);
  static const int PBSkillLevelUpReceive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, skillupresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, targetcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, fightcapacity_),
  };
  PBSkillLevelUpReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillLevelUpReceive_descriptor_,
      PBSkillLevelUpReceive::default_instance_,
      PBSkillLevelUpReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillLevelUpReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillLevelUpReceive));
  PBCardFormSend_descriptor_ = file->message_type(36);
  static const int PBCardFormSend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, captaincardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, cardoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, cardtwoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, cardthreeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, cardfourid_),
  };
  PBCardFormSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardFormSend_descriptor_,
      PBCardFormSend::default_instance_,
      PBCardFormSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardFormSend));
  PBCardFormReceive_descriptor_ = file->message_type(37);
  static const int PBCardFormReceive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormReceive, formresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormReceive, fightcapacity_),
  };
  PBCardFormReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardFormReceive_descriptor_,
      PBCardFormReceive::default_instance_,
      PBCardFormReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardFormReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardFormReceive));
  PBBattleSend_descriptor_ = file->message_type(38);
  static const int PBBattleSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleSend, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleSend, iswipeout_),
  };
  PBBattleSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleSend_descriptor_,
      PBBattleSend::default_instance_,
      PBBattleSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleSend));
  PBBattleAward_descriptor_ = file->message_type(39);
  static const int PBBattleAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, awardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, awardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, awardnumber_),
  };
  PBBattleAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleAward_descriptor_,
      PBBattleAward::default_instance_,
      PBBattleAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleAward));
  PBBattleReceive_descriptor_ = file->message_type(40);
  static const int PBBattleReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleReceive, allbattleawards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleReceive, user_),
  };
  PBBattleReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleReceive_descriptor_,
      PBBattleReceive::default_instance_,
      PBBattleReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleReceive));
  PBSkillExpAdd_descriptor_ = file->message_type(41);
  static const int PBSkillExpAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillExpAdd, carditemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillExpAdd, skillexp_),
  };
  PBSkillExpAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSkillExpAdd_descriptor_,
      PBSkillExpAdd::default_instance_,
      PBSkillExpAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillExpAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSkillExpAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSkillExpAdd));
  PBCardDBInfo_descriptor_ = file->message_type(42);
  static const int PBCardDBInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, cardskilla_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, cardskillp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, vtlstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, strstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, tghstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, quistar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, mgcstar_),
  };
  PBCardDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCardDBInfo_descriptor_,
      PBCardDBInfo::default_instance_,
      PBCardDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCardDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCardDBInfo));
  PBBattleResultSend_descriptor_ = file->message_type(43);
  static const int PBBattleResultSend_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, battleresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, skillexpadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, isfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, battleprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, cardinfo_),
  };
  PBBattleResultSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleResultSend_descriptor_,
      PBBattleResultSend::default_instance_,
      PBBattleResultSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleResultSend));
  PBBattleResultReceive_descriptor_ = file->message_type(44);
  static const int PBBattleResultReceive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, gems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, hasfinishedtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, dbinforesult_),
  };
  PBBattleResultReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleResultReceive_descriptor_,
      PBBattleResultReceive::default_instance_,
      PBBattleResultReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleResultReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleResultReceive));
  PBSoldCardSend_descriptor_ = file->message_type(45);
  static const int PBSoldCardSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSoldCardSend, carditemid_),
  };
  PBSoldCardSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSoldCardSend_descriptor_,
      PBSoldCardSend::default_instance_,
      PBSoldCardSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSoldCardSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSoldCardSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSoldCardSend));
  PBSoldCardReceive_descriptor_ = file->message_type(46);
  static const int PBSoldCardReceive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSoldCardReceive, soldresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSoldCardReceive, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSoldCardReceive, goldnumber_),
  };
  PBSoldCardReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSoldCardReceive_descriptor_,
      PBSoldCardReceive::default_instance_,
      PBSoldCardReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSoldCardReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSoldCardReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSoldCardReceive));
  PBGetFriendValueReceive_descriptor_ = file->message_type(47);
  static const int PBGetFriendValueReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGetFriendValueReceive, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGetFriendValueReceive, friendvalue_),
  };
  PBGetFriendValueReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGetFriendValueReceive_descriptor_,
      PBGetFriendValueReceive::default_instance_,
      PBGetFriendValueReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGetFriendValueReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGetFriendValueReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGetFriendValueReceive));
  PBShopBuySend_descriptor_ = file->message_type(48);
  static const int PBShopBuySend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShopBuySend, buytype_),
  };
  PBShopBuySend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBShopBuySend_descriptor_,
      PBShopBuySend::default_instance_,
      PBShopBuySend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShopBuySend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShopBuySend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBShopBuySend));
  PBShopBuySendReceive_descriptor_ = file->message_type(49);
  static const int PBShopBuySendReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShopBuySendReceive, user_),
  };
  PBShopBuySendReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBShopBuySendReceive_descriptor_,
      PBShopBuySendReceive::default_instance_,
      PBShopBuySendReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShopBuySendReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBShopBuySendReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBShopBuySendReceive));
  PBSearchFriendSend_descriptor_ = file->message_type(50);
  static const int PBSearchFriendSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchFriendSend, searchkey_),
  };
  PBSearchFriendSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSearchFriendSend_descriptor_,
      PBSearchFriendSend::default_instance_,
      PBSearchFriendSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchFriendSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchFriendSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSearchFriendSend));
  PBSearchFriendReceive_descriptor_ = file->message_type(51);
  static const int PBSearchFriendReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchFriendReceive, friends_),
  };
  PBSearchFriendReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBSearchFriendReceive_descriptor_,
      PBSearchFriendReceive::default_instance_,
      PBSearchFriendReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchFriendReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSearchFriendReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBSearchFriendReceive));
  PBDownloadSend_descriptor_ = file->message_type(52);
  static const int PBDownloadSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDownloadSend, resourceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDownloadSend, pointmark_),
  };
  PBDownloadSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDownloadSend_descriptor_,
      PBDownloadSend::default_instance_,
      PBDownloadSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDownloadSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDownloadSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDownloadSend));
  PBInvitationCodeSend_descriptor_ = file->message_type(53);
  static const int PBInvitationCodeSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitationCodeSend, invitationcode_),
  };
  PBInvitationCodeSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBInvitationCodeSend_descriptor_,
      PBInvitationCodeSend::default_instance_,
      PBInvitationCodeSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitationCodeSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitationCodeSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBInvitationCodeSend));
  PBInvitationCodeReceive_descriptor_ = file->message_type(54);
  static const int PBInvitationCodeReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitationCodeReceive, result_),
  };
  PBInvitationCodeReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBInvitationCodeReceive_descriptor_,
      PBInvitationCodeReceive::default_instance_,
      PBInvitationCodeReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitationCodeReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInvitationCodeReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBInvitationCodeReceive));
  PBEnergyReceive_descriptor_ = file->message_type(55);
  static const int PBEnergyReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnergyReceive, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnergyReceive, nextenergytime_),
  };
  PBEnergyReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEnergyReceive_descriptor_,
      PBEnergyReceive::default_instance_,
      PBEnergyReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnergyReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEnergyReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEnergyReceive));
  PBIAPSend_descriptor_ = file->message_type(56);
  static const int PBIAPSend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPSend, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPSend, serverurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPSend, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPSend, usersourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPSend, authorizationdata_),
  };
  PBIAPSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBIAPSend_descriptor_,
      PBIAPSend::default_instance_,
      PBIAPSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBIAPSend));
  PBIAPRecv_descriptor_ = file->message_type(57);
  static const int PBIAPRecv_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPRecv, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPRecv, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPRecv, orderid_),
  };
  PBIAPRecv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBIAPRecv_descriptor_,
      PBIAPRecv::default_instance_,
      PBIAPRecv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPRecv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIAPRecv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBIAPRecv));
  PBMainServerRegisterSend_descriptor_ = file->message_type(58);
  static const int PBMainServerRegisterSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerRegisterSend, useraccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerRegisterSend, userpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerRegisterSend, usersourcetype_),
  };
  PBMainServerRegisterSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMainServerRegisterSend_descriptor_,
      PBMainServerRegisterSend::default_instance_,
      PBMainServerRegisterSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerRegisterSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerRegisterSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMainServerRegisterSend));
  PBMainServerRegisterReceive_descriptor_ = file->message_type(59);
  static const int PBMainServerRegisterReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerRegisterReceive, registerresult_),
  };
  PBMainServerRegisterReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMainServerRegisterReceive_descriptor_,
      PBMainServerRegisterReceive::default_instance_,
      PBMainServerRegisterReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerRegisterReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerRegisterReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMainServerRegisterReceive));
  PBMainServerLoginSend_descriptor_ = file->message_type(60);
  static const int PBMainServerLoginSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerLoginSend, useraccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerLoginSend, userpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerLoginSend, usersourcetype_),
  };
  PBMainServerLoginSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMainServerLoginSend_descriptor_,
      PBMainServerLoginSend::default_instance_,
      PBMainServerLoginSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerLoginSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerLoginSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMainServerLoginSend));
  PBMainServerLoginReceive_descriptor_ = file->message_type(61);
  static const int PBMainServerLoginReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerLoginReceive, loginresult_),
  };
  PBMainServerLoginReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMainServerLoginReceive_descriptor_,
      PBMainServerLoginReceive::default_instance_,
      PBMainServerLoginReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerLoginReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMainServerLoginReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMainServerLoginReceive));
  PBRankSend_descriptor_ = file->message_type(62);
  static const int PBRankSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankSend, rankways_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankSend, reqways_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankSend, count_),
  };
  PBRankSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRankSend_descriptor_,
      PBRankSend::default_instance_,
      PBRankSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRankSend));
  PBRankPlayerInfo_descriptor_ = file->message_type(63);
  static const int PBRankPlayerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankPlayerInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankPlayerInfo, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankPlayerInfo, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankPlayerInfo, fightcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankPlayerInfo, capitorcardfightcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankPlayerInfo, playerrank_),
  };
  PBRankPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRankPlayerInfo_descriptor_,
      PBRankPlayerInfo::default_instance_,
      PBRankPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRankPlayerInfo));
  PBRankRecv_descriptor_ = file->message_type(64);
  static const int PBRankRecv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankRecv, randplayerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankRecv, resultstatus_),
  };
  PBRankRecv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRankRecv_descriptor_,
      PBRankRecv::default_instance_,
      PBRankRecv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankRecv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankRecv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRankRecv));
  PBFiveSixStarCard_descriptor_ = file->message_type(65);
  static const int PBFiveSixStarCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFiveSixStarCard, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFiveSixStarCard, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFiveSixStarCard, cardstar_),
  };
  PBFiveSixStarCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFiveSixStarCard_descriptor_,
      PBFiveSixStarCard::default_instance_,
      PBFiveSixStarCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFiveSixStarCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFiveSixStarCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFiveSixStarCard));
  PBEvolutionSuccess_descriptor_ = file->message_type(66);
  static const int PBEvolutionSuccess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEvolutionSuccess, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEvolutionSuccess, precardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEvolutionSuccess, cardid_),
  };
  PBEvolutionSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEvolutionSuccess_descriptor_,
      PBEvolutionSuccess::default_instance_,
      PBEvolutionSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEvolutionSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEvolutionSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEvolutionSuccess));
  PBPassLevelPlayerInfo_descriptor_ = file->message_type(67);
  static const int PBPassLevelPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPassLevelPlayerInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPassLevelPlayerInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPassLevelPlayerInfo, levelname_),
  };
  PBPassLevelPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPassLevelPlayerInfo_descriptor_,
      PBPassLevelPlayerInfo::default_instance_,
      PBPassLevelPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPassLevelPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPassLevelPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPassLevelPlayerInfo));
  PBCapacity_descriptor_ = file->message_type(68);
  static const int PBCapacity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCapacity, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCapacity, capacitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCapacity, capacity_),
  };
  PBCapacity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBCapacity_descriptor_,
      PBCapacity::default_instance_,
      PBCapacity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCapacity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBCapacity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBCapacity));
  PBGameNotice_descriptor_ = file->message_type(69);
  static const int PBGameNotice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameNotice, fivesixstarcardnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameNotice, evolutionsuccessnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameNotice, passlevelnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameNotice, capacitynotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameNotice, gameactiveinfo_),
  };
  PBGameNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGameNotice_descriptor_,
      PBGameNotice::default_instance_,
      PBGameNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGameNotice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MagicCard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBServer_descriptor_, &PBServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSystemInfoReceive_descriptor_, &PBSystemInfoReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCard_descriptor_, &PBCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAllCard_descriptor_, &PBAllCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleCard_descriptor_, &PBBattleCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriend_descriptor_, &PBFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAllFriend_descriptor_, &PBAllFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHelpFriend_descriptor_, &PBHelpFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBWaitingFriend_descriptor_, &PBWaitingFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriendSend_descriptor_, &PBFriendSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFriendAgreeReceive_descriptor_, &PBFriendAgreeReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAddFriendReceive_descriptor_, &PBAddFriendReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBActivityBattle_descriptor_, &PBActivityBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattle_descriptor_, &PBBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGem_descriptor_, &PBGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAllGem_descriptor_, &PBAllGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMission_descriptor_, &PBMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAllMission_descriptor_, &PBAllMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMissionAwardSend_descriptor_, &PBMissionAwardSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUser_descriptor_, &PBUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMissionAwardReceive_descriptor_, &PBMissionAwardReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRunningAfficheReceive_descriptor_, &PBRunningAfficheReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAwardSend_descriptor_, &PBAwardSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBAwardReceive_descriptor_, &PBAwardReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUseEnergyReceive_descriptor_, &PBUseEnergyReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRegisterCheckSend_descriptor_, &PBRegisterCheckSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRegisterCheckReceive_descriptor_, &PBRegisterCheckReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRegisterSend_descriptor_, &PBRegisterSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLoginSend_descriptor_, &PBLoginSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLoginReceive_descriptor_, &PBLoginReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardLevelUpSend_descriptor_, &PBCardLevelUpSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardLevelUpReceive_descriptor_, &PBCardLevelUpReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardEvolutionSend_descriptor_, &PBCardEvolutionSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardEvolutionRecieve_descriptor_, &PBCardEvolutionRecieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillLevelUpSend_descriptor_, &PBSkillLevelUpSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillLevelUpReceive_descriptor_, &PBSkillLevelUpReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardFormSend_descriptor_, &PBCardFormSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardFormReceive_descriptor_, &PBCardFormReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleSend_descriptor_, &PBBattleSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleAward_descriptor_, &PBBattleAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleReceive_descriptor_, &PBBattleReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSkillExpAdd_descriptor_, &PBSkillExpAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCardDBInfo_descriptor_, &PBCardDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleResultSend_descriptor_, &PBBattleResultSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleResultReceive_descriptor_, &PBBattleResultReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSoldCardSend_descriptor_, &PBSoldCardSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSoldCardReceive_descriptor_, &PBSoldCardReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGetFriendValueReceive_descriptor_, &PBGetFriendValueReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBShopBuySend_descriptor_, &PBShopBuySend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBShopBuySendReceive_descriptor_, &PBShopBuySendReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSearchFriendSend_descriptor_, &PBSearchFriendSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBSearchFriendReceive_descriptor_, &PBSearchFriendReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDownloadSend_descriptor_, &PBDownloadSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBInvitationCodeSend_descriptor_, &PBInvitationCodeSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBInvitationCodeReceive_descriptor_, &PBInvitationCodeReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEnergyReceive_descriptor_, &PBEnergyReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBIAPSend_descriptor_, &PBIAPSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBIAPRecv_descriptor_, &PBIAPRecv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMainServerRegisterSend_descriptor_, &PBMainServerRegisterSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMainServerRegisterReceive_descriptor_, &PBMainServerRegisterReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMainServerLoginSend_descriptor_, &PBMainServerLoginSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMainServerLoginReceive_descriptor_, &PBMainServerLoginReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRankSend_descriptor_, &PBRankSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRankPlayerInfo_descriptor_, &PBRankPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRankRecv_descriptor_, &PBRankRecv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFiveSixStarCard_descriptor_, &PBFiveSixStarCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEvolutionSuccess_descriptor_, &PBEvolutionSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPassLevelPlayerInfo_descriptor_, &PBPassLevelPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBCapacity_descriptor_, &PBCapacity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGameNotice_descriptor_, &PBGameNotice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MagicCard_2eproto() {
  delete PBServer::default_instance_;
  delete PBServer_reflection_;
  delete PBSystemInfoReceive::default_instance_;
  delete PBSystemInfoReceive_reflection_;
  delete PBCard::default_instance_;
  delete PBCard_reflection_;
  delete PBAllCard::default_instance_;
  delete PBAllCard_reflection_;
  delete PBBattleCard::default_instance_;
  delete PBBattleCard_reflection_;
  delete PBFriend::default_instance_;
  delete PBFriend_reflection_;
  delete PBAllFriend::default_instance_;
  delete PBAllFriend_reflection_;
  delete PBHelpFriend::default_instance_;
  delete PBHelpFriend_reflection_;
  delete PBWaitingFriend::default_instance_;
  delete PBWaitingFriend_reflection_;
  delete PBFriendSend::default_instance_;
  delete PBFriendSend_reflection_;
  delete PBFriendAgreeReceive::default_instance_;
  delete PBFriendAgreeReceive_reflection_;
  delete PBAddFriendReceive::default_instance_;
  delete PBAddFriendReceive_reflection_;
  delete PBActivityBattle::default_instance_;
  delete PBActivityBattle_reflection_;
  delete PBBattle::default_instance_;
  delete PBBattle_reflection_;
  delete PBGem::default_instance_;
  delete PBGem_reflection_;
  delete PBAllGem::default_instance_;
  delete PBAllGem_reflection_;
  delete PBMission::default_instance_;
  delete PBMission_reflection_;
  delete PBAllMission::default_instance_;
  delete PBAllMission_reflection_;
  delete PBMissionAwardSend::default_instance_;
  delete PBMissionAwardSend_reflection_;
  delete PBUser::default_instance_;
  delete PBUser_reflection_;
  delete PBMissionAwardReceive::default_instance_;
  delete PBMissionAwardReceive_reflection_;
  delete PBRunningAfficheReceive::default_instance_;
  delete PBRunningAfficheReceive_reflection_;
  delete PBAwardSend::default_instance_;
  delete PBAwardSend_reflection_;
  delete PBAwardReceive::default_instance_;
  delete PBAwardReceive_reflection_;
  delete PBUseEnergyReceive::default_instance_;
  delete PBUseEnergyReceive_reflection_;
  delete PBRegisterCheckSend::default_instance_;
  delete PBRegisterCheckSend_reflection_;
  delete PBRegisterCheckReceive::default_instance_;
  delete PBRegisterCheckReceive_reflection_;
  delete PBRegisterSend::default_instance_;
  delete PBRegisterSend_reflection_;
  delete PBLoginSend::default_instance_;
  delete PBLoginSend_reflection_;
  delete PBLoginReceive::default_instance_;
  delete PBLoginReceive_reflection_;
  delete PBCardLevelUpSend::default_instance_;
  delete PBCardLevelUpSend_reflection_;
  delete PBCardLevelUpReceive::default_instance_;
  delete PBCardLevelUpReceive_reflection_;
  delete PBCardEvolutionSend::default_instance_;
  delete PBCardEvolutionSend_reflection_;
  delete PBCardEvolutionRecieve::default_instance_;
  delete PBCardEvolutionRecieve_reflection_;
  delete PBSkillLevelUpSend::default_instance_;
  delete PBSkillLevelUpSend_reflection_;
  delete PBSkillLevelUpReceive::default_instance_;
  delete PBSkillLevelUpReceive_reflection_;
  delete PBCardFormSend::default_instance_;
  delete PBCardFormSend_reflection_;
  delete PBCardFormReceive::default_instance_;
  delete PBCardFormReceive_reflection_;
  delete PBBattleSend::default_instance_;
  delete PBBattleSend_reflection_;
  delete PBBattleAward::default_instance_;
  delete PBBattleAward_reflection_;
  delete PBBattleReceive::default_instance_;
  delete PBBattleReceive_reflection_;
  delete PBSkillExpAdd::default_instance_;
  delete PBSkillExpAdd_reflection_;
  delete PBCardDBInfo::default_instance_;
  delete PBCardDBInfo_reflection_;
  delete PBBattleResultSend::default_instance_;
  delete PBBattleResultSend_reflection_;
  delete PBBattleResultReceive::default_instance_;
  delete PBBattleResultReceive_reflection_;
  delete PBSoldCardSend::default_instance_;
  delete PBSoldCardSend_reflection_;
  delete PBSoldCardReceive::default_instance_;
  delete PBSoldCardReceive_reflection_;
  delete PBGetFriendValueReceive::default_instance_;
  delete PBGetFriendValueReceive_reflection_;
  delete PBShopBuySend::default_instance_;
  delete PBShopBuySend_reflection_;
  delete PBShopBuySendReceive::default_instance_;
  delete PBShopBuySendReceive_reflection_;
  delete PBSearchFriendSend::default_instance_;
  delete PBSearchFriendSend_reflection_;
  delete PBSearchFriendReceive::default_instance_;
  delete PBSearchFriendReceive_reflection_;
  delete PBDownloadSend::default_instance_;
  delete PBDownloadSend_reflection_;
  delete PBInvitationCodeSend::default_instance_;
  delete PBInvitationCodeSend_reflection_;
  delete PBInvitationCodeReceive::default_instance_;
  delete PBInvitationCodeReceive_reflection_;
  delete PBEnergyReceive::default_instance_;
  delete PBEnergyReceive_reflection_;
  delete PBIAPSend::default_instance_;
  delete PBIAPSend_reflection_;
  delete PBIAPRecv::default_instance_;
  delete PBIAPRecv_reflection_;
  delete PBMainServerRegisterSend::default_instance_;
  delete PBMainServerRegisterSend_reflection_;
  delete PBMainServerRegisterReceive::default_instance_;
  delete PBMainServerRegisterReceive_reflection_;
  delete PBMainServerLoginSend::default_instance_;
  delete PBMainServerLoginSend_reflection_;
  delete PBMainServerLoginReceive::default_instance_;
  delete PBMainServerLoginReceive_reflection_;
  delete PBRankSend::default_instance_;
  delete PBRankSend_reflection_;
  delete PBRankPlayerInfo::default_instance_;
  delete PBRankPlayerInfo_reflection_;
  delete PBRankRecv::default_instance_;
  delete PBRankRecv_reflection_;
  delete PBFiveSixStarCard::default_instance_;
  delete PBFiveSixStarCard_reflection_;
  delete PBEvolutionSuccess::default_instance_;
  delete PBEvolutionSuccess_reflection_;
  delete PBPassLevelPlayerInfo::default_instance_;
  delete PBPassLevelPlayerInfo_reflection_;
  delete PBCapacity::default_instance_;
  delete PBCapacity_reflection_;
  delete PBGameNotice::default_instance_;
  delete PBGameNotice_reflection_;
}

void protobuf_AddDesc_MagicCard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MagicCard.proto\"\210\001\n\010PBServer\022\022\n\nserver"
    "Name\030\001 \001(\t\022\021\n\tserverUrl\030\002 \001(\t\022\022\n\nserverP"
    "ort\030\003 \001(\005\022\024\n\014serverStatus\030\004 \001(\005\022\024\n\014paySe"
    "rverUrl\030\005 \001(\t\022\025\n\rpayServerPort\030\006 \001(\005\"\211\001\n"
    "\023PBSystemInfoReceive\022\017\n\007affiche\030\001 \001(\t\022\034\n"
    "\tallServer\030\002 \003(\0132\t.PBServer\022\023\n\013gameVersi"
    "on\030\003 \001(\t\022\027\n\017resourceVersion\030\004 \001(\t\022\025\n\rbat"
    "tleVersion\030\005 \001(\t\"\361\001\n\006PBCard\022\016\n\006itemID\030\001 "
    "\001(\005\022\016\n\006cardID\030\002 \001(\t\022\021\n\tcardLevel\030\003 \001(\005\022\017"
    "\n\007cardExp\030\004 \001(\005\022\020\n\010skillExp\030\005 \001(\005\022\022\n\nski"
    "llLevel\030\006 \001(\005\022\020\n\010weaponID\030\007 \001(\005\022\026\n\016battl"
    "ePosition\030\010 \001(\005\022\017\n\007VTLGrow\030\t \001(\005\022\017\n\007STRG"
    "row\030\n \001(\005\022\017\n\007TGHGrow\030\013 \001(\005\022\017\n\007QUIGrow\030\014 "
    "\001(\005\022\017\n\007MGCGrow\030\r \001(\005\"%\n\tPBAllCard\022\030\n\007all"
    "Card\030\001 \003(\0132\007.PBCard\"+\n\014PBBattleCard\022\033\n\nb"
    "attleCard\030\001 \003(\0132\007.PBCard\"\335\001\n\010PBFriend\022\020\n"
    "\010friendID\030\001 \001(\005\022\022\n\nfriendName\030\002 \001(\t\022\023\n\013f"
    "riendLevel\030\003 \001(\005\022\033\n\nfriendCard\030\004 \001(\0132\007.P"
    "BCard\022\024\n\014FriendStatus\030\005 \001(\005\022\020\n\010isFriend\030"
    "\006 \001(\010\022\030\n\020isGetFriendValue\030\007 \001(\010\022\025\n\rfight"
    "Capacity\030\010 \001(\005\022 \n\030capitorCardFightCapaci"
    "ty\030\t \001(\005\"+\n\013PBAllFriend\022\034\n\tallFriend\030\001 \003"
    "(\0132\t.PBFriend\"-\n\014PBHelpFriend\022\035\n\nhelpFri"
    "end\030\001 \003(\0132\t.PBFriend\"3\n\017PBWaitingFriend\022"
    " \n\rwaitingFriend\030\001 \003(\0132\t.PBFriend\" \n\014PBF"
    "riendSend\022\020\n\010friendID\030\001 \001(\005\"n\n\024PBFriendA"
    "greeReceive\022\023\n\013agreeResult\030\001 \001(\005\022\"\n\010wait"
    "ings\030\002 \001(\0132\020.PBWaitingFriend\022\035\n\007friends\030"
    "\003 \001(\0132\014.PBAllFriend\"F\n\022PBAddFriendReceiv"
    "e\022\021\n\taddResult\030\001 \001(\005\022\035\n\007friends\030\002 \001(\0132\014."
    "PBAllFriend\"@\n\020PBActivityBattle\022\030\n\020activ"
    "ityBattleID\030\001 \001(\t\022\022\n\nfightCount\030\002 \001(\005\"M\n"
    "\010PBBattle\022\023\n\013pveProgress\030\001 \001(\t\022,\n\021allAct"
    "ivityBattle\030\002 \003(\0132\021.PBActivityBattle\")\n\005"
    "PBGem\022\r\n\005gemID\030\001 \001(\t\022\021\n\tgemNumber\030\002 \001(\005\""
    "\"\n\010PBAllGem\022\026\n\006allGem\030\001 \003(\0132\006.PBGem\"P\n\tP"
    "BMission\022\021\n\tmissionID\030\001 \001(\005\022\030\n\020isMissinF"
    "inished\030\002 \001(\010\022\026\n\016missonProgress\030\003 \001(\t\".\n"
    "\014PBAllMission\022\036\n\nallMission\030\001 \003(\0132\n.PBMi"
    "ssion\"\'\n\022PBMissionAwardSend\022\021\n\tmissionID"
    "\030\001 \003(\005\"\365\002\n\006PBUser\022\016\n\006userID\030\001 \001(\005\022\020\n\010use"
    "rName\030\002 \001(\t\022\021\n\tuserLevel\030\003 \001(\005\022\017\n\007userEx"
    "p\030\004 \001(\005\022\016\n\006energy\030\005 \001(\005\022\026\n\016nextEnergyTim"
    "e\030\006 \001(\005\022\025\n\rbuyEnergyTime\030\007 \001(\005\022\025\n\rdiamon"
    "dNumber\030\010 \001(\005\022\023\n\013friendValue\030\t \001(\005\022\022\n\ngo"
    "ldNumber\030\n \001(\005\022\023\n\013leaderValue\030\013 \001(\005\022\032\n\022h"
    "asMissionFinished\030\014 \001(\010\022\023\n\013bagMaxCount\030\r"
    " \001(\005\022\032\n\022energyAgentiaCount\030\016 \001(\005\022\024\n\014capt"
    "ainIndex\030\017 \001(\005\022\030\n\020rechargedDiamond\030\020 \001(\005"
    "\022\024\n\014wipeOutCount\030\021 \001(\005\"b\n\025PBMissionAward"
    "Receive\022\025\n\004user\030\001 \001(\0132\007.PBUser\022\031\n\005cards\030"
    "\002 \001(\0132\n.PBAllCard\022\027\n\004gems\030\003 \001(\0132\t.PBAllG"
    "em\"+\n\027PBRunningAfficheReceive\022\020\n\010affiche"
    "s\030\001 \003(\t\" \n\013PBAwardSend\022\021\n\tawardType\030\001 \001("
    "\005\"\246\001\n\016PBAwardReceive\022\023\n\013awardResult\030\001 \001("
    "\005\022\025\n\004user\030\002 \001(\0132\007.PBUser\022\031\n\005cards\030\003 \001(\0132"
    "\n.PBAllCard\022\032\n\tawardCard\030\004 \003(\0132\007.PBCard\022"
    "\027\n\004gems\030\005 \001(\0132\t.PBAllGem\022\030\n\010awardGem\030\006 \003"
    "(\0132\006.PBGem\"+\n\022PBUseEnergyReceive\022\025\n\004user"
    "\030\002 \001(\0132\007.PBUser\"|\n\023PBRegisterCheckSend\022\022"
    "\n\nmacAddress\030\001 \001(\t\022\026\n\016userSourceType\030\002 \001"
    "(\005\022\023\n\013userAccount\030\003 \001(\t\022\022\n\nuserPasswd\030\004 "
    "\001(\t\022\020\n\010userName\030\005 \001(\t\"(\n\026PBRegisterCheck"
    "Receive\022\016\n\006result\030\001 \001(\005\"\215\001\n\016PBRegisterSe"
    "nd\022\022\n\nmacAddress\030\001 \001(\t\022\026\n\016userSourceType"
    "\030\002 \001(\005\022\023\n\013userAccount\030\003 \001(\t\022\022\n\nuserPassw"
    "d\030\004 \001(\t\022\020\n\010userName\030\005 \001(\t\022\024\n\014captainInde"
    "x\030\006 \001(\005\"b\n\013PBLoginSend\022\022\n\nmacAddress\030\001 \001"
    "(\t\022\026\n\016userSourceType\030\002 \001(\005\022\023\n\013userAccoun"
    "t\030\003 \001(\t\022\022\n\nuserPasswd\030\004 \001(\t\"\361\001\n\016PBLoginR"
    "eceive\022\016\n\006result\030\001 \001(\005\022\025\n\004user\030\002 \001(\0132\007.P"
    "BUser\022\031\n\006battle\030\003 \001(\0132\t.PBBattle\022\031\n\005card"
    "s\030\004 \001(\0132\n.PBAllCard\022\037\n\010missions\030\005 \001(\0132\r."
    "PBAllMission\022\"\n\013battleCards\030\006 \001(\0132\r.PBBa"
    "ttleCard\022\027\n\004gems\030\007 \001(\0132\t.PBAllGem\022\r\n\005tok"
    "en\030\010 \001(\t\022\025\n\rfightCapacity\030\t \001(\005\"A\n\021PBCar"
    "dLevelUpSend\022\024\n\014upCardItemID\030\001 \001(\005\022\026\n\016ea"
    "tCardItemIDs\030\002 \003(\005\"\213\001\n\024PBCardLevelUpRece"
    "ive\022\020\n\010upResult\030\001 \001(\005\022\031\n\005cards\030\002 \001(\0132\n.P"
    "BAllCard\022\022\n\ngoldNumber\030\003 \001(\005\022\033\n\ntargetCa"
    "rd\030\004 \001(\0132\007.PBCard\022\025\n\rfightCapacity\030\005 \001(\005"
    "\"p\n\023PBCardEvolutionSend\022\030\n\020targetCardIte"
    "mID\030\001 \001(\005\022\023\n\013targetGemId\030\002 \001(\t\022\033\n\023materi"
    "alCardItemIDs\030\003 \003(\005\022\r\n\005gemID\030\004 \001(\t\"\260\001\n\026P"
    "BCardEvolutionRecieve\022\027\n\017evolutionResult"
    "\030\001 \001(\005\022\033\n\ntargetCard\030\002 \001(\0132\007.PBCard\022\031\n\005c"
    "ards\030\003 \001(\0132\n.PBAllCard\022\027\n\004gems\030\004 \001(\0132\t.P"
    "BAllGem\022\025\n\rallGoldNumber\030\005 \001(\005\022\025\n\rfightC"
    "apacity\030\006 \001(\005\"*\n\022PBSkillLevelUpSend\022\024\n\014u"
    "pCardItemID\030\001 \001(\005\"}\n\025PBSkillLevelUpRecei"
    "ve\022\025\n\rskillUpResult\030\001 \001(\005\022\033\n\ntargetCard\030"
    "\002 \001(\0132\007.PBCard\022\031\n\005cards\030\003 \001(\0132\n.PBAllCar"
    "d\022\025\n\rfightCapacity\030\004 \001(\005\"v\n\016PBCardFormSe"
    "nd\022\025\n\rcaptainCardID\030\001 \001(\005\022\021\n\tcardOneID\030\002"
    " \001(\005\022\021\n\tcardTwoID\030\003 \001(\005\022\023\n\013cardThreeID\030\004"
    " \001(\005\022\022\n\ncardFourID\030\005 \001(\005\"Y\n\021PBCardFormRe"
    "ceive\022\022\n\nformResult\030\001 \001(\005\022\031\n\005cards\030\002 \001(\013"
    "2\n.PBAllCard\022\025\n\rfightCapacity\030\003 \001(\005\"3\n\014P"
    "BBattleSend\022\020\n\010battleID\030\001 \001(\t\022\021\n\tisWipeO"
    "ut\030\002 \001(\005\"H\n\rPBBattleAward\022\017\n\007awardID\030\001 \001"
    "(\t\022\021\n\tawardType\030\002 \001(\005\022\023\n\013awardNumber\030\003 \001"
    "(\005\"Q\n\017PBBattleReceive\022\'\n\017allBattleAwards"
    "\030\001 \003(\0132\016.PBBattleAward\022\025\n\004user\030\002 \001(\0132\007.P"
    "BUser\"5\n\rPBSkillExpAdd\022\022\n\ncardItemId\030\001 \001"
    "(\005\022\020\n\010skillExp\030\002 \001(\005\"\233\001\n\014PBCardDBInfo\022\016\n"
    "\006cardID\030\001 \001(\t\022\022\n\ncardSkillA\030\002 \001(\t\022\022\n\ncar"
    "dSkillP\030\003 \001(\t\022\017\n\007VTLStar\030\004 \001(\005\022\017\n\007STRSta"
    "r\030\005 \001(\005\022\017\n\007TGHStar\030\006 \001(\005\022\017\n\007QUIStar\030\007 \001("
    "\005\022\017\n\007MGCStar\030\010 \001(\005\"\254\001\n\022PBBattleResultSen"
    "d\022\024\n\014battleResult\030\001 \001(\005\022#\n\013skillExpAdd\030\002"
    " \003(\0132\016.PBSkillExpAdd\022\020\n\010isfriend\030\003 \001(\010\022\026"
    "\n\016battleProgress\030\004 \001(\t\022\020\n\010friendId\030\005 \001(\005"
    "\022\037\n\010cardInfo\030\006 \003(\0132\r.PBCardDBInfo\"\254\001\n\025PB"
    "BattleResultReceive\022\031\n\005cards\030\001 \001(\0132\n.PBA"
    "llCard\022\025\n\004user\030\002 \001(\0132\007.PBUser\022\027\n\004gems\030\003 "
    "\001(\0132\t.PBAllGem\022\031\n\006battle\030\004 \001(\0132\t.PBBattl"
    "e\022\027\n\017hasFinishedTask\030\005 \001(\010\022\024\n\014DBInfoResu"
    "lt\030\006 \001(\005\"$\n\016PBSoldCardSend\022\022\n\ncardItemId"
    "\030\001 \003(\005\"V\n\021PBSoldCardReceive\022\022\n\nsoldResul"
    "t\030\001 \001(\005\022\031\n\005cards\030\002 \001(\0132\n.PBAllCard\022\022\n\ngo"
    "ldNumber\030\003 \001(\005\"M\n\027PBGetFriendValueReceiv"
    "e\022\035\n\007friends\030\001 \001(\0132\014.PBAllFriend\022\023\n\013frie"
    "ndValue\030\002 \001(\005\" \n\rPBShopBuySend\022\017\n\007buyTyp"
    "e\030\001 \001(\005\"-\n\024PBShopBuySendReceive\022\025\n\004user\030"
    "\001 \001(\0132\007.PBUser\"\'\n\022PBSearchFriendSend\022\021\n\t"
    "searchKey\030\001 \001(\t\"3\n\025PBSearchFriendReceive"
    "\022\032\n\007friends\030\001 \003(\0132\t.PBFriend\"<\n\016PBDownlo"
    "adSend\022\027\n\017resourceVersion\030\001 \001(\t\022\021\n\tpoint"
    "Mark\030\002 \001(\005\".\n\024PBInvitationCodeSend\022\026\n\016in"
    "vitationCode\030\001 \001(\t\")\n\027PBInvitationCodeRe"
    "ceive\022\016\n\006result\030\001 \001(\005\"9\n\017PBEnergyReceive"
    "\022\016\n\006energy\030\001 \001(\005\022\026\n\016nextEnergyTime\030\002 \001(\005"
    "\"v\n\tPBIAPSend\022\022\n\nmacAddress\030\001 \001(\t\022\021\n\tser"
    "verUrl\030\002 \001(\t\022\017\n\007orderId\030\003 \001(\t\022\026\n\016userSou"
    "rceType\030\004 \001(\005\022\031\n\021authorizationData\030\005 \001(\t"
    "\"C\n\tPBIAPRecv\022\016\n\006result\030\001 \001(\005\022\025\n\004user\030\002 "
    "\001(\0132\007.PBUser\022\017\n\007orderID\030\003 \001(\t\"[\n\030PBMainS"
    "erverRegisterSend\022\023\n\013userAccount\030\001 \001(\t\022\022"
    "\n\nuserPasswd\030\002 \001(\t\022\026\n\016userSourceType\030\003 \001"
    "(\005\"5\n\033PBMainServerRegisterReceive\022\026\n\016reg"
    "isterResult\030\001 \001(\005\"X\n\025PBMainServerLoginSe"
    "nd\022\023\n\013userAccount\030\001 \001(\t\022\022\n\nuserPasswd\030\002 "
    "\001(\t\022\026\n\016userSourceType\030\003 \001(\005\"/\n\030PBMainSer"
    "verLoginReceive\022\023\n\013loginResult\030\001 \001(\005\">\n\n"
    "PBRankSend\022\020\n\010rankWays\030\001 \001(\005\022\017\n\007reqWays\030"
    "\002 \001(\005\022\r\n\005count\030\003 \001(\005\"\237\001\n\020PBRankPlayerInf"
    "o\022\020\n\010userName\030\001 \001(\t\022\021\n\tuserLevel\030\002 \001(\005\022\031"
    "\n\010userCard\030\003 \001(\0132\007.PBCard\022\025\n\rfightCapaci"
    "ty\030\004 \001(\005\022 \n\030capitorCardFightCapacity\030\005 \001"
    "(\005\022\022\n\nplayerRank\030\006 \001(\005\"M\n\nPBRankRecv\022)\n\016"
    "randPlayerInfo\030\001 \003(\0132\021.PBRankPlayerInfo\022"
    "\024\n\014resultStatus\030\002 \001(\005\"G\n\021PBFiveSixStarCa"
    "rd\022\020\n\010userName\030\001 \001(\t\022\016\n\006cardId\030\002 \001(\t\022\020\n\010"
    "cardStar\030\003 \001(\005\"I\n\022PBEvolutionSuccess\022\020\n\010"
    "userName\030\001 \001(\t\022\021\n\tpreCardId\030\002 \001(\t\022\016\n\006car"
    "dId\030\003 \001(\t\"J\n\025PBPassLevelPlayerInfo\022\020\n\010us"
    "erName\030\001 \001(\t\022\014\n\004rank\030\002 \001(\005\022\021\n\tlevelName\030"
    "\003 \001(\t\"F\n\nPBCapacity\022\020\n\010userName\030\001 \001(\t\022\024\n"
    "\014capacityType\030\002 \001(\005\022\020\n\010capacity\030\003 \001(\005\"\344\001"
    "\n\014PBGameNotice\0221\n\025fiveSixStarCardNotice\030"
    "\001 \003(\0132\022.PBFiveSixStarCard\0223\n\026evolutionSu"
    "ccessNotice\030\002 \003(\0132\023.PBEvolutionSuccess\022/"
    "\n\017passLevelNotice\030\003 \003(\0132\026.PBPassLevelPla"
    "yerInfo\022#\n\016capacityNotice\030\004 \003(\0132\013.PBCapa"
    "city\022\026\n\016gameActiveInfo\030\005 \003(\t", 6588);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MagicCard.proto", &protobuf_RegisterTypes);
  PBServer::default_instance_ = new PBServer();
  PBSystemInfoReceive::default_instance_ = new PBSystemInfoReceive();
  PBCard::default_instance_ = new PBCard();
  PBAllCard::default_instance_ = new PBAllCard();
  PBBattleCard::default_instance_ = new PBBattleCard();
  PBFriend::default_instance_ = new PBFriend();
  PBAllFriend::default_instance_ = new PBAllFriend();
  PBHelpFriend::default_instance_ = new PBHelpFriend();
  PBWaitingFriend::default_instance_ = new PBWaitingFriend();
  PBFriendSend::default_instance_ = new PBFriendSend();
  PBFriendAgreeReceive::default_instance_ = new PBFriendAgreeReceive();
  PBAddFriendReceive::default_instance_ = new PBAddFriendReceive();
  PBActivityBattle::default_instance_ = new PBActivityBattle();
  PBBattle::default_instance_ = new PBBattle();
  PBGem::default_instance_ = new PBGem();
  PBAllGem::default_instance_ = new PBAllGem();
  PBMission::default_instance_ = new PBMission();
  PBAllMission::default_instance_ = new PBAllMission();
  PBMissionAwardSend::default_instance_ = new PBMissionAwardSend();
  PBUser::default_instance_ = new PBUser();
  PBMissionAwardReceive::default_instance_ = new PBMissionAwardReceive();
  PBRunningAfficheReceive::default_instance_ = new PBRunningAfficheReceive();
  PBAwardSend::default_instance_ = new PBAwardSend();
  PBAwardReceive::default_instance_ = new PBAwardReceive();
  PBUseEnergyReceive::default_instance_ = new PBUseEnergyReceive();
  PBRegisterCheckSend::default_instance_ = new PBRegisterCheckSend();
  PBRegisterCheckReceive::default_instance_ = new PBRegisterCheckReceive();
  PBRegisterSend::default_instance_ = new PBRegisterSend();
  PBLoginSend::default_instance_ = new PBLoginSend();
  PBLoginReceive::default_instance_ = new PBLoginReceive();
  PBCardLevelUpSend::default_instance_ = new PBCardLevelUpSend();
  PBCardLevelUpReceive::default_instance_ = new PBCardLevelUpReceive();
  PBCardEvolutionSend::default_instance_ = new PBCardEvolutionSend();
  PBCardEvolutionRecieve::default_instance_ = new PBCardEvolutionRecieve();
  PBSkillLevelUpSend::default_instance_ = new PBSkillLevelUpSend();
  PBSkillLevelUpReceive::default_instance_ = new PBSkillLevelUpReceive();
  PBCardFormSend::default_instance_ = new PBCardFormSend();
  PBCardFormReceive::default_instance_ = new PBCardFormReceive();
  PBBattleSend::default_instance_ = new PBBattleSend();
  PBBattleAward::default_instance_ = new PBBattleAward();
  PBBattleReceive::default_instance_ = new PBBattleReceive();
  PBSkillExpAdd::default_instance_ = new PBSkillExpAdd();
  PBCardDBInfo::default_instance_ = new PBCardDBInfo();
  PBBattleResultSend::default_instance_ = new PBBattleResultSend();
  PBBattleResultReceive::default_instance_ = new PBBattleResultReceive();
  PBSoldCardSend::default_instance_ = new PBSoldCardSend();
  PBSoldCardReceive::default_instance_ = new PBSoldCardReceive();
  PBGetFriendValueReceive::default_instance_ = new PBGetFriendValueReceive();
  PBShopBuySend::default_instance_ = new PBShopBuySend();
  PBShopBuySendReceive::default_instance_ = new PBShopBuySendReceive();
  PBSearchFriendSend::default_instance_ = new PBSearchFriendSend();
  PBSearchFriendReceive::default_instance_ = new PBSearchFriendReceive();
  PBDownloadSend::default_instance_ = new PBDownloadSend();
  PBInvitationCodeSend::default_instance_ = new PBInvitationCodeSend();
  PBInvitationCodeReceive::default_instance_ = new PBInvitationCodeReceive();
  PBEnergyReceive::default_instance_ = new PBEnergyReceive();
  PBIAPSend::default_instance_ = new PBIAPSend();
  PBIAPRecv::default_instance_ = new PBIAPRecv();
  PBMainServerRegisterSend::default_instance_ = new PBMainServerRegisterSend();
  PBMainServerRegisterReceive::default_instance_ = new PBMainServerRegisterReceive();
  PBMainServerLoginSend::default_instance_ = new PBMainServerLoginSend();
  PBMainServerLoginReceive::default_instance_ = new PBMainServerLoginReceive();
  PBRankSend::default_instance_ = new PBRankSend();
  PBRankPlayerInfo::default_instance_ = new PBRankPlayerInfo();
  PBRankRecv::default_instance_ = new PBRankRecv();
  PBFiveSixStarCard::default_instance_ = new PBFiveSixStarCard();
  PBEvolutionSuccess::default_instance_ = new PBEvolutionSuccess();
  PBPassLevelPlayerInfo::default_instance_ = new PBPassLevelPlayerInfo();
  PBCapacity::default_instance_ = new PBCapacity();
  PBGameNotice::default_instance_ = new PBGameNotice();
  PBServer::default_instance_->InitAsDefaultInstance();
  PBSystemInfoReceive::default_instance_->InitAsDefaultInstance();
  PBCard::default_instance_->InitAsDefaultInstance();
  PBAllCard::default_instance_->InitAsDefaultInstance();
  PBBattleCard::default_instance_->InitAsDefaultInstance();
  PBFriend::default_instance_->InitAsDefaultInstance();
  PBAllFriend::default_instance_->InitAsDefaultInstance();
  PBHelpFriend::default_instance_->InitAsDefaultInstance();
  PBWaitingFriend::default_instance_->InitAsDefaultInstance();
  PBFriendSend::default_instance_->InitAsDefaultInstance();
  PBFriendAgreeReceive::default_instance_->InitAsDefaultInstance();
  PBAddFriendReceive::default_instance_->InitAsDefaultInstance();
  PBActivityBattle::default_instance_->InitAsDefaultInstance();
  PBBattle::default_instance_->InitAsDefaultInstance();
  PBGem::default_instance_->InitAsDefaultInstance();
  PBAllGem::default_instance_->InitAsDefaultInstance();
  PBMission::default_instance_->InitAsDefaultInstance();
  PBAllMission::default_instance_->InitAsDefaultInstance();
  PBMissionAwardSend::default_instance_->InitAsDefaultInstance();
  PBUser::default_instance_->InitAsDefaultInstance();
  PBMissionAwardReceive::default_instance_->InitAsDefaultInstance();
  PBRunningAfficheReceive::default_instance_->InitAsDefaultInstance();
  PBAwardSend::default_instance_->InitAsDefaultInstance();
  PBAwardReceive::default_instance_->InitAsDefaultInstance();
  PBUseEnergyReceive::default_instance_->InitAsDefaultInstance();
  PBRegisterCheckSend::default_instance_->InitAsDefaultInstance();
  PBRegisterCheckReceive::default_instance_->InitAsDefaultInstance();
  PBRegisterSend::default_instance_->InitAsDefaultInstance();
  PBLoginSend::default_instance_->InitAsDefaultInstance();
  PBLoginReceive::default_instance_->InitAsDefaultInstance();
  PBCardLevelUpSend::default_instance_->InitAsDefaultInstance();
  PBCardLevelUpReceive::default_instance_->InitAsDefaultInstance();
  PBCardEvolutionSend::default_instance_->InitAsDefaultInstance();
  PBCardEvolutionRecieve::default_instance_->InitAsDefaultInstance();
  PBSkillLevelUpSend::default_instance_->InitAsDefaultInstance();
  PBSkillLevelUpReceive::default_instance_->InitAsDefaultInstance();
  PBCardFormSend::default_instance_->InitAsDefaultInstance();
  PBCardFormReceive::default_instance_->InitAsDefaultInstance();
  PBBattleSend::default_instance_->InitAsDefaultInstance();
  PBBattleAward::default_instance_->InitAsDefaultInstance();
  PBBattleReceive::default_instance_->InitAsDefaultInstance();
  PBSkillExpAdd::default_instance_->InitAsDefaultInstance();
  PBCardDBInfo::default_instance_->InitAsDefaultInstance();
  PBBattleResultSend::default_instance_->InitAsDefaultInstance();
  PBBattleResultReceive::default_instance_->InitAsDefaultInstance();
  PBSoldCardSend::default_instance_->InitAsDefaultInstance();
  PBSoldCardReceive::default_instance_->InitAsDefaultInstance();
  PBGetFriendValueReceive::default_instance_->InitAsDefaultInstance();
  PBShopBuySend::default_instance_->InitAsDefaultInstance();
  PBShopBuySendReceive::default_instance_->InitAsDefaultInstance();
  PBSearchFriendSend::default_instance_->InitAsDefaultInstance();
  PBSearchFriendReceive::default_instance_->InitAsDefaultInstance();
  PBDownloadSend::default_instance_->InitAsDefaultInstance();
  PBInvitationCodeSend::default_instance_->InitAsDefaultInstance();
  PBInvitationCodeReceive::default_instance_->InitAsDefaultInstance();
  PBEnergyReceive::default_instance_->InitAsDefaultInstance();
  PBIAPSend::default_instance_->InitAsDefaultInstance();
  PBIAPRecv::default_instance_->InitAsDefaultInstance();
  PBMainServerRegisterSend::default_instance_->InitAsDefaultInstance();
  PBMainServerRegisterReceive::default_instance_->InitAsDefaultInstance();
  PBMainServerLoginSend::default_instance_->InitAsDefaultInstance();
  PBMainServerLoginReceive::default_instance_->InitAsDefaultInstance();
  PBRankSend::default_instance_->InitAsDefaultInstance();
  PBRankPlayerInfo::default_instance_->InitAsDefaultInstance();
  PBRankRecv::default_instance_->InitAsDefaultInstance();
  PBFiveSixStarCard::default_instance_->InitAsDefaultInstance();
  PBEvolutionSuccess::default_instance_->InitAsDefaultInstance();
  PBPassLevelPlayerInfo::default_instance_->InitAsDefaultInstance();
  PBCapacity::default_instance_->InitAsDefaultInstance();
  PBGameNotice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MagicCard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MagicCard_2eproto {
  StaticDescriptorInitializer_MagicCard_2eproto() {
    protobuf_AddDesc_MagicCard_2eproto();
  }
} static_descriptor_initializer_MagicCard_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBServer::kServerNameFieldNumber;
const int PBServer::kServerUrlFieldNumber;
const int PBServer::kServerPortFieldNumber;
const int PBServer::kServerStatusFieldNumber;
const int PBServer::kPayServerUrlFieldNumber;
const int PBServer::kPayServerPortFieldNumber;
#endif  // !_MSC_VER

PBServer::PBServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBServer::InitAsDefaultInstance() {
}

PBServer::PBServer(const PBServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBServer::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverport_ = 0;
  serverstatus_ = 0;
  payserverurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payserverport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBServer::~PBServer() {
  SharedDtor();
}

void PBServer::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (serverurl_ != &::google::protobuf::internal::kEmptyString) {
    delete serverurl_;
  }
  if (payserverurl_ != &::google::protobuf::internal::kEmptyString) {
    delete payserverurl_;
  }
  if (this != default_instance_) {
  }
}

void PBServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBServer_descriptor_;
}

const PBServer& PBServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBServer* PBServer::default_instance_ = NULL;

PBServer* PBServer::New() const {
  return new PBServer;
}

void PBServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_serverurl()) {
      if (serverurl_ != &::google::protobuf::internal::kEmptyString) {
        serverurl_->clear();
      }
    }
    serverport_ = 0;
    serverstatus_ = 0;
    if (has_payserverurl()) {
      if (payserverurl_ != &::google::protobuf::internal::kEmptyString) {
        payserverurl_->clear();
      }
    }
    payserverport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serverName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverUrl;
        break;
      }
      
      // optional string serverUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverurl().data(), this->serverurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverPort;
        break;
      }
      
      // optional int32 serverPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverport_)));
          set_has_serverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverStatus;
        break;
      }
      
      // optional int32 serverStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverstatus_)));
          set_has_serverstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_payServerUrl;
        break;
      }
      
      // optional string payServerUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payServerUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payserverurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payserverurl().data(), this->payserverurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_payServerPort;
        break;
      }
      
      // optional int32 payServerPort = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payServerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payserverport_)));
          set_has_payserverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string serverName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servername(), output);
  }
  
  // optional string serverUrl = 2;
  if (has_serverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverurl().data(), this->serverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverurl(), output);
  }
  
  // optional int32 serverPort = 3;
  if (has_serverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverport(), output);
  }
  
  // optional int32 serverStatus = 4;
  if (has_serverstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serverstatus(), output);
  }
  
  // optional string payServerUrl = 5;
  if (has_payserverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payserverurl().data(), this->payserverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->payserverurl(), output);
  }
  
  // optional int32 payServerPort = 6;
  if (has_payserverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->payserverport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string serverName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }
  
  // optional string serverUrl = 2;
  if (has_serverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverurl().data(), this->serverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverurl(), target);
  }
  
  // optional int32 serverPort = 3;
  if (has_serverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverport(), target);
  }
  
  // optional int32 serverStatus = 4;
  if (has_serverstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serverstatus(), target);
  }
  
  // optional string payServerUrl = 5;
  if (has_payserverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payserverurl().data(), this->payserverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->payserverurl(), target);
  }
  
  // optional int32 payServerPort = 6;
  if (has_payserverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->payserverport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string serverName = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // optional string serverUrl = 2;
    if (has_serverurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverurl());
    }
    
    // optional int32 serverPort = 3;
    if (has_serverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverport());
    }
    
    // optional int32 serverStatus = 4;
    if (has_serverstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverstatus());
    }
    
    // optional string payServerUrl = 5;
    if (has_payserverurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payserverurl());
    }
    
    // optional int32 payServerPort = 6;
    if (has_payserverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payserverport());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBServer::MergeFrom(const PBServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverurl()) {
      set_serverurl(from.serverurl());
    }
    if (from.has_serverport()) {
      set_serverport(from.serverport());
    }
    if (from.has_serverstatus()) {
      set_serverstatus(from.serverstatus());
    }
    if (from.has_payserverurl()) {
      set_payserverurl(from.payserverurl());
    }
    if (from.has_payserverport()) {
      set_payserverport(from.payserverport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBServer::CopyFrom(const PBServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBServer::IsInitialized() const {
  
  return true;
}

void PBServer::Swap(PBServer* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(serverurl_, other->serverurl_);
    std::swap(serverport_, other->serverport_);
    std::swap(serverstatus_, other->serverstatus_);
    std::swap(payserverurl_, other->payserverurl_);
    std::swap(payserverport_, other->payserverport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBServer_descriptor_;
  metadata.reflection = PBServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSystemInfoReceive::kAfficheFieldNumber;
const int PBSystemInfoReceive::kAllServerFieldNumber;
const int PBSystemInfoReceive::kGameVersionFieldNumber;
const int PBSystemInfoReceive::kResourceVersionFieldNumber;
const int PBSystemInfoReceive::kBattleVersionFieldNumber;
#endif  // !_MSC_VER

PBSystemInfoReceive::PBSystemInfoReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSystemInfoReceive::InitAsDefaultInstance() {
}

PBSystemInfoReceive::PBSystemInfoReceive(const PBSystemInfoReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSystemInfoReceive::SharedCtor() {
  _cached_size_ = 0;
  affiche_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battleversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSystemInfoReceive::~PBSystemInfoReceive() {
  SharedDtor();
}

void PBSystemInfoReceive::SharedDtor() {
  if (affiche_ != &::google::protobuf::internal::kEmptyString) {
    delete affiche_;
  }
  if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
    delete gameversion_;
  }
  if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
    delete resourceversion_;
  }
  if (battleversion_ != &::google::protobuf::internal::kEmptyString) {
    delete battleversion_;
  }
  if (this != default_instance_) {
  }
}

void PBSystemInfoReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSystemInfoReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSystemInfoReceive_descriptor_;
}

const PBSystemInfoReceive& PBSystemInfoReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSystemInfoReceive* PBSystemInfoReceive::default_instance_ = NULL;

PBSystemInfoReceive* PBSystemInfoReceive::New() const {
  return new PBSystemInfoReceive;
}

void PBSystemInfoReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_affiche()) {
      if (affiche_ != &::google::protobuf::internal::kEmptyString) {
        affiche_->clear();
      }
    }
    if (has_gameversion()) {
      if (gameversion_ != &::google::protobuf::internal::kEmptyString) {
        gameversion_->clear();
      }
    }
    if (has_resourceversion()) {
      if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
        resourceversion_->clear();
      }
    }
    if (has_battleversion()) {
      if (battleversion_ != &::google::protobuf::internal::kEmptyString) {
        battleversion_->clear();
      }
    }
  }
  allserver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSystemInfoReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string affiche = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_affiche()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->affiche().data(), this->affiche().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allServer;
        break;
      }
      
      // repeated .PBServer allServer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allserver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allServer;
        if (input->ExpectTag(26)) goto parse_gameVersion;
        break;
      }
      
      // optional string gameVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameversion().data(), this->gameversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resourceVersion;
        break;
      }
      
      // optional string resourceVersion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourceversion().data(), this->resourceversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_battleVersion;
        break;
      }
      
      // optional string battleVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battleversion().data(), this->battleversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSystemInfoReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string affiche = 1;
  if (has_affiche()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->affiche().data(), this->affiche().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->affiche(), output);
  }
  
  // repeated .PBServer allServer = 2;
  for (int i = 0; i < this->allserver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allserver(i), output);
  }
  
  // optional string gameVersion = 3;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameversion().data(), this->gameversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gameversion(), output);
  }
  
  // optional string resourceVersion = 4;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resourceversion(), output);
  }
  
  // optional string battleVersion = 5;
  if (has_battleversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleversion().data(), this->battleversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->battleversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSystemInfoReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string affiche = 1;
  if (has_affiche()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->affiche().data(), this->affiche().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->affiche(), target);
  }
  
  // repeated .PBServer allServer = 2;
  for (int i = 0; i < this->allserver_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allserver(i), target);
  }
  
  // optional string gameVersion = 3;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameversion().data(), this->gameversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gameversion(), target);
  }
  
  // optional string resourceVersion = 4;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resourceversion(), target);
  }
  
  // optional string battleVersion = 5;
  if (has_battleversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleversion().data(), this->battleversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->battleversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSystemInfoReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string affiche = 1;
    if (has_affiche()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->affiche());
    }
    
    // optional string gameVersion = 3;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameversion());
    }
    
    // optional string resourceVersion = 4;
    if (has_resourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourceversion());
    }
    
    // optional string battleVersion = 5;
    if (has_battleversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleversion());
    }
    
  }
  // repeated .PBServer allServer = 2;
  total_size += 1 * this->allserver_size();
  for (int i = 0; i < this->allserver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allserver(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSystemInfoReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSystemInfoReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSystemInfoReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSystemInfoReceive::MergeFrom(const PBSystemInfoReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  allserver_.MergeFrom(from.allserver_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_affiche()) {
      set_affiche(from.affiche());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
    if (from.has_resourceversion()) {
      set_resourceversion(from.resourceversion());
    }
    if (from.has_battleversion()) {
      set_battleversion(from.battleversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSystemInfoReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSystemInfoReceive::CopyFrom(const PBSystemInfoReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSystemInfoReceive::IsInitialized() const {
  
  return true;
}

void PBSystemInfoReceive::Swap(PBSystemInfoReceive* other) {
  if (other != this) {
    std::swap(affiche_, other->affiche_);
    allserver_.Swap(&other->allserver_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(resourceversion_, other->resourceversion_);
    std::swap(battleversion_, other->battleversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSystemInfoReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSystemInfoReceive_descriptor_;
  metadata.reflection = PBSystemInfoReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCard::kItemIDFieldNumber;
const int PBCard::kCardIDFieldNumber;
const int PBCard::kCardLevelFieldNumber;
const int PBCard::kCardExpFieldNumber;
const int PBCard::kSkillExpFieldNumber;
const int PBCard::kSkillLevelFieldNumber;
const int PBCard::kWeaponIDFieldNumber;
const int PBCard::kBattlePositionFieldNumber;
const int PBCard::kVTLGrowFieldNumber;
const int PBCard::kSTRGrowFieldNumber;
const int PBCard::kTGHGrowFieldNumber;
const int PBCard::kQUIGrowFieldNumber;
const int PBCard::kMGCGrowFieldNumber;
#endif  // !_MSC_VER

PBCard::PBCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCard::InitAsDefaultInstance() {
}

PBCard::PBCard(const PBCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCard::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardlevel_ = 0;
  cardexp_ = 0;
  skillexp_ = 0;
  skilllevel_ = 0;
  weaponid_ = 0;
  battleposition_ = 0;
  vtlgrow_ = 0;
  strgrow_ = 0;
  tghgrow_ = 0;
  quigrow_ = 0;
  mgcgrow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCard::~PBCard() {
  SharedDtor();
}

void PBCard::SharedDtor() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (this != default_instance_) {
  }
}

void PBCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCard_descriptor_;
}

const PBCard& PBCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCard* PBCard::default_instance_ = NULL;

PBCard* PBCard::New() const {
  return new PBCard;
}

void PBCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    if (has_cardid()) {
      if (cardid_ != &::google::protobuf::internal::kEmptyString) {
        cardid_->clear();
      }
    }
    cardlevel_ = 0;
    cardexp_ = 0;
    skillexp_ = 0;
    skilllevel_ = 0;
    weaponid_ = 0;
    battleposition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vtlgrow_ = 0;
    strgrow_ = 0;
    tghgrow_ = 0;
    quigrow_ = 0;
    mgcgrow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cardID;
        break;
      }
      
      // optional string cardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardid().data(), this->cardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cardLevel;
        break;
      }
      
      // optional int32 cardLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardlevel_)));
          set_has_cardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardExp;
        break;
      }
      
      // optional int32 cardExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardexp_)));
          set_has_cardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skillExp;
        break;
      }
      
      // optional int32 skillExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillexp_)));
          set_has_skillexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skillLevel;
        break;
      }
      
      // optional int32 skillLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_weaponID;
        break;
      }
      
      // optional int32 weaponID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battlePosition;
        break;
      }
      
      // optional int32 battlePosition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleposition_)));
          set_has_battleposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VTLGrow;
        break;
      }
      
      // optional int32 VTLGrow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VTLGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vtlgrow_)));
          set_has_vtlgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_STRGrow;
        break;
      }
      
      // optional int32 STRGrow = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_STRGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strgrow_)));
          set_has_strgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_TGHGrow;
        break;
      }
      
      // optional int32 TGHGrow = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TGHGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tghgrow_)));
          set_has_tghgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_QUIGrow;
        break;
      }
      
      // optional int32 QUIGrow = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QUIGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quigrow_)));
          set_has_quigrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MGCGrow;
        break;
      }
      
      // optional int32 MGCGrow = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MGCGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mgcgrow_)));
          set_has_mgcgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }
  
  // optional string cardID = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cardid(), output);
  }
  
  // optional int32 cardLevel = 3;
  if (has_cardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardlevel(), output);
  }
  
  // optional int32 cardExp = 4;
  if (has_cardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardexp(), output);
  }
  
  // optional int32 skillExp = 5;
  if (has_skillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skillexp(), output);
  }
  
  // optional int32 skillLevel = 6;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skilllevel(), output);
  }
  
  // optional int32 weaponID = 7;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->weaponid(), output);
  }
  
  // optional int32 battlePosition = 8;
  if (has_battleposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->battleposition(), output);
  }
  
  // optional int32 VTLGrow = 9;
  if (has_vtlgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vtlgrow(), output);
  }
  
  // optional int32 STRGrow = 10;
  if (has_strgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->strgrow(), output);
  }
  
  // optional int32 TGHGrow = 11;
  if (has_tghgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tghgrow(), output);
  }
  
  // optional int32 QUIGrow = 12;
  if (has_quigrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->quigrow(), output);
  }
  
  // optional int32 MGCGrow = 13;
  if (has_mgcgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mgcgrow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  // optional string cardID = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cardid(), target);
  }
  
  // optional int32 cardLevel = 3;
  if (has_cardlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardlevel(), target);
  }
  
  // optional int32 cardExp = 4;
  if (has_cardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardexp(), target);
  }
  
  // optional int32 skillExp = 5;
  if (has_skillexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skillexp(), target);
  }
  
  // optional int32 skillLevel = 6;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skilllevel(), target);
  }
  
  // optional int32 weaponID = 7;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->weaponid(), target);
  }
  
  // optional int32 battlePosition = 8;
  if (has_battleposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->battleposition(), target);
  }
  
  // optional int32 VTLGrow = 9;
  if (has_vtlgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vtlgrow(), target);
  }
  
  // optional int32 STRGrow = 10;
  if (has_strgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->strgrow(), target);
  }
  
  // optional int32 TGHGrow = 11;
  if (has_tghgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tghgrow(), target);
  }
  
  // optional int32 QUIGrow = 12;
  if (has_quigrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->quigrow(), target);
  }
  
  // optional int32 MGCGrow = 13;
  if (has_mgcgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mgcgrow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional string cardID = 2;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }
    
    // optional int32 cardLevel = 3;
    if (has_cardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardlevel());
    }
    
    // optional int32 cardExp = 4;
    if (has_cardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardexp());
    }
    
    // optional int32 skillExp = 5;
    if (has_skillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillexp());
    }
    
    // optional int32 skillLevel = 6;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }
    
    // optional int32 weaponID = 7;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }
    
    // optional int32 battlePosition = 8;
    if (has_battleposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleposition());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 VTLGrow = 9;
    if (has_vtlgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vtlgrow());
    }
    
    // optional int32 STRGrow = 10;
    if (has_strgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strgrow());
    }
    
    // optional int32 TGHGrow = 11;
    if (has_tghgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tghgrow());
    }
    
    // optional int32 QUIGrow = 12;
    if (has_quigrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quigrow());
    }
    
    // optional int32 MGCGrow = 13;
    if (has_mgcgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mgcgrow());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCard::MergeFrom(const PBCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_cardlevel()) {
      set_cardlevel(from.cardlevel());
    }
    if (from.has_cardexp()) {
      set_cardexp(from.cardexp());
    }
    if (from.has_skillexp()) {
      set_skillexp(from.skillexp());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_battleposition()) {
      set_battleposition(from.battleposition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vtlgrow()) {
      set_vtlgrow(from.vtlgrow());
    }
    if (from.has_strgrow()) {
      set_strgrow(from.strgrow());
    }
    if (from.has_tghgrow()) {
      set_tghgrow(from.tghgrow());
    }
    if (from.has_quigrow()) {
      set_quigrow(from.quigrow());
    }
    if (from.has_mgcgrow()) {
      set_mgcgrow(from.mgcgrow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCard::CopyFrom(const PBCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCard::IsInitialized() const {
  
  return true;
}

void PBCard::Swap(PBCard* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(cardid_, other->cardid_);
    std::swap(cardlevel_, other->cardlevel_);
    std::swap(cardexp_, other->cardexp_);
    std::swap(skillexp_, other->skillexp_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(battleposition_, other->battleposition_);
    std::swap(vtlgrow_, other->vtlgrow_);
    std::swap(strgrow_, other->strgrow_);
    std::swap(tghgrow_, other->tghgrow_);
    std::swap(quigrow_, other->quigrow_);
    std::swap(mgcgrow_, other->mgcgrow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCard_descriptor_;
  metadata.reflection = PBCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAllCard::kAllCardFieldNumber;
#endif  // !_MSC_VER

PBAllCard::PBAllCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAllCard::InitAsDefaultInstance() {
}

PBAllCard::PBAllCard(const PBAllCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAllCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAllCard::~PBAllCard() {
  SharedDtor();
}

void PBAllCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAllCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAllCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAllCard_descriptor_;
}

const PBAllCard& PBAllCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAllCard* PBAllCard::default_instance_ = NULL;

PBAllCard* PBAllCard::New() const {
  return new PBAllCard;
}

void PBAllCard::Clear() {
  allcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAllCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBCard allCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAllCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBCard allCard = 1;
  for (int i = 0; i < this->allcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allcard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAllCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCard allCard = 1;
  for (int i = 0; i < this->allcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allcard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAllCard::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCard allCard = 1;
  total_size += 1 * this->allcard_size();
  for (int i = 0; i < this->allcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allcard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAllCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAllCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAllCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAllCard::MergeFrom(const PBAllCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  allcard_.MergeFrom(from.allcard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAllCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAllCard::CopyFrom(const PBAllCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAllCard::IsInitialized() const {
  
  return true;
}

void PBAllCard::Swap(PBAllCard* other) {
  if (other != this) {
    allcard_.Swap(&other->allcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAllCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAllCard_descriptor_;
  metadata.reflection = PBAllCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleCard::kBattleCardFieldNumber;
#endif  // !_MSC_VER

PBBattleCard::PBBattleCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleCard::InitAsDefaultInstance() {
}

PBBattleCard::PBBattleCard(const PBBattleCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleCard::~PBBattleCard() {
  SharedDtor();
}

void PBBattleCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBattleCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleCard_descriptor_;
}

const PBBattleCard& PBBattleCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleCard* PBBattleCard::default_instance_ = NULL;

PBBattleCard* PBBattleCard::New() const {
  return new PBBattleCard;
}

void PBBattleCard::Clear() {
  battlecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBCard battleCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_battleCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBCard battleCard = 1;
  for (int i = 0; i < this->battlecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battlecard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBCard battleCard = 1;
  for (int i = 0; i < this->battlecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battlecard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleCard::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBCard battleCard = 1;
  total_size += 1 * this->battlecard_size();
  for (int i = 0; i < this->battlecard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlecard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleCard::MergeFrom(const PBBattleCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlecard_.MergeFrom(from.battlecard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleCard::CopyFrom(const PBBattleCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleCard::IsInitialized() const {
  
  return true;
}

void PBBattleCard::Swap(PBBattleCard* other) {
  if (other != this) {
    battlecard_.Swap(&other->battlecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleCard_descriptor_;
  metadata.reflection = PBBattleCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFriend::kFriendIDFieldNumber;
const int PBFriend::kFriendNameFieldNumber;
const int PBFriend::kFriendLevelFieldNumber;
const int PBFriend::kFriendCardFieldNumber;
const int PBFriend::kFriendStatusFieldNumber;
const int PBFriend::kIsFriendFieldNumber;
const int PBFriend::kIsGetFriendValueFieldNumber;
const int PBFriend::kFightCapacityFieldNumber;
const int PBFriend::kCapitorCardFightCapacityFieldNumber;
#endif  // !_MSC_VER

PBFriend::PBFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriend::InitAsDefaultInstance() {
  friendcard_ = const_cast< ::PBCard*>(&::PBCard::default_instance());
}

PBFriend::PBFriend(const PBFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0;
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendlevel_ = 0;
  friendcard_ = NULL;
  friendstatus_ = 0;
  isfriend_ = false;
  isgetfriendvalue_ = false;
  fightcapacity_ = 0;
  capitorcardfightcapacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriend::~PBFriend() {
  SharedDtor();
}

void PBFriend::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
    delete friendcard_;
  }
}

void PBFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriend_descriptor_;
}

const PBFriend& PBFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBFriend* PBFriend::default_instance_ = NULL;

PBFriend* PBFriend::New() const {
  return new PBFriend;
}

void PBFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = 0;
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    friendlevel_ = 0;
    if (has_friendcard()) {
      if (friendcard_ != NULL) friendcard_->::PBCard::Clear();
    }
    friendstatus_ = 0;
    isfriend_ = false;
    isgetfriendvalue_ = false;
    fightcapacity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    capitorcardfightcapacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendName;
        break;
      }
      
      // optional string friendName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friendLevel;
        break;
      }
      
      // optional int32 friendLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendlevel_)));
          set_has_friendlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friendCard;
        break;
      }
      
      // optional .PBCard friendCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FriendStatus;
        break;
      }
      
      // optional int32 FriendStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FriendStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendstatus_)));
          set_has_friendstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isFriend;
        break;
      }
      
      // optional bool isFriend = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isGetFriendValue;
        break;
      }
      
      // optional bool isGetFriendValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGetFriendValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgetfriendvalue_)));
          set_has_isgetfriendvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fightCapacity;
        break;
      }
      
      // optional int32 fightCapacity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcapacity_)));
          set_has_fightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_capitorCardFightCapacity;
        break;
      }
      
      // optional int32 capitorCardFightCapacity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capitorCardFightCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capitorcardfightcapacity_)));
          set_has_capitorcardfightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 friendID = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendid(), output);
  }
  
  // optional string friendName = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friendname(), output);
  }
  
  // optional int32 friendLevel = 3;
  if (has_friendlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->friendlevel(), output);
  }
  
  // optional .PBCard friendCard = 4;
  if (has_friendcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friendcard(), output);
  }
  
  // optional int32 FriendStatus = 5;
  if (has_friendstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->friendstatus(), output);
  }
  
  // optional bool isFriend = 6;
  if (has_isfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isfriend(), output);
  }
  
  // optional bool isGetFriendValue = 7;
  if (has_isgetfriendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isgetfriendvalue(), output);
  }
  
  // optional int32 fightCapacity = 8;
  if (has_fightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fightcapacity(), output);
  }
  
  // optional int32 capitorCardFightCapacity = 9;
  if (has_capitorcardfightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->capitorcardfightcapacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 friendID = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friendid(), target);
  }
  
  // optional string friendName = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendname(), target);
  }
  
  // optional int32 friendLevel = 3;
  if (has_friendlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->friendlevel(), target);
  }
  
  // optional .PBCard friendCard = 4;
  if (has_friendcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friendcard(), target);
  }
  
  // optional int32 FriendStatus = 5;
  if (has_friendstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->friendstatus(), target);
  }
  
  // optional bool isFriend = 6;
  if (has_isfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isfriend(), target);
  }
  
  // optional bool isGetFriendValue = 7;
  if (has_isgetfriendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isgetfriendvalue(), target);
  }
  
  // optional int32 fightCapacity = 8;
  if (has_fightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fightcapacity(), target);
  }
  
  // optional int32 capitorCardFightCapacity = 9;
  if (has_capitorcardfightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->capitorcardfightcapacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendID = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }
    
    // optional string friendName = 2;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }
    
    // optional int32 friendLevel = 3;
    if (has_friendlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendlevel());
    }
    
    // optional .PBCard friendCard = 4;
    if (has_friendcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendcard());
    }
    
    // optional int32 FriendStatus = 5;
    if (has_friendstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendstatus());
    }
    
    // optional bool isFriend = 6;
    if (has_isfriend()) {
      total_size += 1 + 1;
    }
    
    // optional bool isGetFriendValue = 7;
    if (has_isgetfriendvalue()) {
      total_size += 1 + 1;
    }
    
    // optional int32 fightCapacity = 8;
    if (has_fightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcapacity());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 capitorCardFightCapacity = 9;
    if (has_capitorcardfightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capitorcardfightcapacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriend::MergeFrom(const PBFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_friendlevel()) {
      set_friendlevel(from.friendlevel());
    }
    if (from.has_friendcard()) {
      mutable_friendcard()->::PBCard::MergeFrom(from.friendcard());
    }
    if (from.has_friendstatus()) {
      set_friendstatus(from.friendstatus());
    }
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
    if (from.has_isgetfriendvalue()) {
      set_isgetfriendvalue(from.isgetfriendvalue());
    }
    if (from.has_fightcapacity()) {
      set_fightcapacity(from.fightcapacity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_capitorcardfightcapacity()) {
      set_capitorcardfightcapacity(from.capitorcardfightcapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriend::CopyFrom(const PBFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFriend::IsInitialized() const {
  
  return true;
}

void PBFriend::Swap(PBFriend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(friendname_, other->friendname_);
    std::swap(friendlevel_, other->friendlevel_);
    std::swap(friendcard_, other->friendcard_);
    std::swap(friendstatus_, other->friendstatus_);
    std::swap(isfriend_, other->isfriend_);
    std::swap(isgetfriendvalue_, other->isgetfriendvalue_);
    std::swap(fightcapacity_, other->fightcapacity_);
    std::swap(capitorcardfightcapacity_, other->capitorcardfightcapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFriend_descriptor_;
  metadata.reflection = PBFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAllFriend::kAllFriendFieldNumber;
#endif  // !_MSC_VER

PBAllFriend::PBAllFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAllFriend::InitAsDefaultInstance() {
}

PBAllFriend::PBAllFriend(const PBAllFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAllFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAllFriend::~PBAllFriend() {
  SharedDtor();
}

void PBAllFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAllFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAllFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAllFriend_descriptor_;
}

const PBAllFriend& PBAllFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAllFriend* PBAllFriend::default_instance_ = NULL;

PBAllFriend* PBAllFriend::New() const {
  return new PBAllFriend;
}

void PBAllFriend::Clear() {
  allfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAllFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFriend allFriend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allFriend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAllFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFriend allFriend = 1;
  for (int i = 0; i < this->allfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allfriend(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAllFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFriend allFriend = 1;
  for (int i = 0; i < this->allfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allfriend(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAllFriend::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFriend allFriend = 1;
  total_size += 1 * this->allfriend_size();
  for (int i = 0; i < this->allfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allfriend(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAllFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAllFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAllFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAllFriend::MergeFrom(const PBAllFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  allfriend_.MergeFrom(from.allfriend_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAllFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAllFriend::CopyFrom(const PBAllFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAllFriend::IsInitialized() const {
  
  return true;
}

void PBAllFriend::Swap(PBAllFriend* other) {
  if (other != this) {
    allfriend_.Swap(&other->allfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAllFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAllFriend_descriptor_;
  metadata.reflection = PBAllFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBHelpFriend::kHelpFriendFieldNumber;
#endif  // !_MSC_VER

PBHelpFriend::PBHelpFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHelpFriend::InitAsDefaultInstance() {
}

PBHelpFriend::PBHelpFriend(const PBHelpFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHelpFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHelpFriend::~PBHelpFriend() {
  SharedDtor();
}

void PBHelpFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBHelpFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBHelpFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHelpFriend_descriptor_;
}

const PBHelpFriend& PBHelpFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBHelpFriend* PBHelpFriend::default_instance_ = NULL;

PBHelpFriend* PBHelpFriend::New() const {
  return new PBHelpFriend;
}

void PBHelpFriend::Clear() {
  helpfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHelpFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFriend helpFriend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helpFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_helpfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_helpFriend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHelpFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFriend helpFriend = 1;
  for (int i = 0; i < this->helpfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->helpfriend(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHelpFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFriend helpFriend = 1;
  for (int i = 0; i < this->helpfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->helpfriend(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHelpFriend::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFriend helpFriend = 1;
  total_size += 1 * this->helpfriend_size();
  for (int i = 0; i < this->helpfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->helpfriend(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBHelpFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHelpFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHelpFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHelpFriend::MergeFrom(const PBHelpFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  helpfriend_.MergeFrom(from.helpfriend_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHelpFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHelpFriend::CopyFrom(const PBHelpFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBHelpFriend::IsInitialized() const {
  
  return true;
}

void PBHelpFriend::Swap(PBHelpFriend* other) {
  if (other != this) {
    helpfriend_.Swap(&other->helpfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBHelpFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBHelpFriend_descriptor_;
  metadata.reflection = PBHelpFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBWaitingFriend::kWaitingFriendFieldNumber;
#endif  // !_MSC_VER

PBWaitingFriend::PBWaitingFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBWaitingFriend::InitAsDefaultInstance() {
}

PBWaitingFriend::PBWaitingFriend(const PBWaitingFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBWaitingFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBWaitingFriend::~PBWaitingFriend() {
  SharedDtor();
}

void PBWaitingFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBWaitingFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBWaitingFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBWaitingFriend_descriptor_;
}

const PBWaitingFriend& PBWaitingFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBWaitingFriend* PBWaitingFriend::default_instance_ = NULL;

PBWaitingFriend* PBWaitingFriend::New() const {
  return new PBWaitingFriend;
}

void PBWaitingFriend::Clear() {
  waitingfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBWaitingFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFriend waitingFriend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waitingFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waitingfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_waitingFriend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBWaitingFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFriend waitingFriend = 1;
  for (int i = 0; i < this->waitingfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->waitingfriend(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBWaitingFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFriend waitingFriend = 1;
  for (int i = 0; i < this->waitingfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->waitingfriend(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBWaitingFriend::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFriend waitingFriend = 1;
  total_size += 1 * this->waitingfriend_size();
  for (int i = 0; i < this->waitingfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->waitingfriend(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBWaitingFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBWaitingFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBWaitingFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBWaitingFriend::MergeFrom(const PBWaitingFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  waitingfriend_.MergeFrom(from.waitingfriend_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBWaitingFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBWaitingFriend::CopyFrom(const PBWaitingFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBWaitingFriend::IsInitialized() const {
  
  return true;
}

void PBWaitingFriend::Swap(PBWaitingFriend* other) {
  if (other != this) {
    waitingfriend_.Swap(&other->waitingfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBWaitingFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBWaitingFriend_descriptor_;
  metadata.reflection = PBWaitingFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFriendSend::kFriendIDFieldNumber;
#endif  // !_MSC_VER

PBFriendSend::PBFriendSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriendSend::InitAsDefaultInstance() {
}

PBFriendSend::PBFriendSend(const PBFriendSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriendSend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriendSend::~PBFriendSend() {
  SharedDtor();
}

void PBFriendSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBFriendSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFriendSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriendSend_descriptor_;
}

const PBFriendSend& PBFriendSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBFriendSend* PBFriendSend::default_instance_ = NULL;

PBFriendSend* PBFriendSend::New() const {
  return new PBFriendSend;
}

void PBFriendSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriendSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 friendID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriendSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 friendID = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriendSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 friendID = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friendid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriendSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 friendID = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFriendSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriendSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriendSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriendSend::MergeFrom(const PBFriendSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriendSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendSend::CopyFrom(const PBFriendSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFriendSend::IsInitialized() const {
  
  return true;
}

void PBFriendSend::Swap(PBFriendSend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFriendSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFriendSend_descriptor_;
  metadata.reflection = PBFriendSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFriendAgreeReceive::kAgreeResultFieldNumber;
const int PBFriendAgreeReceive::kWaitingsFieldNumber;
const int PBFriendAgreeReceive::kFriendsFieldNumber;
#endif  // !_MSC_VER

PBFriendAgreeReceive::PBFriendAgreeReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFriendAgreeReceive::InitAsDefaultInstance() {
  waitings_ = const_cast< ::PBWaitingFriend*>(&::PBWaitingFriend::default_instance());
  friends_ = const_cast< ::PBAllFriend*>(&::PBAllFriend::default_instance());
}

PBFriendAgreeReceive::PBFriendAgreeReceive(const PBFriendAgreeReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFriendAgreeReceive::SharedCtor() {
  _cached_size_ = 0;
  agreeresult_ = 0;
  waitings_ = NULL;
  friends_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFriendAgreeReceive::~PBFriendAgreeReceive() {
  SharedDtor();
}

void PBFriendAgreeReceive::SharedDtor() {
  if (this != default_instance_) {
    delete waitings_;
    delete friends_;
  }
}

void PBFriendAgreeReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFriendAgreeReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFriendAgreeReceive_descriptor_;
}

const PBFriendAgreeReceive& PBFriendAgreeReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBFriendAgreeReceive* PBFriendAgreeReceive::default_instance_ = NULL;

PBFriendAgreeReceive* PBFriendAgreeReceive::New() const {
  return new PBFriendAgreeReceive;
}

void PBFriendAgreeReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agreeresult_ = 0;
    if (has_waitings()) {
      if (waitings_ != NULL) waitings_->::PBWaitingFriend::Clear();
    }
    if (has_friends()) {
      if (friends_ != NULL) friends_->::PBAllFriend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFriendAgreeReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 agreeResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agreeresult_)));
          set_has_agreeresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_waitings;
        break;
      }
      
      // optional .PBWaitingFriend waitings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waitings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waitings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friends;
        break;
      }
      
      // optional .PBAllFriend friends = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFriendAgreeReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 agreeResult = 1;
  if (has_agreeresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->agreeresult(), output);
  }
  
  // optional .PBWaitingFriend waitings = 2;
  if (has_waitings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waitings(), output);
  }
  
  // optional .PBAllFriend friends = 3;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friends(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFriendAgreeReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 agreeResult = 1;
  if (has_agreeresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->agreeresult(), target);
  }
  
  // optional .PBWaitingFriend waitings = 2;
  if (has_waitings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->waitings(), target);
  }
  
  // optional .PBAllFriend friends = 3;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->friends(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFriendAgreeReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 agreeResult = 1;
    if (has_agreeresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agreeresult());
    }
    
    // optional .PBWaitingFriend waitings = 2;
    if (has_waitings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waitings());
    }
    
    // optional .PBAllFriend friends = 3;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFriendAgreeReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFriendAgreeReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFriendAgreeReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFriendAgreeReceive::MergeFrom(const PBFriendAgreeReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agreeresult()) {
      set_agreeresult(from.agreeresult());
    }
    if (from.has_waitings()) {
      mutable_waitings()->::PBWaitingFriend::MergeFrom(from.waitings());
    }
    if (from.has_friends()) {
      mutable_friends()->::PBAllFriend::MergeFrom(from.friends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFriendAgreeReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFriendAgreeReceive::CopyFrom(const PBFriendAgreeReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFriendAgreeReceive::IsInitialized() const {
  
  return true;
}

void PBFriendAgreeReceive::Swap(PBFriendAgreeReceive* other) {
  if (other != this) {
    std::swap(agreeresult_, other->agreeresult_);
    std::swap(waitings_, other->waitings_);
    std::swap(friends_, other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFriendAgreeReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFriendAgreeReceive_descriptor_;
  metadata.reflection = PBFriendAgreeReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAddFriendReceive::kAddResultFieldNumber;
const int PBAddFriendReceive::kFriendsFieldNumber;
#endif  // !_MSC_VER

PBAddFriendReceive::PBAddFriendReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAddFriendReceive::InitAsDefaultInstance() {
  friends_ = const_cast< ::PBAllFriend*>(&::PBAllFriend::default_instance());
}

PBAddFriendReceive::PBAddFriendReceive(const PBAddFriendReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAddFriendReceive::SharedCtor() {
  _cached_size_ = 0;
  addresult_ = 0;
  friends_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAddFriendReceive::~PBAddFriendReceive() {
  SharedDtor();
}

void PBAddFriendReceive::SharedDtor() {
  if (this != default_instance_) {
    delete friends_;
  }
}

void PBAddFriendReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAddFriendReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAddFriendReceive_descriptor_;
}

const PBAddFriendReceive& PBAddFriendReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAddFriendReceive* PBAddFriendReceive::default_instance_ = NULL;

PBAddFriendReceive* PBAddFriendReceive::New() const {
  return new PBAddFriendReceive;
}

void PBAddFriendReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addresult_ = 0;
    if (has_friends()) {
      if (friends_ != NULL) friends_->::PBAllFriend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAddFriendReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 addResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addresult_)));
          set_has_addresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }
      
      // optional .PBAllFriend friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAddFriendReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 addResult = 1;
  if (has_addresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addresult(), output);
  }
  
  // optional .PBAllFriend friends = 2;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAddFriendReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 addResult = 1;
  if (has_addresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addresult(), target);
  }
  
  // optional .PBAllFriend friends = 2;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friends(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAddFriendReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 addResult = 1;
    if (has_addresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addresult());
    }
    
    // optional .PBAllFriend friends = 2;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAddFriendReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAddFriendReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAddFriendReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAddFriendReceive::MergeFrom(const PBAddFriendReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addresult()) {
      set_addresult(from.addresult());
    }
    if (from.has_friends()) {
      mutable_friends()->::PBAllFriend::MergeFrom(from.friends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAddFriendReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAddFriendReceive::CopyFrom(const PBAddFriendReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAddFriendReceive::IsInitialized() const {
  
  return true;
}

void PBAddFriendReceive::Swap(PBAddFriendReceive* other) {
  if (other != this) {
    std::swap(addresult_, other->addresult_);
    std::swap(friends_, other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAddFriendReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAddFriendReceive_descriptor_;
  metadata.reflection = PBAddFriendReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBActivityBattle::kActivityBattleIDFieldNumber;
const int PBActivityBattle::kFightCountFieldNumber;
#endif  // !_MSC_VER

PBActivityBattle::PBActivityBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBActivityBattle::InitAsDefaultInstance() {
}

PBActivityBattle::PBActivityBattle(const PBActivityBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBActivityBattle::SharedCtor() {
  _cached_size_ = 0;
  activitybattleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fightcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBActivityBattle::~PBActivityBattle() {
  SharedDtor();
}

void PBActivityBattle::SharedDtor() {
  if (activitybattleid_ != &::google::protobuf::internal::kEmptyString) {
    delete activitybattleid_;
  }
  if (this != default_instance_) {
  }
}

void PBActivityBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBActivityBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBActivityBattle_descriptor_;
}

const PBActivityBattle& PBActivityBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBActivityBattle* PBActivityBattle::default_instance_ = NULL;

PBActivityBattle* PBActivityBattle::New() const {
  return new PBActivityBattle;
}

void PBActivityBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activitybattleid()) {
      if (activitybattleid_ != &::google::protobuf::internal::kEmptyString) {
        activitybattleid_->clear();
      }
    }
    fightcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBActivityBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string activityBattleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activitybattleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activitybattleid().data(), this->activitybattleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fightCount;
        break;
      }
      
      // optional int32 fightCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcount_)));
          set_has_fightcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBActivityBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string activityBattleID = 1;
  if (has_activitybattleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activitybattleid().data(), this->activitybattleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activitybattleid(), output);
  }
  
  // optional int32 fightCount = 2;
  if (has_fightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fightcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBActivityBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string activityBattleID = 1;
  if (has_activitybattleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activitybattleid().data(), this->activitybattleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->activitybattleid(), target);
  }
  
  // optional int32 fightCount = 2;
  if (has_fightcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fightcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBActivityBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string activityBattleID = 1;
    if (has_activitybattleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activitybattleid());
    }
    
    // optional int32 fightCount = 2;
    if (has_fightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBActivityBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBActivityBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBActivityBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBActivityBattle::MergeFrom(const PBActivityBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activitybattleid()) {
      set_activitybattleid(from.activitybattleid());
    }
    if (from.has_fightcount()) {
      set_fightcount(from.fightcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBActivityBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBActivityBattle::CopyFrom(const PBActivityBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBActivityBattle::IsInitialized() const {
  
  return true;
}

void PBActivityBattle::Swap(PBActivityBattle* other) {
  if (other != this) {
    std::swap(activitybattleid_, other->activitybattleid_);
    std::swap(fightcount_, other->fightcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBActivityBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBActivityBattle_descriptor_;
  metadata.reflection = PBActivityBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattle::kPveProgressFieldNumber;
const int PBBattle::kAllActivityBattleFieldNumber;
#endif  // !_MSC_VER

PBBattle::PBBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattle::InitAsDefaultInstance() {
}

PBBattle::PBBattle(const PBBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattle::SharedCtor() {
  _cached_size_ = 0;
  pveprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattle::~PBBattle() {
  SharedDtor();
}

void PBBattle::SharedDtor() {
  if (pveprogress_ != &::google::protobuf::internal::kEmptyString) {
    delete pveprogress_;
  }
  if (this != default_instance_) {
  }
}

void PBBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattle_descriptor_;
}

const PBBattle& PBBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattle* PBBattle::default_instance_ = NULL;

PBBattle* PBBattle::New() const {
  return new PBBattle;
}

void PBBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pveprogress()) {
      if (pveprogress_ != &::google::protobuf::internal::kEmptyString) {
        pveprogress_->clear();
      }
    }
  }
  allactivitybattle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pveProgress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pveprogress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pveprogress().data(), this->pveprogress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allActivityBattle;
        break;
      }
      
      // repeated .PBActivityBattle allActivityBattle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allActivityBattle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allactivitybattle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allActivityBattle;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pveProgress = 1;
  if (has_pveprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pveprogress().data(), this->pveprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pveprogress(), output);
  }
  
  // repeated .PBActivityBattle allActivityBattle = 2;
  for (int i = 0; i < this->allactivitybattle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allactivitybattle(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pveProgress = 1;
  if (has_pveprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pveprogress().data(), this->pveprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pveprogress(), target);
  }
  
  // repeated .PBActivityBattle allActivityBattle = 2;
  for (int i = 0; i < this->allactivitybattle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allactivitybattle(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pveProgress = 1;
    if (has_pveprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pveprogress());
    }
    
  }
  // repeated .PBActivityBattle allActivityBattle = 2;
  total_size += 1 * this->allactivitybattle_size();
  for (int i = 0; i < this->allactivitybattle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allactivitybattle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattle::MergeFrom(const PBBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  allactivitybattle_.MergeFrom(from.allactivitybattle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pveprogress()) {
      set_pveprogress(from.pveprogress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattle::CopyFrom(const PBBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattle::IsInitialized() const {
  
  return true;
}

void PBBattle::Swap(PBBattle* other) {
  if (other != this) {
    std::swap(pveprogress_, other->pveprogress_);
    allactivitybattle_.Swap(&other->allactivitybattle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattle_descriptor_;
  metadata.reflection = PBBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGem::kGemIDFieldNumber;
const int PBGem::kGemNumberFieldNumber;
#endif  // !_MSC_VER

PBGem::PBGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGem::InitAsDefaultInstance() {
}

PBGem::PBGem(const PBGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGem::SharedCtor() {
  _cached_size_ = 0;
  gemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gemnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGem::~PBGem() {
  SharedDtor();
}

void PBGem::SharedDtor() {
  if (gemid_ != &::google::protobuf::internal::kEmptyString) {
    delete gemid_;
  }
  if (this != default_instance_) {
  }
}

void PBGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGem_descriptor_;
}

const PBGem& PBGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBGem* PBGem::default_instance_ = NULL;

PBGem* PBGem::New() const {
  return new PBGem;
}

void PBGem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gemid()) {
      if (gemid_ != &::google::protobuf::internal::kEmptyString) {
        gemid_->clear();
      }
    }
    gemnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gemid().data(), this->gemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gemNumber;
        break;
      }
      
      // optional int32 gemNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemnumber_)));
          set_has_gemnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gemID = 1;
  if (has_gemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gemid().data(), this->gemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gemid(), output);
  }
  
  // optional int32 gemNumber = 2;
  if (has_gemnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gemnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gemID = 1;
  if (has_gemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gemid().data(), this->gemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gemid(), target);
  }
  
  // optional int32 gemNumber = 2;
  if (has_gemnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gemnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gemID = 1;
    if (has_gemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gemid());
    }
    
    // optional int32 gemNumber = 2;
    if (has_gemnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemnumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGem::MergeFrom(const PBGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gemid()) {
      set_gemid(from.gemid());
    }
    if (from.has_gemnumber()) {
      set_gemnumber(from.gemnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGem::CopyFrom(const PBGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGem::IsInitialized() const {
  
  return true;
}

void PBGem::Swap(PBGem* other) {
  if (other != this) {
    std::swap(gemid_, other->gemid_);
    std::swap(gemnumber_, other->gemnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGem_descriptor_;
  metadata.reflection = PBGem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAllGem::kAllGemFieldNumber;
#endif  // !_MSC_VER

PBAllGem::PBAllGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAllGem::InitAsDefaultInstance() {
}

PBAllGem::PBAllGem(const PBAllGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAllGem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAllGem::~PBAllGem() {
  SharedDtor();
}

void PBAllGem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAllGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAllGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAllGem_descriptor_;
}

const PBAllGem& PBAllGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAllGem* PBAllGem::default_instance_ = NULL;

PBAllGem* PBAllGem::New() const {
  return new PBAllGem;
}

void PBAllGem::Clear() {
  allgem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAllGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBGem allGem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allGem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allgem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allGem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAllGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBGem allGem = 1;
  for (int i = 0; i < this->allgem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allgem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAllGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBGem allGem = 1;
  for (int i = 0; i < this->allgem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allgem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAllGem::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBGem allGem = 1;
  total_size += 1 * this->allgem_size();
  for (int i = 0; i < this->allgem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allgem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAllGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAllGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAllGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAllGem::MergeFrom(const PBAllGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  allgem_.MergeFrom(from.allgem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAllGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAllGem::CopyFrom(const PBAllGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAllGem::IsInitialized() const {
  
  return true;
}

void PBAllGem::Swap(PBAllGem* other) {
  if (other != this) {
    allgem_.Swap(&other->allgem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAllGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAllGem_descriptor_;
  metadata.reflection = PBAllGem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMission::kMissionIDFieldNumber;
const int PBMission::kIsMissinFinishedFieldNumber;
const int PBMission::kMissonProgressFieldNumber;
#endif  // !_MSC_VER

PBMission::PBMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMission::InitAsDefaultInstance() {
}

PBMission::PBMission(const PBMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMission::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  ismissinfinished_ = false;
  missonprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMission::~PBMission() {
  SharedDtor();
}

void PBMission::SharedDtor() {
  if (missonprogress_ != &::google::protobuf::internal::kEmptyString) {
    delete missonprogress_;
  }
  if (this != default_instance_) {
  }
}

void PBMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMission_descriptor_;
}

const PBMission& PBMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMission* PBMission::default_instance_ = NULL;

PBMission* PBMission::New() const {
  return new PBMission;
}

void PBMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
    ismissinfinished_ = false;
    if (has_missonprogress()) {
      if (missonprogress_ != &::google::protobuf::internal::kEmptyString) {
        missonprogress_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 missionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isMissinFinished;
        break;
      }
      
      // optional bool isMissinFinished = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMissinFinished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismissinfinished_)));
          set_has_ismissinfinished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_missonProgress;
        break;
      }
      
      // optional string missonProgress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missonProgress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_missonprogress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->missonprogress().data(), this->missonprogress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 missionID = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }
  
  // optional bool isMissinFinished = 2;
  if (has_ismissinfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ismissinfinished(), output);
  }
  
  // optional string missonProgress = 3;
  if (has_missonprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missonprogress().data(), this->missonprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->missonprogress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 missionID = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }
  
  // optional bool isMissinFinished = 2;
  if (has_ismissinfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ismissinfinished(), target);
  }
  
  // optional string missonProgress = 3;
  if (has_missonprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missonprogress().data(), this->missonprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->missonprogress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMission::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 missionID = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }
    
    // optional bool isMissinFinished = 2;
    if (has_ismissinfinished()) {
      total_size += 1 + 1;
    }
    
    // optional string missonProgress = 3;
    if (has_missonprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->missonprogress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMission::MergeFrom(const PBMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_ismissinfinished()) {
      set_ismissinfinished(from.ismissinfinished());
    }
    if (from.has_missonprogress()) {
      set_missonprogress(from.missonprogress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMission::CopyFrom(const PBMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMission::IsInitialized() const {
  
  return true;
}

void PBMission::Swap(PBMission* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(ismissinfinished_, other->ismissinfinished_);
    std::swap(missonprogress_, other->missonprogress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMission_descriptor_;
  metadata.reflection = PBMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAllMission::kAllMissionFieldNumber;
#endif  // !_MSC_VER

PBAllMission::PBAllMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAllMission::InitAsDefaultInstance() {
}

PBAllMission::PBAllMission(const PBAllMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAllMission::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAllMission::~PBAllMission() {
  SharedDtor();
}

void PBAllMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAllMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAllMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAllMission_descriptor_;
}

const PBAllMission& PBAllMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAllMission* PBAllMission::default_instance_ = NULL;

PBAllMission* PBAllMission::New() const {
  return new PBAllMission;
}

void PBAllMission::Clear() {
  allmission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAllMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBMission allMission = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allMission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allmission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allMission;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAllMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBMission allMission = 1;
  for (int i = 0; i < this->allmission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allmission(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAllMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBMission allMission = 1;
  for (int i = 0; i < this->allmission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allmission(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAllMission::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBMission allMission = 1;
  total_size += 1 * this->allmission_size();
  for (int i = 0; i < this->allmission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allmission(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAllMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAllMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAllMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAllMission::MergeFrom(const PBAllMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  allmission_.MergeFrom(from.allmission_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAllMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAllMission::CopyFrom(const PBAllMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAllMission::IsInitialized() const {
  
  return true;
}

void PBAllMission::Swap(PBAllMission* other) {
  if (other != this) {
    allmission_.Swap(&other->allmission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAllMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAllMission_descriptor_;
  metadata.reflection = PBAllMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMissionAwardSend::kMissionIDFieldNumber;
#endif  // !_MSC_VER

PBMissionAwardSend::PBMissionAwardSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMissionAwardSend::InitAsDefaultInstance() {
}

PBMissionAwardSend::PBMissionAwardSend(const PBMissionAwardSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMissionAwardSend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMissionAwardSend::~PBMissionAwardSend() {
  SharedDtor();
}

void PBMissionAwardSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMissionAwardSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMissionAwardSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMissionAwardSend_descriptor_;
}

const PBMissionAwardSend& PBMissionAwardSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMissionAwardSend* PBMissionAwardSend::default_instance_ = NULL;

PBMissionAwardSend* PBMissionAwardSend::New() const {
  return new PBMissionAwardSend;
}

void PBMissionAwardSend::Clear() {
  missionid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMissionAwardSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 missionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_missionid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_missionid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_missionID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMissionAwardSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 missionID = 1;
  for (int i = 0; i < this->missionid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->missionid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMissionAwardSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 missionID = 1;
  for (int i = 0; i < this->missionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->missionid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMissionAwardSend::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 missionID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->missionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->missionid(i));
    }
    total_size += 1 * this->missionid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMissionAwardSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMissionAwardSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMissionAwardSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMissionAwardSend::MergeFrom(const PBMissionAwardSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  missionid_.MergeFrom(from.missionid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMissionAwardSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMissionAwardSend::CopyFrom(const PBMissionAwardSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMissionAwardSend::IsInitialized() const {
  
  return true;
}

void PBMissionAwardSend::Swap(PBMissionAwardSend* other) {
  if (other != this) {
    missionid_.Swap(&other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMissionAwardSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMissionAwardSend_descriptor_;
  metadata.reflection = PBMissionAwardSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBUser::kUserIDFieldNumber;
const int PBUser::kUserNameFieldNumber;
const int PBUser::kUserLevelFieldNumber;
const int PBUser::kUserExpFieldNumber;
const int PBUser::kEnergyFieldNumber;
const int PBUser::kNextEnergyTimeFieldNumber;
const int PBUser::kBuyEnergyTimeFieldNumber;
const int PBUser::kDiamondNumberFieldNumber;
const int PBUser::kFriendValueFieldNumber;
const int PBUser::kGoldNumberFieldNumber;
const int PBUser::kLeaderValueFieldNumber;
const int PBUser::kHasMissionFinishedFieldNumber;
const int PBUser::kBagMaxCountFieldNumber;
const int PBUser::kEnergyAgentiaCountFieldNumber;
const int PBUser::kCaptainIndexFieldNumber;
const int PBUser::kRechargedDiamondFieldNumber;
const int PBUser::kWipeOutCountFieldNumber;
#endif  // !_MSC_VER

PBUser::PBUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUser::InitAsDefaultInstance() {
}

PBUser::PBUser(const PBUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userlevel_ = 0;
  userexp_ = 0;
  energy_ = 0;
  nextenergytime_ = 0;
  buyenergytime_ = 0;
  diamondnumber_ = 0;
  friendvalue_ = 0;
  goldnumber_ = 0;
  leadervalue_ = 0;
  hasmissionfinished_ = false;
  bagmaxcount_ = 0;
  energyagentiacount_ = 0;
  captainindex_ = 0;
  rechargeddiamond_ = 0;
  wipeoutcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUser::~PBUser() {
  SharedDtor();
}

void PBUser::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void PBUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUser_descriptor_;
}

const PBUser& PBUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBUser* PBUser::default_instance_ = NULL;

PBUser* PBUser::New() const {
  return new PBUser;
}

void PBUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    userlevel_ = 0;
    userexp_ = 0;
    energy_ = 0;
    nextenergytime_ = 0;
    buyenergytime_ = 0;
    diamondnumber_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    friendvalue_ = 0;
    goldnumber_ = 0;
    leadervalue_ = 0;
    hasmissionfinished_ = false;
    bagmaxcount_ = 0;
    energyagentiacount_ = 0;
    captainindex_ = 0;
    rechargeddiamond_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    wipeoutcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }
      
      // optional string userName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userLevel;
        break;
      }
      
      // optional int32 userLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userExp;
        break;
      }
      
      // optional int32 userExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userexp_)));
          set_has_userexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_energy;
        break;
      }
      
      // optional int32 energy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nextEnergyTime;
        break;
      }
      
      // optional int32 nextEnergyTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextEnergyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextenergytime_)));
          set_has_nextenergytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buyEnergyTime;
        break;
      }
      
      // optional int32 buyEnergyTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyEnergyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyenergytime_)));
          set_has_buyenergytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_diamondNumber;
        break;
      }
      
      // optional int32 diamondNumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamondnumber_)));
          set_has_diamondnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_friendValue;
        break;
      }
      
      // optional int32 friendValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendvalue_)));
          set_has_friendvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_goldNumber;
        break;
      }
      
      // optional int32 goldNumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldnumber_)));
          set_has_goldnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_leaderValue;
        break;
      }
      
      // optional int32 leaderValue = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadervalue_)));
          set_has_leadervalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hasMissionFinished;
        break;
      }
      
      // optional bool hasMissionFinished = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMissionFinished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmissionfinished_)));
          set_has_hasmissionfinished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bagMaxCount;
        break;
      }
      
      // optional int32 bagMaxCount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bagMaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagmaxcount_)));
          set_has_bagmaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_energyAgentiaCount;
        break;
      }
      
      // optional int32 energyAgentiaCount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyAgentiaCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energyagentiacount_)));
          set_has_energyagentiacount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_captainIndex;
        break;
      }
      
      // optional int32 captainIndex = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captainIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &captainindex_)));
          set_has_captainindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_rechargedDiamond;
        break;
      }
      
      // optional int32 rechargedDiamond = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargedDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargeddiamond_)));
          set_has_rechargeddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_wipeOutCount;
        break;
      }
      
      // optional int32 wipeOutCount = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wipeOutCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wipeoutcount_)));
          set_has_wipeoutcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }
  
  // optional string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional int32 userLevel = 3;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userlevel(), output);
  }
  
  // optional int32 userExp = 4;
  if (has_userexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userexp(), output);
  }
  
  // optional int32 energy = 5;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->energy(), output);
  }
  
  // optional int32 nextEnergyTime = 6;
  if (has_nextenergytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nextenergytime(), output);
  }
  
  // optional int32 buyEnergyTime = 7;
  if (has_buyenergytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buyenergytime(), output);
  }
  
  // optional int32 diamondNumber = 8;
  if (has_diamondnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->diamondnumber(), output);
  }
  
  // optional int32 friendValue = 9;
  if (has_friendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->friendvalue(), output);
  }
  
  // optional int32 goldNumber = 10;
  if (has_goldnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->goldnumber(), output);
  }
  
  // optional int32 leaderValue = 11;
  if (has_leadervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->leadervalue(), output);
  }
  
  // optional bool hasMissionFinished = 12;
  if (has_hasmissionfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->hasmissionfinished(), output);
  }
  
  // optional int32 bagMaxCount = 13;
  if (has_bagmaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bagmaxcount(), output);
  }
  
  // optional int32 energyAgentiaCount = 14;
  if (has_energyagentiacount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->energyagentiacount(), output);
  }
  
  // optional int32 captainIndex = 15;
  if (has_captainindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->captainindex(), output);
  }
  
  // optional int32 rechargedDiamond = 16;
  if (has_rechargeddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->rechargeddiamond(), output);
  }
  
  // optional int32 wipeOutCount = 17;
  if (has_wipeoutcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->wipeoutcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }
  
  // optional string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional int32 userLevel = 3;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userlevel(), target);
  }
  
  // optional int32 userExp = 4;
  if (has_userexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userexp(), target);
  }
  
  // optional int32 energy = 5;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->energy(), target);
  }
  
  // optional int32 nextEnergyTime = 6;
  if (has_nextenergytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nextenergytime(), target);
  }
  
  // optional int32 buyEnergyTime = 7;
  if (has_buyenergytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buyenergytime(), target);
  }
  
  // optional int32 diamondNumber = 8;
  if (has_diamondnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->diamondnumber(), target);
  }
  
  // optional int32 friendValue = 9;
  if (has_friendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->friendvalue(), target);
  }
  
  // optional int32 goldNumber = 10;
  if (has_goldnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->goldnumber(), target);
  }
  
  // optional int32 leaderValue = 11;
  if (has_leadervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->leadervalue(), target);
  }
  
  // optional bool hasMissionFinished = 12;
  if (has_hasmissionfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->hasmissionfinished(), target);
  }
  
  // optional int32 bagMaxCount = 13;
  if (has_bagmaxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bagmaxcount(), target);
  }
  
  // optional int32 energyAgentiaCount = 14;
  if (has_energyagentiacount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->energyagentiacount(), target);
  }
  
  // optional int32 captainIndex = 15;
  if (has_captainindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->captainindex(), target);
  }
  
  // optional int32 rechargedDiamond = 16;
  if (has_rechargeddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->rechargeddiamond(), target);
  }
  
  // optional int32 wipeOutCount = 17;
  if (has_wipeoutcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->wipeoutcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional string userName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional int32 userLevel = 3;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userlevel());
    }
    
    // optional int32 userExp = 4;
    if (has_userexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userexp());
    }
    
    // optional int32 energy = 5;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int32 nextEnergyTime = 6;
    if (has_nextenergytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextenergytime());
    }
    
    // optional int32 buyEnergyTime = 7;
    if (has_buyenergytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyenergytime());
    }
    
    // optional int32 diamondNumber = 8;
    if (has_diamondnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamondnumber());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 friendValue = 9;
    if (has_friendvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendvalue());
    }
    
    // optional int32 goldNumber = 10;
    if (has_goldnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldnumber());
    }
    
    // optional int32 leaderValue = 11;
    if (has_leadervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leadervalue());
    }
    
    // optional bool hasMissionFinished = 12;
    if (has_hasmissionfinished()) {
      total_size += 1 + 1;
    }
    
    // optional int32 bagMaxCount = 13;
    if (has_bagmaxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagmaxcount());
    }
    
    // optional int32 energyAgentiaCount = 14;
    if (has_energyagentiacount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energyagentiacount());
    }
    
    // optional int32 captainIndex = 15;
    if (has_captainindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->captainindex());
    }
    
    // optional int32 rechargedDiamond = 16;
    if (has_rechargeddiamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargeddiamond());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 wipeOutCount = 17;
    if (has_wipeoutcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wipeoutcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUser::MergeFrom(const PBUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_userexp()) {
      set_userexp(from.userexp());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_nextenergytime()) {
      set_nextenergytime(from.nextenergytime());
    }
    if (from.has_buyenergytime()) {
      set_buyenergytime(from.buyenergytime());
    }
    if (from.has_diamondnumber()) {
      set_diamondnumber(from.diamondnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_friendvalue()) {
      set_friendvalue(from.friendvalue());
    }
    if (from.has_goldnumber()) {
      set_goldnumber(from.goldnumber());
    }
    if (from.has_leadervalue()) {
      set_leadervalue(from.leadervalue());
    }
    if (from.has_hasmissionfinished()) {
      set_hasmissionfinished(from.hasmissionfinished());
    }
    if (from.has_bagmaxcount()) {
      set_bagmaxcount(from.bagmaxcount());
    }
    if (from.has_energyagentiacount()) {
      set_energyagentiacount(from.energyagentiacount());
    }
    if (from.has_captainindex()) {
      set_captainindex(from.captainindex());
    }
    if (from.has_rechargeddiamond()) {
      set_rechargeddiamond(from.rechargeddiamond());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wipeoutcount()) {
      set_wipeoutcount(from.wipeoutcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUser::CopyFrom(const PBUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUser::IsInitialized() const {
  
  return true;
}

void PBUser::Swap(PBUser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(userexp_, other->userexp_);
    std::swap(energy_, other->energy_);
    std::swap(nextenergytime_, other->nextenergytime_);
    std::swap(buyenergytime_, other->buyenergytime_);
    std::swap(diamondnumber_, other->diamondnumber_);
    std::swap(friendvalue_, other->friendvalue_);
    std::swap(goldnumber_, other->goldnumber_);
    std::swap(leadervalue_, other->leadervalue_);
    std::swap(hasmissionfinished_, other->hasmissionfinished_);
    std::swap(bagmaxcount_, other->bagmaxcount_);
    std::swap(energyagentiacount_, other->energyagentiacount_);
    std::swap(captainindex_, other->captainindex_);
    std::swap(rechargeddiamond_, other->rechargeddiamond_);
    std::swap(wipeoutcount_, other->wipeoutcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUser_descriptor_;
  metadata.reflection = PBUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMissionAwardReceive::kUserFieldNumber;
const int PBMissionAwardReceive::kCardsFieldNumber;
const int PBMissionAwardReceive::kGemsFieldNumber;
#endif  // !_MSC_VER

PBMissionAwardReceive::PBMissionAwardReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMissionAwardReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
  gems_ = const_cast< ::PBAllGem*>(&::PBAllGem::default_instance());
}

PBMissionAwardReceive::PBMissionAwardReceive(const PBMissionAwardReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMissionAwardReceive::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  cards_ = NULL;
  gems_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMissionAwardReceive::~PBMissionAwardReceive() {
  SharedDtor();
}

void PBMissionAwardReceive::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete cards_;
    delete gems_;
  }
}

void PBMissionAwardReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMissionAwardReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMissionAwardReceive_descriptor_;
}

const PBMissionAwardReceive& PBMissionAwardReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMissionAwardReceive* PBMissionAwardReceive::default_instance_ = NULL;

PBMissionAwardReceive* PBMissionAwardReceive::New() const {
  return new PBMissionAwardReceive;
}

void PBMissionAwardReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    if (has_gems()) {
      if (gems_ != NULL) gems_->::PBAllGem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMissionAwardReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBUser user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gems;
        break;
      }
      
      // optional .PBAllGem gems = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMissionAwardReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBUser user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(), output);
  }
  
  // optional .PBAllGem gems = 3;
  if (has_gems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gems(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMissionAwardReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBUser user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(), target);
  }
  
  // optional .PBAllGem gems = 3;
  if (has_gems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gems(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMissionAwardReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBUser user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional .PBAllCard cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional .PBAllGem gems = 3;
    if (has_gems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gems());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMissionAwardReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMissionAwardReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMissionAwardReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMissionAwardReceive::MergeFrom(const PBMissionAwardReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_gems()) {
      mutable_gems()->::PBAllGem::MergeFrom(from.gems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMissionAwardReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMissionAwardReceive::CopyFrom(const PBMissionAwardReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMissionAwardReceive::IsInitialized() const {
  
  return true;
}

void PBMissionAwardReceive::Swap(PBMissionAwardReceive* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(cards_, other->cards_);
    std::swap(gems_, other->gems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMissionAwardReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMissionAwardReceive_descriptor_;
  metadata.reflection = PBMissionAwardReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRunningAfficheReceive::kAffichesFieldNumber;
#endif  // !_MSC_VER

PBRunningAfficheReceive::PBRunningAfficheReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRunningAfficheReceive::InitAsDefaultInstance() {
}

PBRunningAfficheReceive::PBRunningAfficheReceive(const PBRunningAfficheReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRunningAfficheReceive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRunningAfficheReceive::~PBRunningAfficheReceive() {
  SharedDtor();
}

void PBRunningAfficheReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRunningAfficheReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRunningAfficheReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRunningAfficheReceive_descriptor_;
}

const PBRunningAfficheReceive& PBRunningAfficheReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBRunningAfficheReceive* PBRunningAfficheReceive::default_instance_ = NULL;

PBRunningAfficheReceive* PBRunningAfficheReceive::New() const {
  return new PBRunningAfficheReceive;
}

void PBRunningAfficheReceive::Clear() {
  affiches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRunningAfficheReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string affiches = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_affiches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_affiches()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->affiches(0).data(), this->affiches(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_affiches;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRunningAfficheReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string affiches = 1;
  for (int i = 0; i < this->affiches_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->affiches(i).data(), this->affiches(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->affiches(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRunningAfficheReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string affiches = 1;
  for (int i = 0; i < this->affiches_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->affiches(i).data(), this->affiches(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->affiches(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRunningAfficheReceive::ByteSize() const {
  int total_size = 0;
  
  // repeated string affiches = 1;
  total_size += 1 * this->affiches_size();
  for (int i = 0; i < this->affiches_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->affiches(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRunningAfficheReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRunningAfficheReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRunningAfficheReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRunningAfficheReceive::MergeFrom(const PBRunningAfficheReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  affiches_.MergeFrom(from.affiches_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRunningAfficheReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRunningAfficheReceive::CopyFrom(const PBRunningAfficheReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRunningAfficheReceive::IsInitialized() const {
  
  return true;
}

void PBRunningAfficheReceive::Swap(PBRunningAfficheReceive* other) {
  if (other != this) {
    affiches_.Swap(&other->affiches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRunningAfficheReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRunningAfficheReceive_descriptor_;
  metadata.reflection = PBRunningAfficheReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAwardSend::kAwardTypeFieldNumber;
#endif  // !_MSC_VER

PBAwardSend::PBAwardSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAwardSend::InitAsDefaultInstance() {
}

PBAwardSend::PBAwardSend(const PBAwardSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAwardSend::SharedCtor() {
  _cached_size_ = 0;
  awardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAwardSend::~PBAwardSend() {
  SharedDtor();
}

void PBAwardSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBAwardSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAwardSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAwardSend_descriptor_;
}

const PBAwardSend& PBAwardSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAwardSend* PBAwardSend::default_instance_ = NULL;

PBAwardSend* PBAwardSend::New() const {
  return new PBAwardSend;
}

void PBAwardSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAwardSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 awardType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAwardSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 awardType = 1;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->awardtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAwardSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 awardType = 1;
  if (has_awardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->awardtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAwardSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 awardType = 1;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAwardSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAwardSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAwardSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAwardSend::MergeFrom(const PBAwardSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAwardSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAwardSend::CopyFrom(const PBAwardSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAwardSend::IsInitialized() const {
  
  return true;
}

void PBAwardSend::Swap(PBAwardSend* other) {
  if (other != this) {
    std::swap(awardtype_, other->awardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAwardSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAwardSend_descriptor_;
  metadata.reflection = PBAwardSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBAwardReceive::kAwardResultFieldNumber;
const int PBAwardReceive::kUserFieldNumber;
const int PBAwardReceive::kCardsFieldNumber;
const int PBAwardReceive::kAwardCardFieldNumber;
const int PBAwardReceive::kGemsFieldNumber;
const int PBAwardReceive::kAwardGemFieldNumber;
#endif  // !_MSC_VER

PBAwardReceive::PBAwardReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBAwardReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
  gems_ = const_cast< ::PBAllGem*>(&::PBAllGem::default_instance());
}

PBAwardReceive::PBAwardReceive(const PBAwardReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBAwardReceive::SharedCtor() {
  _cached_size_ = 0;
  awardresult_ = 0;
  user_ = NULL;
  cards_ = NULL;
  gems_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBAwardReceive::~PBAwardReceive() {
  SharedDtor();
}

void PBAwardReceive::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete cards_;
    delete gems_;
  }
}

void PBAwardReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAwardReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBAwardReceive_descriptor_;
}

const PBAwardReceive& PBAwardReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBAwardReceive* PBAwardReceive::default_instance_ = NULL;

PBAwardReceive* PBAwardReceive::New() const {
  return new PBAwardReceive;
}

void PBAwardReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardresult_ = 0;
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    if (has_gems()) {
      if (gems_ != NULL) gems_->::PBAllGem::Clear();
    }
  }
  awardcard_.Clear();
  awardgem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBAwardReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 awardResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardresult_)));
          set_has_awardresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_awardCard;
        break;
      }
      
      // repeated .PBCard awardCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_awardCard;
        if (input->ExpectTag(42)) goto parse_gems;
        break;
      }
      
      // optional .PBAllGem gems = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_awardGem;
        break;
      }
      
      // repeated .PBGem awardGem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardGem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardgem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_awardGem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBAwardReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 awardResult = 1;
  if (has_awardresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->awardresult(), output);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(), output);
  }
  
  // repeated .PBCard awardCard = 4;
  for (int i = 0; i < this->awardcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->awardcard(i), output);
  }
  
  // optional .PBAllGem gems = 5;
  if (has_gems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gems(), output);
  }
  
  // repeated .PBGem awardGem = 6;
  for (int i = 0; i < this->awardgem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->awardgem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBAwardReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 awardResult = 1;
  if (has_awardresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->awardresult(), target);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(), target);
  }
  
  // repeated .PBCard awardCard = 4;
  for (int i = 0; i < this->awardcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->awardcard(i), target);
  }
  
  // optional .PBAllGem gems = 5;
  if (has_gems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gems(), target);
  }
  
  // repeated .PBGem awardGem = 6;
  for (int i = 0; i < this->awardgem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->awardgem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBAwardReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 awardResult = 1;
    if (has_awardresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardresult());
    }
    
    // optional .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional .PBAllCard cards = 3;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional .PBAllGem gems = 5;
    if (has_gems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gems());
    }
    
  }
  // repeated .PBCard awardCard = 4;
  total_size += 1 * this->awardcard_size();
  for (int i = 0; i < this->awardcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardcard(i));
  }
  
  // repeated .PBGem awardGem = 6;
  total_size += 1 * this->awardgem_size();
  for (int i = 0; i < this->awardgem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardgem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAwardReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBAwardReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBAwardReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBAwardReceive::MergeFrom(const PBAwardReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardcard_.MergeFrom(from.awardcard_);
  awardgem_.MergeFrom(from.awardgem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardresult()) {
      set_awardresult(from.awardresult());
    }
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_gems()) {
      mutable_gems()->::PBAllGem::MergeFrom(from.gems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBAwardReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAwardReceive::CopyFrom(const PBAwardReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAwardReceive::IsInitialized() const {
  
  return true;
}

void PBAwardReceive::Swap(PBAwardReceive* other) {
  if (other != this) {
    std::swap(awardresult_, other->awardresult_);
    std::swap(user_, other->user_);
    std::swap(cards_, other->cards_);
    awardcard_.Swap(&other->awardcard_);
    std::swap(gems_, other->gems_);
    awardgem_.Swap(&other->awardgem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBAwardReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBAwardReceive_descriptor_;
  metadata.reflection = PBAwardReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBUseEnergyReceive::kUserFieldNumber;
#endif  // !_MSC_VER

PBUseEnergyReceive::PBUseEnergyReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUseEnergyReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
}

PBUseEnergyReceive::PBUseEnergyReceive(const PBUseEnergyReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUseEnergyReceive::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUseEnergyReceive::~PBUseEnergyReceive() {
  SharedDtor();
}

void PBUseEnergyReceive::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void PBUseEnergyReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUseEnergyReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUseEnergyReceive_descriptor_;
}

const PBUseEnergyReceive& PBUseEnergyReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBUseEnergyReceive* PBUseEnergyReceive::default_instance_ = NULL;

PBUseEnergyReceive* PBUseEnergyReceive::New() const {
  return new PBUseEnergyReceive;
}

void PBUseEnergyReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUseEnergyReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUseEnergyReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUseEnergyReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUseEnergyReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUseEnergyReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUseEnergyReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUseEnergyReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUseEnergyReceive::MergeFrom(const PBUseEnergyReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUseEnergyReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUseEnergyReceive::CopyFrom(const PBUseEnergyReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUseEnergyReceive::IsInitialized() const {
  
  return true;
}

void PBUseEnergyReceive::Swap(PBUseEnergyReceive* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBUseEnergyReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUseEnergyReceive_descriptor_;
  metadata.reflection = PBUseEnergyReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRegisterCheckSend::kMacAddressFieldNumber;
const int PBRegisterCheckSend::kUserSourceTypeFieldNumber;
const int PBRegisterCheckSend::kUserAccountFieldNumber;
const int PBRegisterCheckSend::kUserPasswdFieldNumber;
const int PBRegisterCheckSend::kUserNameFieldNumber;
#endif  // !_MSC_VER

PBRegisterCheckSend::PBRegisterCheckSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRegisterCheckSend::InitAsDefaultInstance() {
}

PBRegisterCheckSend::PBRegisterCheckSend(const PBRegisterCheckSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRegisterCheckSend::SharedCtor() {
  _cached_size_ = 0;
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usersourcetype_ = 0;
  useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRegisterCheckSend::~PBRegisterCheckSend() {
  SharedDtor();
}

void PBRegisterCheckSend::SharedDtor() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    delete useraccount_;
  }
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpasswd_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void PBRegisterCheckSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRegisterCheckSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRegisterCheckSend_descriptor_;
}

const PBRegisterCheckSend& PBRegisterCheckSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBRegisterCheckSend* PBRegisterCheckSend::default_instance_ = NULL;

PBRegisterCheckSend* PBRegisterCheckSend::New() const {
  return new PBRegisterCheckSend;
}

void PBRegisterCheckSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
        macaddress_->clear();
      }
    }
    usersourcetype_ = 0;
    if (has_useraccount()) {
      if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
        useraccount_->clear();
      }
    }
    if (has_userpasswd()) {
      if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
        userpasswd_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRegisterCheckSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string macAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userSourceType;
        break;
      }
      
      // optional int32 userSourceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userSourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usersourcetype_)));
          set_has_usersourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userAccount;
        break;
      }
      
      // optional string userAccount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useraccount().data(), this->useraccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userPasswd;
        break;
      }
      
      // optional string userPasswd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userpasswd().data(), this->userpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userName;
        break;
      }
      
      // optional string userName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRegisterCheckSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->macaddress(), output);
  }
  
  // optional int32 userSourceType = 2;
  if (has_usersourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usersourcetype(), output);
  }
  
  // optional string userAccount = 3;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->useraccount(), output);
  }
  
  // optional string userPasswd = 4;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userpasswd(), output);
  }
  
  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRegisterCheckSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->macaddress(), target);
  }
  
  // optional int32 userSourceType = 2;
  if (has_usersourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usersourcetype(), target);
  }
  
  // optional string userAccount = 3;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useraccount(), target);
  }
  
  // optional string userPasswd = 4;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userpasswd(), target);
  }
  
  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRegisterCheckSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string macAddress = 1;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }
    
    // optional int32 userSourceType = 2;
    if (has_usersourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usersourcetype());
    }
    
    // optional string userAccount = 3;
    if (has_useraccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useraccount());
    }
    
    // optional string userPasswd = 4;
    if (has_userpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpasswd());
    }
    
    // optional string userName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRegisterCheckSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRegisterCheckSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRegisterCheckSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRegisterCheckSend::MergeFrom(const PBRegisterCheckSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
    if (from.has_usersourcetype()) {
      set_usersourcetype(from.usersourcetype());
    }
    if (from.has_useraccount()) {
      set_useraccount(from.useraccount());
    }
    if (from.has_userpasswd()) {
      set_userpasswd(from.userpasswd());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRegisterCheckSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRegisterCheckSend::CopyFrom(const PBRegisterCheckSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRegisterCheckSend::IsInitialized() const {
  
  return true;
}

void PBRegisterCheckSend::Swap(PBRegisterCheckSend* other) {
  if (other != this) {
    std::swap(macaddress_, other->macaddress_);
    std::swap(usersourcetype_, other->usersourcetype_);
    std::swap(useraccount_, other->useraccount_);
    std::swap(userpasswd_, other->userpasswd_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRegisterCheckSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRegisterCheckSend_descriptor_;
  metadata.reflection = PBRegisterCheckSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRegisterCheckReceive::kResultFieldNumber;
#endif  // !_MSC_VER

PBRegisterCheckReceive::PBRegisterCheckReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRegisterCheckReceive::InitAsDefaultInstance() {
}

PBRegisterCheckReceive::PBRegisterCheckReceive(const PBRegisterCheckReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRegisterCheckReceive::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRegisterCheckReceive::~PBRegisterCheckReceive() {
  SharedDtor();
}

void PBRegisterCheckReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRegisterCheckReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRegisterCheckReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRegisterCheckReceive_descriptor_;
}

const PBRegisterCheckReceive& PBRegisterCheckReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBRegisterCheckReceive* PBRegisterCheckReceive::default_instance_ = NULL;

PBRegisterCheckReceive* PBRegisterCheckReceive::New() const {
  return new PBRegisterCheckReceive;
}

void PBRegisterCheckReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRegisterCheckReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRegisterCheckReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRegisterCheckReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRegisterCheckReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRegisterCheckReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRegisterCheckReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRegisterCheckReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRegisterCheckReceive::MergeFrom(const PBRegisterCheckReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRegisterCheckReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRegisterCheckReceive::CopyFrom(const PBRegisterCheckReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRegisterCheckReceive::IsInitialized() const {
  
  return true;
}

void PBRegisterCheckReceive::Swap(PBRegisterCheckReceive* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRegisterCheckReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRegisterCheckReceive_descriptor_;
  metadata.reflection = PBRegisterCheckReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRegisterSend::kMacAddressFieldNumber;
const int PBRegisterSend::kUserSourceTypeFieldNumber;
const int PBRegisterSend::kUserAccountFieldNumber;
const int PBRegisterSend::kUserPasswdFieldNumber;
const int PBRegisterSend::kUserNameFieldNumber;
const int PBRegisterSend::kCaptainIndexFieldNumber;
#endif  // !_MSC_VER

PBRegisterSend::PBRegisterSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRegisterSend::InitAsDefaultInstance() {
}

PBRegisterSend::PBRegisterSend(const PBRegisterSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRegisterSend::SharedCtor() {
  _cached_size_ = 0;
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usersourcetype_ = 0;
  useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  captainindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRegisterSend::~PBRegisterSend() {
  SharedDtor();
}

void PBRegisterSend::SharedDtor() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    delete useraccount_;
  }
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpasswd_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void PBRegisterSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRegisterSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRegisterSend_descriptor_;
}

const PBRegisterSend& PBRegisterSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBRegisterSend* PBRegisterSend::default_instance_ = NULL;

PBRegisterSend* PBRegisterSend::New() const {
  return new PBRegisterSend;
}

void PBRegisterSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
        macaddress_->clear();
      }
    }
    usersourcetype_ = 0;
    if (has_useraccount()) {
      if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
        useraccount_->clear();
      }
    }
    if (has_userpasswd()) {
      if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
        userpasswd_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    captainindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRegisterSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string macAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userSourceType;
        break;
      }
      
      // optional int32 userSourceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userSourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usersourcetype_)));
          set_has_usersourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userAccount;
        break;
      }
      
      // optional string userAccount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useraccount().data(), this->useraccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userPasswd;
        break;
      }
      
      // optional string userPasswd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userpasswd().data(), this->userpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userName;
        break;
      }
      
      // optional string userName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_captainIndex;
        break;
      }
      
      // optional int32 captainIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captainIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &captainindex_)));
          set_has_captainindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRegisterSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->macaddress(), output);
  }
  
  // optional int32 userSourceType = 2;
  if (has_usersourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usersourcetype(), output);
  }
  
  // optional string userAccount = 3;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->useraccount(), output);
  }
  
  // optional string userPasswd = 4;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userpasswd(), output);
  }
  
  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username(), output);
  }
  
  // optional int32 captainIndex = 6;
  if (has_captainindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->captainindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRegisterSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->macaddress(), target);
  }
  
  // optional int32 userSourceType = 2;
  if (has_usersourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usersourcetype(), target);
  }
  
  // optional string userAccount = 3;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useraccount(), target);
  }
  
  // optional string userPasswd = 4;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userpasswd(), target);
  }
  
  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }
  
  // optional int32 captainIndex = 6;
  if (has_captainindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->captainindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRegisterSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string macAddress = 1;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }
    
    // optional int32 userSourceType = 2;
    if (has_usersourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usersourcetype());
    }
    
    // optional string userAccount = 3;
    if (has_useraccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useraccount());
    }
    
    // optional string userPasswd = 4;
    if (has_userpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpasswd());
    }
    
    // optional string userName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional int32 captainIndex = 6;
    if (has_captainindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->captainindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRegisterSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRegisterSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRegisterSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRegisterSend::MergeFrom(const PBRegisterSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
    if (from.has_usersourcetype()) {
      set_usersourcetype(from.usersourcetype());
    }
    if (from.has_useraccount()) {
      set_useraccount(from.useraccount());
    }
    if (from.has_userpasswd()) {
      set_userpasswd(from.userpasswd());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_captainindex()) {
      set_captainindex(from.captainindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRegisterSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRegisterSend::CopyFrom(const PBRegisterSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRegisterSend::IsInitialized() const {
  
  return true;
}

void PBRegisterSend::Swap(PBRegisterSend* other) {
  if (other != this) {
    std::swap(macaddress_, other->macaddress_);
    std::swap(usersourcetype_, other->usersourcetype_);
    std::swap(useraccount_, other->useraccount_);
    std::swap(userpasswd_, other->userpasswd_);
    std::swap(username_, other->username_);
    std::swap(captainindex_, other->captainindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRegisterSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRegisterSend_descriptor_;
  metadata.reflection = PBRegisterSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLoginSend::kMacAddressFieldNumber;
const int PBLoginSend::kUserSourceTypeFieldNumber;
const int PBLoginSend::kUserAccountFieldNumber;
const int PBLoginSend::kUserPasswdFieldNumber;
#endif  // !_MSC_VER

PBLoginSend::PBLoginSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLoginSend::InitAsDefaultInstance() {
}

PBLoginSend::PBLoginSend(const PBLoginSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLoginSend::SharedCtor() {
  _cached_size_ = 0;
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usersourcetype_ = 0;
  useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLoginSend::~PBLoginSend() {
  SharedDtor();
}

void PBLoginSend::SharedDtor() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    delete useraccount_;
  }
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpasswd_;
  }
  if (this != default_instance_) {
  }
}

void PBLoginSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLoginSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLoginSend_descriptor_;
}

const PBLoginSend& PBLoginSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBLoginSend* PBLoginSend::default_instance_ = NULL;

PBLoginSend* PBLoginSend::New() const {
  return new PBLoginSend;
}

void PBLoginSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
        macaddress_->clear();
      }
    }
    usersourcetype_ = 0;
    if (has_useraccount()) {
      if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
        useraccount_->clear();
      }
    }
    if (has_userpasswd()) {
      if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
        userpasswd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLoginSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string macAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userSourceType;
        break;
      }
      
      // optional int32 userSourceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userSourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usersourcetype_)));
          set_has_usersourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userAccount;
        break;
      }
      
      // optional string userAccount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useraccount().data(), this->useraccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userPasswd;
        break;
      }
      
      // optional string userPasswd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userpasswd().data(), this->userpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLoginSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->macaddress(), output);
  }
  
  // optional int32 userSourceType = 2;
  if (has_usersourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usersourcetype(), output);
  }
  
  // optional string userAccount = 3;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->useraccount(), output);
  }
  
  // optional string userPasswd = 4;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userpasswd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLoginSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->macaddress(), target);
  }
  
  // optional int32 userSourceType = 2;
  if (has_usersourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usersourcetype(), target);
  }
  
  // optional string userAccount = 3;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useraccount(), target);
  }
  
  // optional string userPasswd = 4;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userpasswd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLoginSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string macAddress = 1;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }
    
    // optional int32 userSourceType = 2;
    if (has_usersourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usersourcetype());
    }
    
    // optional string userAccount = 3;
    if (has_useraccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useraccount());
    }
    
    // optional string userPasswd = 4;
    if (has_userpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpasswd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLoginSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLoginSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLoginSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLoginSend::MergeFrom(const PBLoginSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
    if (from.has_usersourcetype()) {
      set_usersourcetype(from.usersourcetype());
    }
    if (from.has_useraccount()) {
      set_useraccount(from.useraccount());
    }
    if (from.has_userpasswd()) {
      set_userpasswd(from.userpasswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLoginSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoginSend::CopyFrom(const PBLoginSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLoginSend::IsInitialized() const {
  
  return true;
}

void PBLoginSend::Swap(PBLoginSend* other) {
  if (other != this) {
    std::swap(macaddress_, other->macaddress_);
    std::swap(usersourcetype_, other->usersourcetype_);
    std::swap(useraccount_, other->useraccount_);
    std::swap(userpasswd_, other->userpasswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLoginSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLoginSend_descriptor_;
  metadata.reflection = PBLoginSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLoginReceive::kResultFieldNumber;
const int PBLoginReceive::kUserFieldNumber;
const int PBLoginReceive::kBattleFieldNumber;
const int PBLoginReceive::kCardsFieldNumber;
const int PBLoginReceive::kMissionsFieldNumber;
const int PBLoginReceive::kBattleCardsFieldNumber;
const int PBLoginReceive::kGemsFieldNumber;
const int PBLoginReceive::kTokenFieldNumber;
const int PBLoginReceive::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

PBLoginReceive::PBLoginReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLoginReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
  battle_ = const_cast< ::PBBattle*>(&::PBBattle::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
  missions_ = const_cast< ::PBAllMission*>(&::PBAllMission::default_instance());
  battlecards_ = const_cast< ::PBBattleCard*>(&::PBBattleCard::default_instance());
  gems_ = const_cast< ::PBAllGem*>(&::PBAllGem::default_instance());
}

PBLoginReceive::PBLoginReceive(const PBLoginReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLoginReceive::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_ = NULL;
  battle_ = NULL;
  cards_ = NULL;
  missions_ = NULL;
  battlecards_ = NULL;
  gems_ = NULL;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fightcapacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLoginReceive::~PBLoginReceive() {
  SharedDtor();
}

void PBLoginReceive::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete user_;
    delete battle_;
    delete cards_;
    delete missions_;
    delete battlecards_;
    delete gems_;
  }
}

void PBLoginReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLoginReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLoginReceive_descriptor_;
}

const PBLoginReceive& PBLoginReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBLoginReceive* PBLoginReceive::default_instance_ = NULL;

PBLoginReceive* PBLoginReceive::New() const {
  return new PBLoginReceive;
}

void PBLoginReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
    if (has_battle()) {
      if (battle_ != NULL) battle_->::PBBattle::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    if (has_missions()) {
      if (missions_ != NULL) missions_->::PBAllMission::Clear();
    }
    if (has_battlecards()) {
      if (battlecards_ != NULL) battlecards_->::PBBattleCard::Clear();
    }
    if (has_gems()) {
      if (gems_ != NULL) gems_->::PBAllGem::Clear();
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fightcapacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLoginReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle;
        break;
      }
      
      // optional .PBBattle battle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_missions;
        break;
      }
      
      // optional .PBAllMission missions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_battleCards;
        break;
      }
      
      // optional .PBBattleCard battleCards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gems;
        break;
      }
      
      // optional .PBAllGem gems = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_token;
        break;
      }
      
      // optional string token = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fightCapacity;
        break;
      }
      
      // optional int32 fightCapacity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcapacity_)));
          set_has_fightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLoginReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  // optional .PBBattle battle = 3;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle(), output);
  }
  
  // optional .PBAllCard cards = 4;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cards(), output);
  }
  
  // optional .PBAllMission missions = 5;
  if (has_missions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->missions(), output);
  }
  
  // optional .PBBattleCard battleCards = 6;
  if (has_battlecards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->battlecards(), output);
  }
  
  // optional .PBAllGem gems = 7;
  if (has_gems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gems(), output);
  }
  
  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->token(), output);
  }
  
  // optional int32 fightCapacity = 9;
  if (has_fightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fightcapacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLoginReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  // optional .PBBattle battle = 3;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle(), target);
  }
  
  // optional .PBAllCard cards = 4;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cards(), target);
  }
  
  // optional .PBAllMission missions = 5;
  if (has_missions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->missions(), target);
  }
  
  // optional .PBBattleCard battleCards = 6;
  if (has_battlecards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->battlecards(), target);
  }
  
  // optional .PBAllGem gems = 7;
  if (has_gems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gems(), target);
  }
  
  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }
  
  // optional int32 fightCapacity = 9;
  if (has_fightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fightcapacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLoginReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional .PBBattle battle = 3;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle());
    }
    
    // optional .PBAllCard cards = 4;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional .PBAllMission missions = 5;
    if (has_missions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missions());
    }
    
    // optional .PBBattleCard battleCards = 6;
    if (has_battlecards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecards());
    }
    
    // optional .PBAllGem gems = 7;
    if (has_gems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gems());
    }
    
    // optional string token = 8;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fightCapacity = 9;
    if (has_fightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcapacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLoginReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLoginReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLoginReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLoginReceive::MergeFrom(const PBLoginReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
    if (from.has_battle()) {
      mutable_battle()->::PBBattle::MergeFrom(from.battle());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_missions()) {
      mutable_missions()->::PBAllMission::MergeFrom(from.missions());
    }
    if (from.has_battlecards()) {
      mutable_battlecards()->::PBBattleCard::MergeFrom(from.battlecards());
    }
    if (from.has_gems()) {
      mutable_gems()->::PBAllGem::MergeFrom(from.gems());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fightcapacity()) {
      set_fightcapacity(from.fightcapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLoginReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoginReceive::CopyFrom(const PBLoginReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLoginReceive::IsInitialized() const {
  
  return true;
}

void PBLoginReceive::Swap(PBLoginReceive* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_, other->user_);
    std::swap(battle_, other->battle_);
    std::swap(cards_, other->cards_);
    std::swap(missions_, other->missions_);
    std::swap(battlecards_, other->battlecards_);
    std::swap(gems_, other->gems_);
    std::swap(token_, other->token_);
    std::swap(fightcapacity_, other->fightcapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLoginReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLoginReceive_descriptor_;
  metadata.reflection = PBLoginReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardLevelUpSend::kUpCardItemIDFieldNumber;
const int PBCardLevelUpSend::kEatCardItemIDsFieldNumber;
#endif  // !_MSC_VER

PBCardLevelUpSend::PBCardLevelUpSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardLevelUpSend::InitAsDefaultInstance() {
}

PBCardLevelUpSend::PBCardLevelUpSend(const PBCardLevelUpSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardLevelUpSend::SharedCtor() {
  _cached_size_ = 0;
  upcarditemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardLevelUpSend::~PBCardLevelUpSend() {
  SharedDtor();
}

void PBCardLevelUpSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCardLevelUpSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardLevelUpSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardLevelUpSend_descriptor_;
}

const PBCardLevelUpSend& PBCardLevelUpSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardLevelUpSend* PBCardLevelUpSend::default_instance_ = NULL;

PBCardLevelUpSend* PBCardLevelUpSend::New() const {
  return new PBCardLevelUpSend;
}

void PBCardLevelUpSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upcarditemid_ = 0;
  }
  eatcarditemids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardLevelUpSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 upCardItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upcarditemid_)));
          set_has_upcarditemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eatCardItemIDs;
        break;
      }
      
      // repeated int32 eatCardItemIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatCardItemIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_eatcarditemids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_eatcarditemids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eatCardItemIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardLevelUpSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 upCardItemID = 1;
  if (has_upcarditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upcarditemid(), output);
  }
  
  // repeated int32 eatCardItemIDs = 2;
  for (int i = 0; i < this->eatcarditemids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->eatcarditemids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardLevelUpSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 upCardItemID = 1;
  if (has_upcarditemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upcarditemid(), target);
  }
  
  // repeated int32 eatCardItemIDs = 2;
  for (int i = 0; i < this->eatcarditemids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->eatcarditemids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardLevelUpSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 upCardItemID = 1;
    if (has_upcarditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upcarditemid());
    }
    
  }
  // repeated int32 eatCardItemIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->eatcarditemids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->eatcarditemids(i));
    }
    total_size += 1 * this->eatcarditemids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardLevelUpSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardLevelUpSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardLevelUpSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardLevelUpSend::MergeFrom(const PBCardLevelUpSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  eatcarditemids_.MergeFrom(from.eatcarditemids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upcarditemid()) {
      set_upcarditemid(from.upcarditemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardLevelUpSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardLevelUpSend::CopyFrom(const PBCardLevelUpSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardLevelUpSend::IsInitialized() const {
  
  return true;
}

void PBCardLevelUpSend::Swap(PBCardLevelUpSend* other) {
  if (other != this) {
    std::swap(upcarditemid_, other->upcarditemid_);
    eatcarditemids_.Swap(&other->eatcarditemids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardLevelUpSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardLevelUpSend_descriptor_;
  metadata.reflection = PBCardLevelUpSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardLevelUpReceive::kUpResultFieldNumber;
const int PBCardLevelUpReceive::kCardsFieldNumber;
const int PBCardLevelUpReceive::kGoldNumberFieldNumber;
const int PBCardLevelUpReceive::kTargetCardFieldNumber;
const int PBCardLevelUpReceive::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

PBCardLevelUpReceive::PBCardLevelUpReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardLevelUpReceive::InitAsDefaultInstance() {
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
  targetcard_ = const_cast< ::PBCard*>(&::PBCard::default_instance());
}

PBCardLevelUpReceive::PBCardLevelUpReceive(const PBCardLevelUpReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardLevelUpReceive::SharedCtor() {
  _cached_size_ = 0;
  upresult_ = 0;
  cards_ = NULL;
  goldnumber_ = 0;
  targetcard_ = NULL;
  fightcapacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardLevelUpReceive::~PBCardLevelUpReceive() {
  SharedDtor();
}

void PBCardLevelUpReceive::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
    delete targetcard_;
  }
}

void PBCardLevelUpReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardLevelUpReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardLevelUpReceive_descriptor_;
}

const PBCardLevelUpReceive& PBCardLevelUpReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardLevelUpReceive* PBCardLevelUpReceive::default_instance_ = NULL;

PBCardLevelUpReceive* PBCardLevelUpReceive::New() const {
  return new PBCardLevelUpReceive;
}

void PBCardLevelUpReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upresult_ = 0;
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    goldnumber_ = 0;
    if (has_targetcard()) {
      if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
    }
    fightcapacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardLevelUpReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 upResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upresult_)));
          set_has_upresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldNumber;
        break;
      }
      
      // optional int32 goldNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldnumber_)));
          set_has_goldnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetCard;
        break;
      }
      
      // optional .PBCard targetCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fightCapacity;
        break;
      }
      
      // optional int32 fightCapacity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcapacity_)));
          set_has_fightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardLevelUpReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 upResult = 1;
  if (has_upresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upresult(), output);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(), output);
  }
  
  // optional int32 goldNumber = 3;
  if (has_goldnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goldnumber(), output);
  }
  
  // optional .PBCard targetCard = 4;
  if (has_targetcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetcard(), output);
  }
  
  // optional int32 fightCapacity = 5;
  if (has_fightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fightcapacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardLevelUpReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 upResult = 1;
  if (has_upresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upresult(), target);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(), target);
  }
  
  // optional int32 goldNumber = 3;
  if (has_goldnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goldnumber(), target);
  }
  
  // optional .PBCard targetCard = 4;
  if (has_targetcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetcard(), target);
  }
  
  // optional int32 fightCapacity = 5;
  if (has_fightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fightcapacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardLevelUpReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 upResult = 1;
    if (has_upresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upresult());
    }
    
    // optional .PBAllCard cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional int32 goldNumber = 3;
    if (has_goldnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldnumber());
    }
    
    // optional .PBCard targetCard = 4;
    if (has_targetcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetcard());
    }
    
    // optional int32 fightCapacity = 5;
    if (has_fightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcapacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardLevelUpReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardLevelUpReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardLevelUpReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardLevelUpReceive::MergeFrom(const PBCardLevelUpReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upresult()) {
      set_upresult(from.upresult());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_goldnumber()) {
      set_goldnumber(from.goldnumber());
    }
    if (from.has_targetcard()) {
      mutable_targetcard()->::PBCard::MergeFrom(from.targetcard());
    }
    if (from.has_fightcapacity()) {
      set_fightcapacity(from.fightcapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardLevelUpReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardLevelUpReceive::CopyFrom(const PBCardLevelUpReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardLevelUpReceive::IsInitialized() const {
  
  return true;
}

void PBCardLevelUpReceive::Swap(PBCardLevelUpReceive* other) {
  if (other != this) {
    std::swap(upresult_, other->upresult_);
    std::swap(cards_, other->cards_);
    std::swap(goldnumber_, other->goldnumber_);
    std::swap(targetcard_, other->targetcard_);
    std::swap(fightcapacity_, other->fightcapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardLevelUpReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardLevelUpReceive_descriptor_;
  metadata.reflection = PBCardLevelUpReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardEvolutionSend::kTargetCardItemIDFieldNumber;
const int PBCardEvolutionSend::kTargetGemIdFieldNumber;
const int PBCardEvolutionSend::kMaterialCardItemIDsFieldNumber;
const int PBCardEvolutionSend::kGemIDFieldNumber;
#endif  // !_MSC_VER

PBCardEvolutionSend::PBCardEvolutionSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardEvolutionSend::InitAsDefaultInstance() {
}

PBCardEvolutionSend::PBCardEvolutionSend(const PBCardEvolutionSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardEvolutionSend::SharedCtor() {
  _cached_size_ = 0;
  targetcarditemid_ = 0;
  targetgemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardEvolutionSend::~PBCardEvolutionSend() {
  SharedDtor();
}

void PBCardEvolutionSend::SharedDtor() {
  if (targetgemid_ != &::google::protobuf::internal::kEmptyString) {
    delete targetgemid_;
  }
  if (gemid_ != &::google::protobuf::internal::kEmptyString) {
    delete gemid_;
  }
  if (this != default_instance_) {
  }
}

void PBCardEvolutionSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardEvolutionSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardEvolutionSend_descriptor_;
}

const PBCardEvolutionSend& PBCardEvolutionSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardEvolutionSend* PBCardEvolutionSend::default_instance_ = NULL;

PBCardEvolutionSend* PBCardEvolutionSend::New() const {
  return new PBCardEvolutionSend;
}

void PBCardEvolutionSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetcarditemid_ = 0;
    if (has_targetgemid()) {
      if (targetgemid_ != &::google::protobuf::internal::kEmptyString) {
        targetgemid_->clear();
      }
    }
    if (has_gemid()) {
      if (gemid_ != &::google::protobuf::internal::kEmptyString) {
        gemid_->clear();
      }
    }
  }
  materialcarditemids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardEvolutionSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 targetCardItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetcarditemid_)));
          set_has_targetcarditemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetGemId;
        break;
      }
      
      // optional string targetGemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetGemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetgemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetgemid().data(), this->targetgemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materialCardItemIDs;
        break;
      }
      
      // repeated int32 materialCardItemIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialCardItemIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_materialcarditemids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_materialcarditemids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materialCardItemIDs;
        if (input->ExpectTag(34)) goto parse_gemID;
        break;
      }
      
      // optional string gemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gemID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gemid().data(), this->gemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardEvolutionSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 targetCardItemID = 1;
  if (has_targetcarditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetcarditemid(), output);
  }
  
  // optional string targetGemId = 2;
  if (has_targetgemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetgemid().data(), this->targetgemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->targetgemid(), output);
  }
  
  // repeated int32 materialCardItemIDs = 3;
  for (int i = 0; i < this->materialcarditemids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->materialcarditemids(i), output);
  }
  
  // optional string gemID = 4;
  if (has_gemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gemid().data(), this->gemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardEvolutionSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 targetCardItemID = 1;
  if (has_targetcarditemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetcarditemid(), target);
  }
  
  // optional string targetGemId = 2;
  if (has_targetgemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetgemid().data(), this->targetgemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->targetgemid(), target);
  }
  
  // repeated int32 materialCardItemIDs = 3;
  for (int i = 0; i < this->materialcarditemids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->materialcarditemids(i), target);
  }
  
  // optional string gemID = 4;
  if (has_gemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gemid().data(), this->gemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardEvolutionSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 targetCardItemID = 1;
    if (has_targetcarditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetcarditemid());
    }
    
    // optional string targetGemId = 2;
    if (has_targetgemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetgemid());
    }
    
    // optional string gemID = 4;
    if (has_gemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gemid());
    }
    
  }
  // repeated int32 materialCardItemIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->materialcarditemids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->materialcarditemids(i));
    }
    total_size += 1 * this->materialcarditemids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardEvolutionSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardEvolutionSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardEvolutionSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardEvolutionSend::MergeFrom(const PBCardEvolutionSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  materialcarditemids_.MergeFrom(from.materialcarditemids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetcarditemid()) {
      set_targetcarditemid(from.targetcarditemid());
    }
    if (from.has_targetgemid()) {
      set_targetgemid(from.targetgemid());
    }
    if (from.has_gemid()) {
      set_gemid(from.gemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardEvolutionSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardEvolutionSend::CopyFrom(const PBCardEvolutionSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardEvolutionSend::IsInitialized() const {
  
  return true;
}

void PBCardEvolutionSend::Swap(PBCardEvolutionSend* other) {
  if (other != this) {
    std::swap(targetcarditemid_, other->targetcarditemid_);
    std::swap(targetgemid_, other->targetgemid_);
    materialcarditemids_.Swap(&other->materialcarditemids_);
    std::swap(gemid_, other->gemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardEvolutionSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardEvolutionSend_descriptor_;
  metadata.reflection = PBCardEvolutionSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardEvolutionRecieve::kEvolutionResultFieldNumber;
const int PBCardEvolutionRecieve::kTargetCardFieldNumber;
const int PBCardEvolutionRecieve::kCardsFieldNumber;
const int PBCardEvolutionRecieve::kGemsFieldNumber;
const int PBCardEvolutionRecieve::kAllGoldNumberFieldNumber;
const int PBCardEvolutionRecieve::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

PBCardEvolutionRecieve::PBCardEvolutionRecieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardEvolutionRecieve::InitAsDefaultInstance() {
  targetcard_ = const_cast< ::PBCard*>(&::PBCard::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
  gems_ = const_cast< ::PBAllGem*>(&::PBAllGem::default_instance());
}

PBCardEvolutionRecieve::PBCardEvolutionRecieve(const PBCardEvolutionRecieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardEvolutionRecieve::SharedCtor() {
  _cached_size_ = 0;
  evolutionresult_ = 0;
  targetcard_ = NULL;
  cards_ = NULL;
  gems_ = NULL;
  allgoldnumber_ = 0;
  fightcapacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardEvolutionRecieve::~PBCardEvolutionRecieve() {
  SharedDtor();
}

void PBCardEvolutionRecieve::SharedDtor() {
  if (this != default_instance_) {
    delete targetcard_;
    delete cards_;
    delete gems_;
  }
}

void PBCardEvolutionRecieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardEvolutionRecieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardEvolutionRecieve_descriptor_;
}

const PBCardEvolutionRecieve& PBCardEvolutionRecieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardEvolutionRecieve* PBCardEvolutionRecieve::default_instance_ = NULL;

PBCardEvolutionRecieve* PBCardEvolutionRecieve::New() const {
  return new PBCardEvolutionRecieve;
}

void PBCardEvolutionRecieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    evolutionresult_ = 0;
    if (has_targetcard()) {
      if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    if (has_gems()) {
      if (gems_ != NULL) gems_->::PBAllGem::Clear();
    }
    allgoldnumber_ = 0;
    fightcapacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardEvolutionRecieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 evolutionResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evolutionresult_)));
          set_has_evolutionresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetCard;
        break;
      }
      
      // optional .PBCard targetCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gems;
        break;
      }
      
      // optional .PBAllGem gems = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_allGoldNumber;
        break;
      }
      
      // optional int32 allGoldNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allGoldNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allgoldnumber_)));
          set_has_allgoldnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fightCapacity;
        break;
      }
      
      // optional int32 fightCapacity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcapacity_)));
          set_has_fightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardEvolutionRecieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 evolutionResult = 1;
  if (has_evolutionresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->evolutionresult(), output);
  }
  
  // optional .PBCard targetCard = 2;
  if (has_targetcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetcard(), output);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(), output);
  }
  
  // optional .PBAllGem gems = 4;
  if (has_gems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gems(), output);
  }
  
  // optional int32 allGoldNumber = 5;
  if (has_allgoldnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->allgoldnumber(), output);
  }
  
  // optional int32 fightCapacity = 6;
  if (has_fightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fightcapacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardEvolutionRecieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 evolutionResult = 1;
  if (has_evolutionresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->evolutionresult(), target);
  }
  
  // optional .PBCard targetCard = 2;
  if (has_targetcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetcard(), target);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(), target);
  }
  
  // optional .PBAllGem gems = 4;
  if (has_gems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gems(), target);
  }
  
  // optional int32 allGoldNumber = 5;
  if (has_allgoldnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->allgoldnumber(), target);
  }
  
  // optional int32 fightCapacity = 6;
  if (has_fightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fightcapacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardEvolutionRecieve::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 evolutionResult = 1;
    if (has_evolutionresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evolutionresult());
    }
    
    // optional .PBCard targetCard = 2;
    if (has_targetcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetcard());
    }
    
    // optional .PBAllCard cards = 3;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional .PBAllGem gems = 4;
    if (has_gems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gems());
    }
    
    // optional int32 allGoldNumber = 5;
    if (has_allgoldnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allgoldnumber());
    }
    
    // optional int32 fightCapacity = 6;
    if (has_fightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcapacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardEvolutionRecieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardEvolutionRecieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardEvolutionRecieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardEvolutionRecieve::MergeFrom(const PBCardEvolutionRecieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_evolutionresult()) {
      set_evolutionresult(from.evolutionresult());
    }
    if (from.has_targetcard()) {
      mutable_targetcard()->::PBCard::MergeFrom(from.targetcard());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_gems()) {
      mutable_gems()->::PBAllGem::MergeFrom(from.gems());
    }
    if (from.has_allgoldnumber()) {
      set_allgoldnumber(from.allgoldnumber());
    }
    if (from.has_fightcapacity()) {
      set_fightcapacity(from.fightcapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardEvolutionRecieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardEvolutionRecieve::CopyFrom(const PBCardEvolutionRecieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardEvolutionRecieve::IsInitialized() const {
  
  return true;
}

void PBCardEvolutionRecieve::Swap(PBCardEvolutionRecieve* other) {
  if (other != this) {
    std::swap(evolutionresult_, other->evolutionresult_);
    std::swap(targetcard_, other->targetcard_);
    std::swap(cards_, other->cards_);
    std::swap(gems_, other->gems_);
    std::swap(allgoldnumber_, other->allgoldnumber_);
    std::swap(fightcapacity_, other->fightcapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardEvolutionRecieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardEvolutionRecieve_descriptor_;
  metadata.reflection = PBCardEvolutionRecieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSkillLevelUpSend::kUpCardItemIDFieldNumber;
#endif  // !_MSC_VER

PBSkillLevelUpSend::PBSkillLevelUpSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillLevelUpSend::InitAsDefaultInstance() {
}

PBSkillLevelUpSend::PBSkillLevelUpSend(const PBSkillLevelUpSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillLevelUpSend::SharedCtor() {
  _cached_size_ = 0;
  upcarditemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillLevelUpSend::~PBSkillLevelUpSend() {
  SharedDtor();
}

void PBSkillLevelUpSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSkillLevelUpSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSkillLevelUpSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillLevelUpSend_descriptor_;
}

const PBSkillLevelUpSend& PBSkillLevelUpSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSkillLevelUpSend* PBSkillLevelUpSend::default_instance_ = NULL;

PBSkillLevelUpSend* PBSkillLevelUpSend::New() const {
  return new PBSkillLevelUpSend;
}

void PBSkillLevelUpSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upcarditemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillLevelUpSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 upCardItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upcarditemid_)));
          set_has_upcarditemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillLevelUpSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 upCardItemID = 1;
  if (has_upcarditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upcarditemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillLevelUpSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 upCardItemID = 1;
  if (has_upcarditemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upcarditemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillLevelUpSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 upCardItemID = 1;
    if (has_upcarditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upcarditemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSkillLevelUpSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillLevelUpSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillLevelUpSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillLevelUpSend::MergeFrom(const PBSkillLevelUpSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upcarditemid()) {
      set_upcarditemid(from.upcarditemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillLevelUpSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillLevelUpSend::CopyFrom(const PBSkillLevelUpSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSkillLevelUpSend::IsInitialized() const {
  
  return true;
}

void PBSkillLevelUpSend::Swap(PBSkillLevelUpSend* other) {
  if (other != this) {
    std::swap(upcarditemid_, other->upcarditemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSkillLevelUpSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSkillLevelUpSend_descriptor_;
  metadata.reflection = PBSkillLevelUpSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSkillLevelUpReceive::kSkillUpResultFieldNumber;
const int PBSkillLevelUpReceive::kTargetCardFieldNumber;
const int PBSkillLevelUpReceive::kCardsFieldNumber;
const int PBSkillLevelUpReceive::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

PBSkillLevelUpReceive::PBSkillLevelUpReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillLevelUpReceive::InitAsDefaultInstance() {
  targetcard_ = const_cast< ::PBCard*>(&::PBCard::default_instance());
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
}

PBSkillLevelUpReceive::PBSkillLevelUpReceive(const PBSkillLevelUpReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillLevelUpReceive::SharedCtor() {
  _cached_size_ = 0;
  skillupresult_ = 0;
  targetcard_ = NULL;
  cards_ = NULL;
  fightcapacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillLevelUpReceive::~PBSkillLevelUpReceive() {
  SharedDtor();
}

void PBSkillLevelUpReceive::SharedDtor() {
  if (this != default_instance_) {
    delete targetcard_;
    delete cards_;
  }
}

void PBSkillLevelUpReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSkillLevelUpReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillLevelUpReceive_descriptor_;
}

const PBSkillLevelUpReceive& PBSkillLevelUpReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSkillLevelUpReceive* PBSkillLevelUpReceive::default_instance_ = NULL;

PBSkillLevelUpReceive* PBSkillLevelUpReceive::New() const {
  return new PBSkillLevelUpReceive;
}

void PBSkillLevelUpReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillupresult_ = 0;
    if (has_targetcard()) {
      if (targetcard_ != NULL) targetcard_->::PBCard::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    fightcapacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillLevelUpReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillUpResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillupresult_)));
          set_has_skillupresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetCard;
        break;
      }
      
      // optional .PBCard targetCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fightCapacity;
        break;
      }
      
      // optional int32 fightCapacity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcapacity_)));
          set_has_fightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillLevelUpReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skillUpResult = 1;
  if (has_skillupresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillupresult(), output);
  }
  
  // optional .PBCard targetCard = 2;
  if (has_targetcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetcard(), output);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(), output);
  }
  
  // optional int32 fightCapacity = 4;
  if (has_fightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fightcapacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillLevelUpReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skillUpResult = 1;
  if (has_skillupresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillupresult(), target);
  }
  
  // optional .PBCard targetCard = 2;
  if (has_targetcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetcard(), target);
  }
  
  // optional .PBAllCard cards = 3;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(), target);
  }
  
  // optional int32 fightCapacity = 4;
  if (has_fightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fightcapacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillLevelUpReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillUpResult = 1;
    if (has_skillupresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillupresult());
    }
    
    // optional .PBCard targetCard = 2;
    if (has_targetcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetcard());
    }
    
    // optional .PBAllCard cards = 3;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional int32 fightCapacity = 4;
    if (has_fightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcapacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSkillLevelUpReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillLevelUpReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillLevelUpReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillLevelUpReceive::MergeFrom(const PBSkillLevelUpReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillupresult()) {
      set_skillupresult(from.skillupresult());
    }
    if (from.has_targetcard()) {
      mutable_targetcard()->::PBCard::MergeFrom(from.targetcard());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_fightcapacity()) {
      set_fightcapacity(from.fightcapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillLevelUpReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillLevelUpReceive::CopyFrom(const PBSkillLevelUpReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSkillLevelUpReceive::IsInitialized() const {
  
  return true;
}

void PBSkillLevelUpReceive::Swap(PBSkillLevelUpReceive* other) {
  if (other != this) {
    std::swap(skillupresult_, other->skillupresult_);
    std::swap(targetcard_, other->targetcard_);
    std::swap(cards_, other->cards_);
    std::swap(fightcapacity_, other->fightcapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSkillLevelUpReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSkillLevelUpReceive_descriptor_;
  metadata.reflection = PBSkillLevelUpReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardFormSend::kCaptainCardIDFieldNumber;
const int PBCardFormSend::kCardOneIDFieldNumber;
const int PBCardFormSend::kCardTwoIDFieldNumber;
const int PBCardFormSend::kCardThreeIDFieldNumber;
const int PBCardFormSend::kCardFourIDFieldNumber;
#endif  // !_MSC_VER

PBCardFormSend::PBCardFormSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardFormSend::InitAsDefaultInstance() {
}

PBCardFormSend::PBCardFormSend(const PBCardFormSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardFormSend::SharedCtor() {
  _cached_size_ = 0;
  captaincardid_ = 0;
  cardoneid_ = 0;
  cardtwoid_ = 0;
  cardthreeid_ = 0;
  cardfourid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardFormSend::~PBCardFormSend() {
  SharedDtor();
}

void PBCardFormSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBCardFormSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardFormSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardFormSend_descriptor_;
}

const PBCardFormSend& PBCardFormSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardFormSend* PBCardFormSend::default_instance_ = NULL;

PBCardFormSend* PBCardFormSend::New() const {
  return new PBCardFormSend;
}

void PBCardFormSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    captaincardid_ = 0;
    cardoneid_ = 0;
    cardtwoid_ = 0;
    cardthreeid_ = 0;
    cardfourid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardFormSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 captainCardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &captaincardid_)));
          set_has_captaincardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardOneID;
        break;
      }
      
      // optional int32 cardOneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardOneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardoneid_)));
          set_has_cardoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cardTwoID;
        break;
      }
      
      // optional int32 cardTwoID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardTwoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtwoid_)));
          set_has_cardtwoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardThreeID;
        break;
      }
      
      // optional int32 cardThreeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardThreeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardthreeid_)));
          set_has_cardthreeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cardFourID;
        break;
      }
      
      // optional int32 cardFourID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardFourID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardfourid_)));
          set_has_cardfourid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardFormSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 captainCardID = 1;
  if (has_captaincardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->captaincardid(), output);
  }
  
  // optional int32 cardOneID = 2;
  if (has_cardoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardoneid(), output);
  }
  
  // optional int32 cardTwoID = 3;
  if (has_cardtwoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardtwoid(), output);
  }
  
  // optional int32 cardThreeID = 4;
  if (has_cardthreeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardthreeid(), output);
  }
  
  // optional int32 cardFourID = 5;
  if (has_cardfourid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardfourid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardFormSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 captainCardID = 1;
  if (has_captaincardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->captaincardid(), target);
  }
  
  // optional int32 cardOneID = 2;
  if (has_cardoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardoneid(), target);
  }
  
  // optional int32 cardTwoID = 3;
  if (has_cardtwoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardtwoid(), target);
  }
  
  // optional int32 cardThreeID = 4;
  if (has_cardthreeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardthreeid(), target);
  }
  
  // optional int32 cardFourID = 5;
  if (has_cardfourid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardfourid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardFormSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 captainCardID = 1;
    if (has_captaincardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->captaincardid());
    }
    
    // optional int32 cardOneID = 2;
    if (has_cardoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardoneid());
    }
    
    // optional int32 cardTwoID = 3;
    if (has_cardtwoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtwoid());
    }
    
    // optional int32 cardThreeID = 4;
    if (has_cardthreeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardthreeid());
    }
    
    // optional int32 cardFourID = 5;
    if (has_cardfourid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardfourid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardFormSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardFormSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardFormSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardFormSend::MergeFrom(const PBCardFormSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_captaincardid()) {
      set_captaincardid(from.captaincardid());
    }
    if (from.has_cardoneid()) {
      set_cardoneid(from.cardoneid());
    }
    if (from.has_cardtwoid()) {
      set_cardtwoid(from.cardtwoid());
    }
    if (from.has_cardthreeid()) {
      set_cardthreeid(from.cardthreeid());
    }
    if (from.has_cardfourid()) {
      set_cardfourid(from.cardfourid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardFormSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardFormSend::CopyFrom(const PBCardFormSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardFormSend::IsInitialized() const {
  
  return true;
}

void PBCardFormSend::Swap(PBCardFormSend* other) {
  if (other != this) {
    std::swap(captaincardid_, other->captaincardid_);
    std::swap(cardoneid_, other->cardoneid_);
    std::swap(cardtwoid_, other->cardtwoid_);
    std::swap(cardthreeid_, other->cardthreeid_);
    std::swap(cardfourid_, other->cardfourid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardFormSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardFormSend_descriptor_;
  metadata.reflection = PBCardFormSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardFormReceive::kFormResultFieldNumber;
const int PBCardFormReceive::kCardsFieldNumber;
const int PBCardFormReceive::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

PBCardFormReceive::PBCardFormReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardFormReceive::InitAsDefaultInstance() {
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
}

PBCardFormReceive::PBCardFormReceive(const PBCardFormReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardFormReceive::SharedCtor() {
  _cached_size_ = 0;
  formresult_ = 0;
  cards_ = NULL;
  fightcapacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardFormReceive::~PBCardFormReceive() {
  SharedDtor();
}

void PBCardFormReceive::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
  }
}

void PBCardFormReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardFormReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardFormReceive_descriptor_;
}

const PBCardFormReceive& PBCardFormReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardFormReceive* PBCardFormReceive::default_instance_ = NULL;

PBCardFormReceive* PBCardFormReceive::New() const {
  return new PBCardFormReceive;
}

void PBCardFormReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    formresult_ = 0;
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    fightcapacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardFormReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 formResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formresult_)));
          set_has_formresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightCapacity;
        break;
      }
      
      // optional int32 fightCapacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcapacity_)));
          set_has_fightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardFormReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 formResult = 1;
  if (has_formresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->formresult(), output);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(), output);
  }
  
  // optional int32 fightCapacity = 3;
  if (has_fightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightcapacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardFormReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 formResult = 1;
  if (has_formresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->formresult(), target);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(), target);
  }
  
  // optional int32 fightCapacity = 3;
  if (has_fightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightcapacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardFormReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 formResult = 1;
    if (has_formresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formresult());
    }
    
    // optional .PBAllCard cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional int32 fightCapacity = 3;
    if (has_fightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcapacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardFormReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardFormReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardFormReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardFormReceive::MergeFrom(const PBCardFormReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formresult()) {
      set_formresult(from.formresult());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_fightcapacity()) {
      set_fightcapacity(from.fightcapacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardFormReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardFormReceive::CopyFrom(const PBCardFormReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardFormReceive::IsInitialized() const {
  
  return true;
}

void PBCardFormReceive::Swap(PBCardFormReceive* other) {
  if (other != this) {
    std::swap(formresult_, other->formresult_);
    std::swap(cards_, other->cards_);
    std::swap(fightcapacity_, other->fightcapacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardFormReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardFormReceive_descriptor_;
  metadata.reflection = PBCardFormReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleSend::kBattleIDFieldNumber;
const int PBBattleSend::kIsWipeOutFieldNumber;
#endif  // !_MSC_VER

PBBattleSend::PBBattleSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleSend::InitAsDefaultInstance() {
}

PBBattleSend::PBBattleSend(const PBBattleSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleSend::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iswipeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleSend::~PBBattleSend() {
  SharedDtor();
}

void PBBattleSend::SharedDtor() {
  if (battleid_ != &::google::protobuf::internal::kEmptyString) {
    delete battleid_;
  }
  if (this != default_instance_) {
  }
}

void PBBattleSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleSend_descriptor_;
}

const PBBattleSend& PBBattleSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleSend* PBBattleSend::default_instance_ = NULL;

PBBattleSend* PBBattleSend::New() const {
  return new PBBattleSend;
}

void PBBattleSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battleid()) {
      if (battleid_ != &::google::protobuf::internal::kEmptyString) {
        battleid_->clear();
      }
    }
    iswipeout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string battleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battleid().data(), this->battleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isWipeOut;
        break;
      }
      
      // optional int32 isWipeOut = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isWipeOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iswipeout_)));
          set_has_iswipeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string battleID = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->battleid(), output);
  }
  
  // optional int32 isWipeOut = 2;
  if (has_iswipeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iswipeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string battleID = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->battleid(), target);
  }
  
  // optional int32 isWipeOut = 2;
  if (has_iswipeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iswipeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string battleID = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleid());
    }
    
    // optional int32 isWipeOut = 2;
    if (has_iswipeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iswipeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleSend::MergeFrom(const PBBattleSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_iswipeout()) {
      set_iswipeout(from.iswipeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleSend::CopyFrom(const PBBattleSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleSend::IsInitialized() const {
  
  return true;
}

void PBBattleSend::Swap(PBBattleSend* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(iswipeout_, other->iswipeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleSend_descriptor_;
  metadata.reflection = PBBattleSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleAward::kAwardIDFieldNumber;
const int PBBattleAward::kAwardTypeFieldNumber;
const int PBBattleAward::kAwardNumberFieldNumber;
#endif  // !_MSC_VER

PBBattleAward::PBBattleAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleAward::InitAsDefaultInstance() {
}

PBBattleAward::PBBattleAward(const PBBattleAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleAward::SharedCtor() {
  _cached_size_ = 0;
  awardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardtype_ = 0;
  awardnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleAward::~PBBattleAward() {
  SharedDtor();
}

void PBBattleAward::SharedDtor() {
  if (awardid_ != &::google::protobuf::internal::kEmptyString) {
    delete awardid_;
  }
  if (this != default_instance_) {
  }
}

void PBBattleAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleAward_descriptor_;
}

const PBBattleAward& PBBattleAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleAward* PBBattleAward::default_instance_ = NULL;

PBBattleAward* PBBattleAward::New() const {
  return new PBBattleAward;
}

void PBBattleAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_awardid()) {
      if (awardid_ != &::google::protobuf::internal::kEmptyString) {
        awardid_->clear();
      }
    }
    awardtype_ = 0;
    awardnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string awardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awardid().data(), this->awardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awardType;
        break;
      }
      
      // optional int32 awardType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardNumber;
        break;
      }
      
      // optional int32 awardNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardnumber_)));
          set_has_awardnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string awardID = 1;
  if (has_awardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardid().data(), this->awardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->awardid(), output);
  }
  
  // optional int32 awardType = 2;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->awardtype(), output);
  }
  
  // optional int32 awardNumber = 3;
  if (has_awardnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string awardID = 1;
  if (has_awardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardid().data(), this->awardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->awardid(), target);
  }
  
  // optional int32 awardType = 2;
  if (has_awardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->awardtype(), target);
  }
  
  // optional int32 awardNumber = 3;
  if (has_awardnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string awardID = 1;
    if (has_awardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardid());
    }
    
    // optional int32 awardType = 2;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardtype());
    }
    
    // optional int32 awardNumber = 3;
    if (has_awardnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardnumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleAward::MergeFrom(const PBBattleAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardid()) {
      set_awardid(from.awardid());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_awardnumber()) {
      set_awardnumber(from.awardnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleAward::CopyFrom(const PBBattleAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleAward::IsInitialized() const {
  
  return true;
}

void PBBattleAward::Swap(PBBattleAward* other) {
  if (other != this) {
    std::swap(awardid_, other->awardid_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(awardnumber_, other->awardnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleAward_descriptor_;
  metadata.reflection = PBBattleAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleReceive::kAllBattleAwardsFieldNumber;
const int PBBattleReceive::kUserFieldNumber;
#endif  // !_MSC_VER

PBBattleReceive::PBBattleReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
}

PBBattleReceive::PBBattleReceive(const PBBattleReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleReceive::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleReceive::~PBBattleReceive() {
  SharedDtor();
}

void PBBattleReceive::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void PBBattleReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleReceive_descriptor_;
}

const PBBattleReceive& PBBattleReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleReceive* PBBattleReceive::default_instance_ = NULL;

PBBattleReceive* PBBattleReceive::New() const {
  return new PBBattleReceive;
}

void PBBattleReceive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
  }
  allbattleawards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBBattleAward allBattleAwards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allBattleAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allbattleawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allBattleAwards;
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBBattleAward allBattleAwards = 1;
  for (int i = 0; i < this->allbattleawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allbattleawards(i), output);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBBattleAward allBattleAwards = 1;
  for (int i = 0; i < this->allbattleawards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allbattleawards(i), target);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
  }
  // repeated .PBBattleAward allBattleAwards = 1;
  total_size += 1 * this->allbattleawards_size();
  for (int i = 0; i < this->allbattleawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allbattleawards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleReceive::MergeFrom(const PBBattleReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  allbattleawards_.MergeFrom(from.allbattleawards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleReceive::CopyFrom(const PBBattleReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleReceive::IsInitialized() const {
  
  return true;
}

void PBBattleReceive::Swap(PBBattleReceive* other) {
  if (other != this) {
    allbattleawards_.Swap(&other->allbattleawards_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleReceive_descriptor_;
  metadata.reflection = PBBattleReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSkillExpAdd::kCardItemIdFieldNumber;
const int PBSkillExpAdd::kSkillExpFieldNumber;
#endif  // !_MSC_VER

PBSkillExpAdd::PBSkillExpAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSkillExpAdd::InitAsDefaultInstance() {
}

PBSkillExpAdd::PBSkillExpAdd(const PBSkillExpAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSkillExpAdd::SharedCtor() {
  _cached_size_ = 0;
  carditemid_ = 0;
  skillexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSkillExpAdd::~PBSkillExpAdd() {
  SharedDtor();
}

void PBSkillExpAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSkillExpAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSkillExpAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSkillExpAdd_descriptor_;
}

const PBSkillExpAdd& PBSkillExpAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSkillExpAdd* PBSkillExpAdd::default_instance_ = NULL;

PBSkillExpAdd* PBSkillExpAdd::New() const {
  return new PBSkillExpAdd;
}

void PBSkillExpAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    carditemid_ = 0;
    skillexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSkillExpAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cardItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carditemid_)));
          set_has_carditemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillExp;
        break;
      }
      
      // optional int32 skillExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillexp_)));
          set_has_skillexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSkillExpAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cardItemId = 1;
  if (has_carditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->carditemid(), output);
  }
  
  // optional int32 skillExp = 2;
  if (has_skillexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSkillExpAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cardItemId = 1;
  if (has_carditemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->carditemid(), target);
  }
  
  // optional int32 skillExp = 2;
  if (has_skillexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSkillExpAdd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cardItemId = 1;
    if (has_carditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carditemid());
    }
    
    // optional int32 skillExp = 2;
    if (has_skillexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillexp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSkillExpAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSkillExpAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSkillExpAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSkillExpAdd::MergeFrom(const PBSkillExpAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carditemid()) {
      set_carditemid(from.carditemid());
    }
    if (from.has_skillexp()) {
      set_skillexp(from.skillexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSkillExpAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSkillExpAdd::CopyFrom(const PBSkillExpAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSkillExpAdd::IsInitialized() const {
  
  return true;
}

void PBSkillExpAdd::Swap(PBSkillExpAdd* other) {
  if (other != this) {
    std::swap(carditemid_, other->carditemid_);
    std::swap(skillexp_, other->skillexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSkillExpAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSkillExpAdd_descriptor_;
  metadata.reflection = PBSkillExpAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCardDBInfo::kCardIDFieldNumber;
const int PBCardDBInfo::kCardSkillAFieldNumber;
const int PBCardDBInfo::kCardSkillPFieldNumber;
const int PBCardDBInfo::kVTLStarFieldNumber;
const int PBCardDBInfo::kSTRStarFieldNumber;
const int PBCardDBInfo::kTGHStarFieldNumber;
const int PBCardDBInfo::kQUIStarFieldNumber;
const int PBCardDBInfo::kMGCStarFieldNumber;
#endif  // !_MSC_VER

PBCardDBInfo::PBCardDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCardDBInfo::InitAsDefaultInstance() {
}

PBCardDBInfo::PBCardDBInfo(const PBCardDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCardDBInfo::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardskilla_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardskillp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vtlstar_ = 0;
  strstar_ = 0;
  tghstar_ = 0;
  quistar_ = 0;
  mgcstar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCardDBInfo::~PBCardDBInfo() {
  SharedDtor();
}

void PBCardDBInfo::SharedDtor() {
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (cardskilla_ != &::google::protobuf::internal::kEmptyString) {
    delete cardskilla_;
  }
  if (cardskillp_ != &::google::protobuf::internal::kEmptyString) {
    delete cardskillp_;
  }
  if (this != default_instance_) {
  }
}

void PBCardDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCardDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCardDBInfo_descriptor_;
}

const PBCardDBInfo& PBCardDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCardDBInfo* PBCardDBInfo::default_instance_ = NULL;

PBCardDBInfo* PBCardDBInfo::New() const {
  return new PBCardDBInfo;
}

void PBCardDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cardid()) {
      if (cardid_ != &::google::protobuf::internal::kEmptyString) {
        cardid_->clear();
      }
    }
    if (has_cardskilla()) {
      if (cardskilla_ != &::google::protobuf::internal::kEmptyString) {
        cardskilla_->clear();
      }
    }
    if (has_cardskillp()) {
      if (cardskillp_ != &::google::protobuf::internal::kEmptyString) {
        cardskillp_->clear();
      }
    }
    vtlstar_ = 0;
    strstar_ = 0;
    tghstar_ = 0;
    quistar_ = 0;
    mgcstar_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCardDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardid().data(), this->cardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cardSkillA;
        break;
      }
      
      // optional string cardSkillA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardSkillA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardskilla()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardskilla().data(), this->cardskilla().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardSkillP;
        break;
      }
      
      // optional string cardSkillP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardSkillP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardskillp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardskillp().data(), this->cardskillp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VTLStar;
        break;
      }
      
      // optional int32 VTLStar = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VTLStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vtlstar_)));
          set_has_vtlstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_STRStar;
        break;
      }
      
      // optional int32 STRStar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_STRStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strstar_)));
          set_has_strstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TGHStar;
        break;
      }
      
      // optional int32 TGHStar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TGHStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tghstar_)));
          set_has_tghstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_QUIStar;
        break;
      }
      
      // optional int32 QUIStar = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QUIStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quistar_)));
          set_has_quistar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MGCStar;
        break;
      }
      
      // optional int32 MGCStar = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MGCStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mgcstar_)));
          set_has_mgcstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCardDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cardID = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cardid(), output);
  }
  
  // optional string cardSkillA = 2;
  if (has_cardskilla()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardskilla().data(), this->cardskilla().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cardskilla(), output);
  }
  
  // optional string cardSkillP = 3;
  if (has_cardskillp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardskillp().data(), this->cardskillp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cardskillp(), output);
  }
  
  // optional int32 VTLStar = 4;
  if (has_vtlstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vtlstar(), output);
  }
  
  // optional int32 STRStar = 5;
  if (has_strstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strstar(), output);
  }
  
  // optional int32 TGHStar = 6;
  if (has_tghstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tghstar(), output);
  }
  
  // optional int32 QUIStar = 7;
  if (has_quistar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quistar(), output);
  }
  
  // optional int32 MGCStar = 8;
  if (has_mgcstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mgcstar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCardDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cardID = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cardid(), target);
  }
  
  // optional string cardSkillA = 2;
  if (has_cardskilla()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardskilla().data(), this->cardskilla().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cardskilla(), target);
  }
  
  // optional string cardSkillP = 3;
  if (has_cardskillp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardskillp().data(), this->cardskillp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cardskillp(), target);
  }
  
  // optional int32 VTLStar = 4;
  if (has_vtlstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vtlstar(), target);
  }
  
  // optional int32 STRStar = 5;
  if (has_strstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strstar(), target);
  }
  
  // optional int32 TGHStar = 6;
  if (has_tghstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tghstar(), target);
  }
  
  // optional int32 QUIStar = 7;
  if (has_quistar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quistar(), target);
  }
  
  // optional int32 MGCStar = 8;
  if (has_mgcstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mgcstar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCardDBInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cardID = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }
    
    // optional string cardSkillA = 2;
    if (has_cardskilla()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardskilla());
    }
    
    // optional string cardSkillP = 3;
    if (has_cardskillp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardskillp());
    }
    
    // optional int32 VTLStar = 4;
    if (has_vtlstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vtlstar());
    }
    
    // optional int32 STRStar = 5;
    if (has_strstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strstar());
    }
    
    // optional int32 TGHStar = 6;
    if (has_tghstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tghstar());
    }
    
    // optional int32 QUIStar = 7;
    if (has_quistar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quistar());
    }
    
    // optional int32 MGCStar = 8;
    if (has_mgcstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mgcstar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCardDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCardDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCardDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCardDBInfo::MergeFrom(const PBCardDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_cardskilla()) {
      set_cardskilla(from.cardskilla());
    }
    if (from.has_cardskillp()) {
      set_cardskillp(from.cardskillp());
    }
    if (from.has_vtlstar()) {
      set_vtlstar(from.vtlstar());
    }
    if (from.has_strstar()) {
      set_strstar(from.strstar());
    }
    if (from.has_tghstar()) {
      set_tghstar(from.tghstar());
    }
    if (from.has_quistar()) {
      set_quistar(from.quistar());
    }
    if (from.has_mgcstar()) {
      set_mgcstar(from.mgcstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCardDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCardDBInfo::CopyFrom(const PBCardDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCardDBInfo::IsInitialized() const {
  
  return true;
}

void PBCardDBInfo::Swap(PBCardDBInfo* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    std::swap(cardskilla_, other->cardskilla_);
    std::swap(cardskillp_, other->cardskillp_);
    std::swap(vtlstar_, other->vtlstar_);
    std::swap(strstar_, other->strstar_);
    std::swap(tghstar_, other->tghstar_);
    std::swap(quistar_, other->quistar_);
    std::swap(mgcstar_, other->mgcstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCardDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCardDBInfo_descriptor_;
  metadata.reflection = PBCardDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleResultSend::kBattleResultFieldNumber;
const int PBBattleResultSend::kSkillExpAddFieldNumber;
const int PBBattleResultSend::kIsfriendFieldNumber;
const int PBBattleResultSend::kBattleProgressFieldNumber;
const int PBBattleResultSend::kFriendIdFieldNumber;
const int PBBattleResultSend::kCardInfoFieldNumber;
#endif  // !_MSC_VER

PBBattleResultSend::PBBattleResultSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleResultSend::InitAsDefaultInstance() {
}

PBBattleResultSend::PBBattleResultSend(const PBBattleResultSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleResultSend::SharedCtor() {
  _cached_size_ = 0;
  battleresult_ = 0;
  isfriend_ = false;
  battleprogress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleResultSend::~PBBattleResultSend() {
  SharedDtor();
}

void PBBattleResultSend::SharedDtor() {
  if (battleprogress_ != &::google::protobuf::internal::kEmptyString) {
    delete battleprogress_;
  }
  if (this != default_instance_) {
  }
}

void PBBattleResultSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleResultSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleResultSend_descriptor_;
}

const PBBattleResultSend& PBBattleResultSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleResultSend* PBBattleResultSend::default_instance_ = NULL;

PBBattleResultSend* PBBattleResultSend::New() const {
  return new PBBattleResultSend;
}

void PBBattleResultSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleresult_ = 0;
    isfriend_ = false;
    if (has_battleprogress()) {
      if (battleprogress_ != &::google::protobuf::internal::kEmptyString) {
        battleprogress_->clear();
      }
    }
    friendid_ = 0;
  }
  skillexpadd_.Clear();
  cardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleResultSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 battleResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleresult_)));
          set_has_battleresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillExpAdd;
        break;
      }
      
      // repeated .PBSkillExpAdd skillExpAdd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillExpAdd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillexpadd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillExpAdd;
        if (input->ExpectTag(24)) goto parse_isfriend;
        break;
      }
      
      // optional bool isfriend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_battleProgress;
        break;
      }
      
      // optional string battleProgress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleProgress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleprogress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battleprogress().data(), this->battleprogress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_friendId;
        break;
      }
      
      // optional int32 friendId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cardInfo;
        break;
      }
      
      // repeated .PBCardDBInfo cardInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleResultSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 battleResult = 1;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battleresult(), output);
  }
  
  // repeated .PBSkillExpAdd skillExpAdd = 2;
  for (int i = 0; i < this->skillexpadd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillexpadd(i), output);
  }
  
  // optional bool isfriend = 3;
  if (has_isfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfriend(), output);
  }
  
  // optional string battleProgress = 4;
  if (has_battleprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleprogress().data(), this->battleprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->battleprogress(), output);
  }
  
  // optional int32 friendId = 5;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->friendid(), output);
  }
  
  // repeated .PBCardDBInfo cardInfo = 6;
  for (int i = 0; i < this->cardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cardinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleResultSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 battleResult = 1;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battleresult(), target);
  }
  
  // repeated .PBSkillExpAdd skillExpAdd = 2;
  for (int i = 0; i < this->skillexpadd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillexpadd(i), target);
  }
  
  // optional bool isfriend = 3;
  if (has_isfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfriend(), target);
  }
  
  // optional string battleProgress = 4;
  if (has_battleprogress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleprogress().data(), this->battleprogress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->battleprogress(), target);
  }
  
  // optional int32 friendId = 5;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->friendid(), target);
  }
  
  // repeated .PBCardDBInfo cardInfo = 6;
  for (int i = 0; i < this->cardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cardinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleResultSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 battleResult = 1;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleresult());
    }
    
    // optional bool isfriend = 3;
    if (has_isfriend()) {
      total_size += 1 + 1;
    }
    
    // optional string battleProgress = 4;
    if (has_battleprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleprogress());
    }
    
    // optional int32 friendId = 5;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }
    
  }
  // repeated .PBSkillExpAdd skillExpAdd = 2;
  total_size += 1 * this->skillexpadd_size();
  for (int i = 0; i < this->skillexpadd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillexpadd(i));
  }
  
  // repeated .PBCardDBInfo cardInfo = 6;
  total_size += 1 * this->cardinfo_size();
  for (int i = 0; i < this->cardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleResultSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleResultSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleResultSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleResultSend::MergeFrom(const PBBattleResultSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillexpadd_.MergeFrom(from.skillexpadd_);
  cardinfo_.MergeFrom(from.cardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleresult()) {
      set_battleresult(from.battleresult());
    }
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
    if (from.has_battleprogress()) {
      set_battleprogress(from.battleprogress());
    }
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleResultSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleResultSend::CopyFrom(const PBBattleResultSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleResultSend::IsInitialized() const {
  
  return true;
}

void PBBattleResultSend::Swap(PBBattleResultSend* other) {
  if (other != this) {
    std::swap(battleresult_, other->battleresult_);
    skillexpadd_.Swap(&other->skillexpadd_);
    std::swap(isfriend_, other->isfriend_);
    std::swap(battleprogress_, other->battleprogress_);
    std::swap(friendid_, other->friendid_);
    cardinfo_.Swap(&other->cardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleResultSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleResultSend_descriptor_;
  metadata.reflection = PBBattleResultSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleResultReceive::kCardsFieldNumber;
const int PBBattleResultReceive::kUserFieldNumber;
const int PBBattleResultReceive::kGemsFieldNumber;
const int PBBattleResultReceive::kBattleFieldNumber;
const int PBBattleResultReceive::kHasFinishedTaskFieldNumber;
const int PBBattleResultReceive::kDBInfoResultFieldNumber;
#endif  // !_MSC_VER

PBBattleResultReceive::PBBattleResultReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleResultReceive::InitAsDefaultInstance() {
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
  gems_ = const_cast< ::PBAllGem*>(&::PBAllGem::default_instance());
  battle_ = const_cast< ::PBBattle*>(&::PBBattle::default_instance());
}

PBBattleResultReceive::PBBattleResultReceive(const PBBattleResultReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleResultReceive::SharedCtor() {
  _cached_size_ = 0;
  cards_ = NULL;
  user_ = NULL;
  gems_ = NULL;
  battle_ = NULL;
  hasfinishedtask_ = false;
  dbinforesult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleResultReceive::~PBBattleResultReceive() {
  SharedDtor();
}

void PBBattleResultReceive::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
    delete user_;
    delete gems_;
    delete battle_;
  }
}

void PBBattleResultReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleResultReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleResultReceive_descriptor_;
}

const PBBattleResultReceive& PBBattleResultReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBBattleResultReceive* PBBattleResultReceive::default_instance_ = NULL;

PBBattleResultReceive* PBBattleResultReceive::New() const {
  return new PBBattleResultReceive;
}

void PBBattleResultReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
    if (has_gems()) {
      if (gems_ != NULL) gems_->::PBAllGem::Clear();
    }
    if (has_battle()) {
      if (battle_ != NULL) battle_->::PBBattle::Clear();
    }
    hasfinishedtask_ = false;
    dbinforesult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleResultReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBAllCard cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gems;
        break;
      }
      
      // optional .PBAllGem gems = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_battle;
        break;
      }
      
      // optional .PBBattle battle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasFinishedTask;
        break;
      }
      
      // optional bool hasFinishedTask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasFinishedTask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasfinishedtask_)));
          set_has_hasfinishedtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DBInfoResult;
        break;
      }
      
      // optional int32 DBInfoResult = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DBInfoResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbinforesult_)));
          set_has_dbinforesult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleResultReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBAllCard cards = 1;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(), output);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  // optional .PBAllGem gems = 3;
  if (has_gems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gems(), output);
  }
  
  // optional .PBBattle battle = 4;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle(), output);
  }
  
  // optional bool hasFinishedTask = 5;
  if (has_hasfinishedtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hasfinishedtask(), output);
  }
  
  // optional int32 DBInfoResult = 6;
  if (has_dbinforesult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dbinforesult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleResultReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAllCard cards = 1;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cards(), target);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  // optional .PBAllGem gems = 3;
  if (has_gems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gems(), target);
  }
  
  // optional .PBBattle battle = 4;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battle(), target);
  }
  
  // optional bool hasFinishedTask = 5;
  if (has_hasfinishedtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hasfinishedtask(), target);
  }
  
  // optional int32 DBInfoResult = 6;
  if (has_dbinforesult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dbinforesult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleResultReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAllCard cards = 1;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional .PBAllGem gems = 3;
    if (has_gems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gems());
    }
    
    // optional .PBBattle battle = 4;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle());
    }
    
    // optional bool hasFinishedTask = 5;
    if (has_hasfinishedtask()) {
      total_size += 1 + 1;
    }
    
    // optional int32 DBInfoResult = 6;
    if (has_dbinforesult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbinforesult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleResultReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleResultReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleResultReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleResultReceive::MergeFrom(const PBBattleResultReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
    if (from.has_gems()) {
      mutable_gems()->::PBAllGem::MergeFrom(from.gems());
    }
    if (from.has_battle()) {
      mutable_battle()->::PBBattle::MergeFrom(from.battle());
    }
    if (from.has_hasfinishedtask()) {
      set_hasfinishedtask(from.hasfinishedtask());
    }
    if (from.has_dbinforesult()) {
      set_dbinforesult(from.dbinforesult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleResultReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleResultReceive::CopyFrom(const PBBattleResultReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleResultReceive::IsInitialized() const {
  
  return true;
}

void PBBattleResultReceive::Swap(PBBattleResultReceive* other) {
  if (other != this) {
    std::swap(cards_, other->cards_);
    std::swap(user_, other->user_);
    std::swap(gems_, other->gems_);
    std::swap(battle_, other->battle_);
    std::swap(hasfinishedtask_, other->hasfinishedtask_);
    std::swap(dbinforesult_, other->dbinforesult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleResultReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleResultReceive_descriptor_;
  metadata.reflection = PBBattleResultReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSoldCardSend::kCardItemIdFieldNumber;
#endif  // !_MSC_VER

PBSoldCardSend::PBSoldCardSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSoldCardSend::InitAsDefaultInstance() {
}

PBSoldCardSend::PBSoldCardSend(const PBSoldCardSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSoldCardSend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSoldCardSend::~PBSoldCardSend() {
  SharedDtor();
}

void PBSoldCardSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSoldCardSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSoldCardSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSoldCardSend_descriptor_;
}

const PBSoldCardSend& PBSoldCardSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSoldCardSend* PBSoldCardSend::default_instance_ = NULL;

PBSoldCardSend* PBSoldCardSend::New() const {
  return new PBSoldCardSend;
}

void PBSoldCardSend::Clear() {
  carditemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSoldCardSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cardItemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_carditemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carditemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cardItemId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSoldCardSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 cardItemId = 1;
  for (int i = 0; i < this->carditemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->carditemid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSoldCardSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 cardItemId = 1;
  for (int i = 0; i < this->carditemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->carditemid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSoldCardSend::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 cardItemId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->carditemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carditemid(i));
    }
    total_size += 1 * this->carditemid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSoldCardSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSoldCardSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSoldCardSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSoldCardSend::MergeFrom(const PBSoldCardSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  carditemid_.MergeFrom(from.carditemid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSoldCardSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSoldCardSend::CopyFrom(const PBSoldCardSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSoldCardSend::IsInitialized() const {
  
  return true;
}

void PBSoldCardSend::Swap(PBSoldCardSend* other) {
  if (other != this) {
    carditemid_.Swap(&other->carditemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSoldCardSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSoldCardSend_descriptor_;
  metadata.reflection = PBSoldCardSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSoldCardReceive::kSoldResultFieldNumber;
const int PBSoldCardReceive::kCardsFieldNumber;
const int PBSoldCardReceive::kGoldNumberFieldNumber;
#endif  // !_MSC_VER

PBSoldCardReceive::PBSoldCardReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSoldCardReceive::InitAsDefaultInstance() {
  cards_ = const_cast< ::PBAllCard*>(&::PBAllCard::default_instance());
}

PBSoldCardReceive::PBSoldCardReceive(const PBSoldCardReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSoldCardReceive::SharedCtor() {
  _cached_size_ = 0;
  soldresult_ = 0;
  cards_ = NULL;
  goldnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSoldCardReceive::~PBSoldCardReceive() {
  SharedDtor();
}

void PBSoldCardReceive::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
  }
}

void PBSoldCardReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSoldCardReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSoldCardReceive_descriptor_;
}

const PBSoldCardReceive& PBSoldCardReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSoldCardReceive* PBSoldCardReceive::default_instance_ = NULL;

PBSoldCardReceive* PBSoldCardReceive::New() const {
  return new PBSoldCardReceive;
}

void PBSoldCardReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    soldresult_ = 0;
    if (has_cards()) {
      if (cards_ != NULL) cards_->::PBAllCard::Clear();
    }
    goldnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSoldCardReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 soldResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldresult_)));
          set_has_soldresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }
      
      // optional .PBAllCard cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldNumber;
        break;
      }
      
      // optional int32 goldNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldnumber_)));
          set_has_goldnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSoldCardReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 soldResult = 1;
  if (has_soldresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soldresult(), output);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(), output);
  }
  
  // optional int32 goldNumber = 3;
  if (has_goldnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goldnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSoldCardReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 soldResult = 1;
  if (has_soldresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soldresult(), target);
  }
  
  // optional .PBAllCard cards = 2;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(), target);
  }
  
  // optional int32 goldNumber = 3;
  if (has_goldnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goldnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSoldCardReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 soldResult = 1;
    if (has_soldresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldresult());
    }
    
    // optional .PBAllCard cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional int32 goldNumber = 3;
    if (has_goldnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldnumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSoldCardReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSoldCardReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSoldCardReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSoldCardReceive::MergeFrom(const PBSoldCardReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soldresult()) {
      set_soldresult(from.soldresult());
    }
    if (from.has_cards()) {
      mutable_cards()->::PBAllCard::MergeFrom(from.cards());
    }
    if (from.has_goldnumber()) {
      set_goldnumber(from.goldnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSoldCardReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSoldCardReceive::CopyFrom(const PBSoldCardReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSoldCardReceive::IsInitialized() const {
  
  return true;
}

void PBSoldCardReceive::Swap(PBSoldCardReceive* other) {
  if (other != this) {
    std::swap(soldresult_, other->soldresult_);
    std::swap(cards_, other->cards_);
    std::swap(goldnumber_, other->goldnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSoldCardReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSoldCardReceive_descriptor_;
  metadata.reflection = PBSoldCardReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGetFriendValueReceive::kFriendsFieldNumber;
const int PBGetFriendValueReceive::kFriendValueFieldNumber;
#endif  // !_MSC_VER

PBGetFriendValueReceive::PBGetFriendValueReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGetFriendValueReceive::InitAsDefaultInstance() {
  friends_ = const_cast< ::PBAllFriend*>(&::PBAllFriend::default_instance());
}

PBGetFriendValueReceive::PBGetFriendValueReceive(const PBGetFriendValueReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGetFriendValueReceive::SharedCtor() {
  _cached_size_ = 0;
  friends_ = NULL;
  friendvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGetFriendValueReceive::~PBGetFriendValueReceive() {
  SharedDtor();
}

void PBGetFriendValueReceive::SharedDtor() {
  if (this != default_instance_) {
    delete friends_;
  }
}

void PBGetFriendValueReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGetFriendValueReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGetFriendValueReceive_descriptor_;
}

const PBGetFriendValueReceive& PBGetFriendValueReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBGetFriendValueReceive* PBGetFriendValueReceive::default_instance_ = NULL;

PBGetFriendValueReceive* PBGetFriendValueReceive::New() const {
  return new PBGetFriendValueReceive;
}

void PBGetFriendValueReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friends()) {
      if (friends_ != NULL) friends_->::PBAllFriend::Clear();
    }
    friendvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGetFriendValueReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBAllFriend friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friendValue;
        break;
      }
      
      // optional int32 friendValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendvalue_)));
          set_has_friendvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGetFriendValueReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBAllFriend friends = 1;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(), output);
  }
  
  // optional int32 friendValue = 2;
  if (has_friendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friendvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGetFriendValueReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBAllFriend friends = 1;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(), target);
  }
  
  // optional int32 friendValue = 2;
  if (has_friendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friendvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGetFriendValueReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBAllFriend friends = 1;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }
    
    // optional int32 friendValue = 2;
    if (has_friendvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGetFriendValueReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGetFriendValueReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGetFriendValueReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGetFriendValueReceive::MergeFrom(const PBGetFriendValueReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friends()) {
      mutable_friends()->::PBAllFriend::MergeFrom(from.friends());
    }
    if (from.has_friendvalue()) {
      set_friendvalue(from.friendvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGetFriendValueReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGetFriendValueReceive::CopyFrom(const PBGetFriendValueReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGetFriendValueReceive::IsInitialized() const {
  
  return true;
}

void PBGetFriendValueReceive::Swap(PBGetFriendValueReceive* other) {
  if (other != this) {
    std::swap(friends_, other->friends_);
    std::swap(friendvalue_, other->friendvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGetFriendValueReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGetFriendValueReceive_descriptor_;
  metadata.reflection = PBGetFriendValueReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBShopBuySend::kBuyTypeFieldNumber;
#endif  // !_MSC_VER

PBShopBuySend::PBShopBuySend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBShopBuySend::InitAsDefaultInstance() {
}

PBShopBuySend::PBShopBuySend(const PBShopBuySend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBShopBuySend::SharedCtor() {
  _cached_size_ = 0;
  buytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBShopBuySend::~PBShopBuySend() {
  SharedDtor();
}

void PBShopBuySend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBShopBuySend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBShopBuySend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBShopBuySend_descriptor_;
}

const PBShopBuySend& PBShopBuySend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBShopBuySend* PBShopBuySend::default_instance_ = NULL;

PBShopBuySend* PBShopBuySend::New() const {
  return new PBShopBuySend;
}

void PBShopBuySend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBShopBuySend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBShopBuySend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 buyType = 1;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buytype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBShopBuySend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buyType = 1;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buytype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBShopBuySend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buyType = 1;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBShopBuySend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBShopBuySend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBShopBuySend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBShopBuySend::MergeFrom(const PBShopBuySend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBShopBuySend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShopBuySend::CopyFrom(const PBShopBuySend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBShopBuySend::IsInitialized() const {
  
  return true;
}

void PBShopBuySend::Swap(PBShopBuySend* other) {
  if (other != this) {
    std::swap(buytype_, other->buytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBShopBuySend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBShopBuySend_descriptor_;
  metadata.reflection = PBShopBuySend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBShopBuySendReceive::kUserFieldNumber;
#endif  // !_MSC_VER

PBShopBuySendReceive::PBShopBuySendReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBShopBuySendReceive::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
}

PBShopBuySendReceive::PBShopBuySendReceive(const PBShopBuySendReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBShopBuySendReceive::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBShopBuySendReceive::~PBShopBuySendReceive() {
  SharedDtor();
}

void PBShopBuySendReceive::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void PBShopBuySendReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBShopBuySendReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBShopBuySendReceive_descriptor_;
}

const PBShopBuySendReceive& PBShopBuySendReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBShopBuySendReceive* PBShopBuySendReceive::default_instance_ = NULL;

PBShopBuySendReceive* PBShopBuySendReceive::New() const {
  return new PBShopBuySendReceive;
}

void PBShopBuySendReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBShopBuySendReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBUser user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBShopBuySendReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBUser user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBShopBuySendReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBUser user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBShopBuySendReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBUser user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBShopBuySendReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBShopBuySendReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBShopBuySendReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBShopBuySendReceive::MergeFrom(const PBShopBuySendReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBShopBuySendReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBShopBuySendReceive::CopyFrom(const PBShopBuySendReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBShopBuySendReceive::IsInitialized() const {
  
  return true;
}

void PBShopBuySendReceive::Swap(PBShopBuySendReceive* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBShopBuySendReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBShopBuySendReceive_descriptor_;
  metadata.reflection = PBShopBuySendReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSearchFriendSend::kSearchKeyFieldNumber;
#endif  // !_MSC_VER

PBSearchFriendSend::PBSearchFriendSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSearchFriendSend::InitAsDefaultInstance() {
}

PBSearchFriendSend::PBSearchFriendSend(const PBSearchFriendSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSearchFriendSend::SharedCtor() {
  _cached_size_ = 0;
  searchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSearchFriendSend::~PBSearchFriendSend() {
  SharedDtor();
}

void PBSearchFriendSend::SharedDtor() {
  if (searchkey_ != &::google::protobuf::internal::kEmptyString) {
    delete searchkey_;
  }
  if (this != default_instance_) {
  }
}

void PBSearchFriendSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSearchFriendSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSearchFriendSend_descriptor_;
}

const PBSearchFriendSend& PBSearchFriendSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSearchFriendSend* PBSearchFriendSend::default_instance_ = NULL;

PBSearchFriendSend* PBSearchFriendSend::New() const {
  return new PBSearchFriendSend;
}

void PBSearchFriendSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_searchkey()) {
      if (searchkey_ != &::google::protobuf::internal::kEmptyString) {
        searchkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSearchFriendSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string searchKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->searchkey().data(), this->searchkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSearchFriendSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string searchKey = 1;
  if (has_searchkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->searchkey().data(), this->searchkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->searchkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSearchFriendSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string searchKey = 1;
  if (has_searchkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->searchkey().data(), this->searchkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->searchkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSearchFriendSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string searchKey = 1;
    if (has_searchkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchkey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSearchFriendSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSearchFriendSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSearchFriendSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSearchFriendSend::MergeFrom(const PBSearchFriendSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_searchkey()) {
      set_searchkey(from.searchkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSearchFriendSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSearchFriendSend::CopyFrom(const PBSearchFriendSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSearchFriendSend::IsInitialized() const {
  
  return true;
}

void PBSearchFriendSend::Swap(PBSearchFriendSend* other) {
  if (other != this) {
    std::swap(searchkey_, other->searchkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSearchFriendSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSearchFriendSend_descriptor_;
  metadata.reflection = PBSearchFriendSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBSearchFriendReceive::kFriendsFieldNumber;
#endif  // !_MSC_VER

PBSearchFriendReceive::PBSearchFriendReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBSearchFriendReceive::InitAsDefaultInstance() {
}

PBSearchFriendReceive::PBSearchFriendReceive(const PBSearchFriendReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBSearchFriendReceive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBSearchFriendReceive::~PBSearchFriendReceive() {
  SharedDtor();
}

void PBSearchFriendReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBSearchFriendReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSearchFriendReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSearchFriendReceive_descriptor_;
}

const PBSearchFriendReceive& PBSearchFriendReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBSearchFriendReceive* PBSearchFriendReceive::default_instance_ = NULL;

PBSearchFriendReceive* PBSearchFriendReceive::New() const {
  return new PBSearchFriendReceive;
}

void PBSearchFriendReceive::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBSearchFriendReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFriend friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBSearchFriendReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFriend friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBSearchFriendReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFriend friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBSearchFriendReceive::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFriend friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSearchFriendReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBSearchFriendReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBSearchFriendReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBSearchFriendReceive::MergeFrom(const PBSearchFriendReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBSearchFriendReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSearchFriendReceive::CopyFrom(const PBSearchFriendReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBSearchFriendReceive::IsInitialized() const {
  
  return true;
}

void PBSearchFriendReceive::Swap(PBSearchFriendReceive* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBSearchFriendReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSearchFriendReceive_descriptor_;
  metadata.reflection = PBSearchFriendReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDownloadSend::kResourceVersionFieldNumber;
const int PBDownloadSend::kPointMarkFieldNumber;
#endif  // !_MSC_VER

PBDownloadSend::PBDownloadSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDownloadSend::InitAsDefaultInstance() {
}

PBDownloadSend::PBDownloadSend(const PBDownloadSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDownloadSend::SharedCtor() {
  _cached_size_ = 0;
  resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pointmark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDownloadSend::~PBDownloadSend() {
  SharedDtor();
}

void PBDownloadSend::SharedDtor() {
  if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
    delete resourceversion_;
  }
  if (this != default_instance_) {
  }
}

void PBDownloadSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDownloadSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDownloadSend_descriptor_;
}

const PBDownloadSend& PBDownloadSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBDownloadSend* PBDownloadSend::default_instance_ = NULL;

PBDownloadSend* PBDownloadSend::New() const {
  return new PBDownloadSend;
}

void PBDownloadSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_resourceversion()) {
      if (resourceversion_ != &::google::protobuf::internal::kEmptyString) {
        resourceversion_->clear();
      }
    }
    pointmark_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDownloadSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string resourceVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resourceversion().data(), this->resourceversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointMark;
        break;
      }
      
      // optional int32 pointMark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointmark_)));
          set_has_pointmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDownloadSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string resourceVersion = 1;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resourceversion(), output);
  }
  
  // optional int32 pointMark = 2;
  if (has_pointmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pointmark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDownloadSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string resourceVersion = 1;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resourceversion(), target);
  }
  
  // optional int32 pointMark = 2;
  if (has_pointmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pointmark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDownloadSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string resourceVersion = 1;
    if (has_resourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourceversion());
    }
    
    // optional int32 pointMark = 2;
    if (has_pointmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointmark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDownloadSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDownloadSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDownloadSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDownloadSend::MergeFrom(const PBDownloadSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourceversion()) {
      set_resourceversion(from.resourceversion());
    }
    if (from.has_pointmark()) {
      set_pointmark(from.pointmark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDownloadSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDownloadSend::CopyFrom(const PBDownloadSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDownloadSend::IsInitialized() const {
  
  return true;
}

void PBDownloadSend::Swap(PBDownloadSend* other) {
  if (other != this) {
    std::swap(resourceversion_, other->resourceversion_);
    std::swap(pointmark_, other->pointmark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDownloadSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDownloadSend_descriptor_;
  metadata.reflection = PBDownloadSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBInvitationCodeSend::kInvitationCodeFieldNumber;
#endif  // !_MSC_VER

PBInvitationCodeSend::PBInvitationCodeSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBInvitationCodeSend::InitAsDefaultInstance() {
}

PBInvitationCodeSend::PBInvitationCodeSend(const PBInvitationCodeSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBInvitationCodeSend::SharedCtor() {
  _cached_size_ = 0;
  invitationcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBInvitationCodeSend::~PBInvitationCodeSend() {
  SharedDtor();
}

void PBInvitationCodeSend::SharedDtor() {
  if (invitationcode_ != &::google::protobuf::internal::kEmptyString) {
    delete invitationcode_;
  }
  if (this != default_instance_) {
  }
}

void PBInvitationCodeSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBInvitationCodeSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBInvitationCodeSend_descriptor_;
}

const PBInvitationCodeSend& PBInvitationCodeSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBInvitationCodeSend* PBInvitationCodeSend::default_instance_ = NULL;

PBInvitationCodeSend* PBInvitationCodeSend::New() const {
  return new PBInvitationCodeSend;
}

void PBInvitationCodeSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_invitationcode()) {
      if (invitationcode_ != &::google::protobuf::internal::kEmptyString) {
        invitationcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBInvitationCodeSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string invitationCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitationcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitationcode().data(), this->invitationcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBInvitationCodeSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string invitationCode = 1;
  if (has_invitationcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitationcode().data(), this->invitationcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->invitationcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBInvitationCodeSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string invitationCode = 1;
  if (has_invitationcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitationcode().data(), this->invitationcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invitationcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBInvitationCodeSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string invitationCode = 1;
    if (has_invitationcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitationcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBInvitationCodeSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBInvitationCodeSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBInvitationCodeSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBInvitationCodeSend::MergeFrom(const PBInvitationCodeSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitationcode()) {
      set_invitationcode(from.invitationcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBInvitationCodeSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBInvitationCodeSend::CopyFrom(const PBInvitationCodeSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBInvitationCodeSend::IsInitialized() const {
  
  return true;
}

void PBInvitationCodeSend::Swap(PBInvitationCodeSend* other) {
  if (other != this) {
    std::swap(invitationcode_, other->invitationcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBInvitationCodeSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBInvitationCodeSend_descriptor_;
  metadata.reflection = PBInvitationCodeSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBInvitationCodeReceive::kResultFieldNumber;
#endif  // !_MSC_VER

PBInvitationCodeReceive::PBInvitationCodeReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBInvitationCodeReceive::InitAsDefaultInstance() {
}

PBInvitationCodeReceive::PBInvitationCodeReceive(const PBInvitationCodeReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBInvitationCodeReceive::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBInvitationCodeReceive::~PBInvitationCodeReceive() {
  SharedDtor();
}

void PBInvitationCodeReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBInvitationCodeReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBInvitationCodeReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBInvitationCodeReceive_descriptor_;
}

const PBInvitationCodeReceive& PBInvitationCodeReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBInvitationCodeReceive* PBInvitationCodeReceive::default_instance_ = NULL;

PBInvitationCodeReceive* PBInvitationCodeReceive::New() const {
  return new PBInvitationCodeReceive;
}

void PBInvitationCodeReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBInvitationCodeReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBInvitationCodeReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBInvitationCodeReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBInvitationCodeReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBInvitationCodeReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBInvitationCodeReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBInvitationCodeReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBInvitationCodeReceive::MergeFrom(const PBInvitationCodeReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBInvitationCodeReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBInvitationCodeReceive::CopyFrom(const PBInvitationCodeReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBInvitationCodeReceive::IsInitialized() const {
  
  return true;
}

void PBInvitationCodeReceive::Swap(PBInvitationCodeReceive* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBInvitationCodeReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBInvitationCodeReceive_descriptor_;
  metadata.reflection = PBInvitationCodeReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEnergyReceive::kEnergyFieldNumber;
const int PBEnergyReceive::kNextEnergyTimeFieldNumber;
#endif  // !_MSC_VER

PBEnergyReceive::PBEnergyReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEnergyReceive::InitAsDefaultInstance() {
}

PBEnergyReceive::PBEnergyReceive(const PBEnergyReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEnergyReceive::SharedCtor() {
  _cached_size_ = 0;
  energy_ = 0;
  nextenergytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEnergyReceive::~PBEnergyReceive() {
  SharedDtor();
}

void PBEnergyReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBEnergyReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEnergyReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEnergyReceive_descriptor_;
}

const PBEnergyReceive& PBEnergyReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBEnergyReceive* PBEnergyReceive::default_instance_ = NULL;

PBEnergyReceive* PBEnergyReceive::New() const {
  return new PBEnergyReceive;
}

void PBEnergyReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energy_ = 0;
    nextenergytime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEnergyReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 energy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextEnergyTime;
        break;
      }
      
      // optional int32 nextEnergyTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextEnergyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextenergytime_)));
          set_has_nextenergytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEnergyReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 energy = 1;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->energy(), output);
  }
  
  // optional int32 nextEnergyTime = 2;
  if (has_nextenergytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextenergytime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEnergyReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 energy = 1;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->energy(), target);
  }
  
  // optional int32 nextEnergyTime = 2;
  if (has_nextenergytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nextenergytime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEnergyReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 energy = 1;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int32 nextEnergyTime = 2;
    if (has_nextenergytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextenergytime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEnergyReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEnergyReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEnergyReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEnergyReceive::MergeFrom(const PBEnergyReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_nextenergytime()) {
      set_nextenergytime(from.nextenergytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEnergyReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEnergyReceive::CopyFrom(const PBEnergyReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEnergyReceive::IsInitialized() const {
  
  return true;
}

void PBEnergyReceive::Swap(PBEnergyReceive* other) {
  if (other != this) {
    std::swap(energy_, other->energy_);
    std::swap(nextenergytime_, other->nextenergytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEnergyReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEnergyReceive_descriptor_;
  metadata.reflection = PBEnergyReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBIAPSend::kMacAddressFieldNumber;
const int PBIAPSend::kServerUrlFieldNumber;
const int PBIAPSend::kOrderIdFieldNumber;
const int PBIAPSend::kUserSourceTypeFieldNumber;
const int PBIAPSend::kAuthorizationDataFieldNumber;
#endif  // !_MSC_VER

PBIAPSend::PBIAPSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBIAPSend::InitAsDefaultInstance() {
}

PBIAPSend::PBIAPSend(const PBIAPSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBIAPSend::SharedCtor() {
  _cached_size_ = 0;
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usersourcetype_ = 0;
  authorizationdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBIAPSend::~PBIAPSend() {
  SharedDtor();
}

void PBIAPSend::SharedDtor() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (serverurl_ != &::google::protobuf::internal::kEmptyString) {
    delete serverurl_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (authorizationdata_ != &::google::protobuf::internal::kEmptyString) {
    delete authorizationdata_;
  }
  if (this != default_instance_) {
  }
}

void PBIAPSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBIAPSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBIAPSend_descriptor_;
}

const PBIAPSend& PBIAPSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBIAPSend* PBIAPSend::default_instance_ = NULL;

PBIAPSend* PBIAPSend::New() const {
  return new PBIAPSend;
}

void PBIAPSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
        macaddress_->clear();
      }
    }
    if (has_serverurl()) {
      if (serverurl_ != &::google::protobuf::internal::kEmptyString) {
        serverurl_->clear();
      }
    }
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    usersourcetype_ = 0;
    if (has_authorizationdata()) {
      if (authorizationdata_ != &::google::protobuf::internal::kEmptyString) {
        authorizationdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBIAPSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string macAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverUrl;
        break;
      }
      
      // optional string serverUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverurl().data(), this->serverurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderId;
        break;
      }
      
      // optional string orderId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userSourceType;
        break;
      }
      
      // optional int32 userSourceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userSourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usersourcetype_)));
          set_has_usersourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_authorizationData;
        break;
      }
      
      // optional string authorizationData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorizationData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorizationdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authorizationdata().data(), this->authorizationdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBIAPSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->macaddress(), output);
  }
  
  // optional string serverUrl = 2;
  if (has_serverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverurl().data(), this->serverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverurl(), output);
  }
  
  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }
  
  // optional int32 userSourceType = 4;
  if (has_usersourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usersourcetype(), output);
  }
  
  // optional string authorizationData = 5;
  if (has_authorizationdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorizationdata().data(), this->authorizationdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->authorizationdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBIAPSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string macAddress = 1;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->macaddress(), target);
  }
  
  // optional string serverUrl = 2;
  if (has_serverurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverurl().data(), this->serverurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverurl(), target);
  }
  
  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }
  
  // optional int32 userSourceType = 4;
  if (has_usersourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usersourcetype(), target);
  }
  
  // optional string authorizationData = 5;
  if (has_authorizationdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authorizationdata().data(), this->authorizationdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->authorizationdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBIAPSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string macAddress = 1;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }
    
    // optional string serverUrl = 2;
    if (has_serverurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverurl());
    }
    
    // optional string orderId = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }
    
    // optional int32 userSourceType = 4;
    if (has_usersourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usersourcetype());
    }
    
    // optional string authorizationData = 5;
    if (has_authorizationdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorizationdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBIAPSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBIAPSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBIAPSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBIAPSend::MergeFrom(const PBIAPSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
    if (from.has_serverurl()) {
      set_serverurl(from.serverurl());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_usersourcetype()) {
      set_usersourcetype(from.usersourcetype());
    }
    if (from.has_authorizationdata()) {
      set_authorizationdata(from.authorizationdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBIAPSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBIAPSend::CopyFrom(const PBIAPSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBIAPSend::IsInitialized() const {
  
  return true;
}

void PBIAPSend::Swap(PBIAPSend* other) {
  if (other != this) {
    std::swap(macaddress_, other->macaddress_);
    std::swap(serverurl_, other->serverurl_);
    std::swap(orderid_, other->orderid_);
    std::swap(usersourcetype_, other->usersourcetype_);
    std::swap(authorizationdata_, other->authorizationdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBIAPSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBIAPSend_descriptor_;
  metadata.reflection = PBIAPSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBIAPRecv::kResultFieldNumber;
const int PBIAPRecv::kUserFieldNumber;
const int PBIAPRecv::kOrderIDFieldNumber;
#endif  // !_MSC_VER

PBIAPRecv::PBIAPRecv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBIAPRecv::InitAsDefaultInstance() {
  user_ = const_cast< ::PBUser*>(&::PBUser::default_instance());
}

PBIAPRecv::PBIAPRecv(const PBIAPRecv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBIAPRecv::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_ = NULL;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBIAPRecv::~PBIAPRecv() {
  SharedDtor();
}

void PBIAPRecv::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (this != default_instance_) {
    delete user_;
  }
}

void PBIAPRecv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBIAPRecv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBIAPRecv_descriptor_;
}

const PBIAPRecv& PBIAPRecv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBIAPRecv* PBIAPRecv::default_instance_ = NULL;

PBIAPRecv* PBIAPRecv::New() const {
  return new PBIAPRecv;
}

void PBIAPRecv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user()) {
      if (user_ != NULL) user_->::PBUser::Clear();
    }
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBIAPRecv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .PBUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderID;
        break;
      }
      
      // optional string orderID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBIAPRecv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  // optional string orderID = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBIAPRecv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional .PBUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  // optional string orderID = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBIAPRecv::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional .PBUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
    // optional string orderID = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBIAPRecv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBIAPRecv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBIAPRecv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBIAPRecv::MergeFrom(const PBIAPRecv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user()) {
      mutable_user()->::PBUser::MergeFrom(from.user());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBIAPRecv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBIAPRecv::CopyFrom(const PBIAPRecv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBIAPRecv::IsInitialized() const {
  
  return true;
}

void PBIAPRecv::Swap(PBIAPRecv* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_, other->user_);
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBIAPRecv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBIAPRecv_descriptor_;
  metadata.reflection = PBIAPRecv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMainServerRegisterSend::kUserAccountFieldNumber;
const int PBMainServerRegisterSend::kUserPasswdFieldNumber;
const int PBMainServerRegisterSend::kUserSourceTypeFieldNumber;
#endif  // !_MSC_VER

PBMainServerRegisterSend::PBMainServerRegisterSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMainServerRegisterSend::InitAsDefaultInstance() {
}

PBMainServerRegisterSend::PBMainServerRegisterSend(const PBMainServerRegisterSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMainServerRegisterSend::SharedCtor() {
  _cached_size_ = 0;
  useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usersourcetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMainServerRegisterSend::~PBMainServerRegisterSend() {
  SharedDtor();
}

void PBMainServerRegisterSend::SharedDtor() {
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    delete useraccount_;
  }
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpasswd_;
  }
  if (this != default_instance_) {
  }
}

void PBMainServerRegisterSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMainServerRegisterSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMainServerRegisterSend_descriptor_;
}

const PBMainServerRegisterSend& PBMainServerRegisterSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMainServerRegisterSend* PBMainServerRegisterSend::default_instance_ = NULL;

PBMainServerRegisterSend* PBMainServerRegisterSend::New() const {
  return new PBMainServerRegisterSend;
}

void PBMainServerRegisterSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_useraccount()) {
      if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
        useraccount_->clear();
      }
    }
    if (has_userpasswd()) {
      if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
        userpasswd_->clear();
      }
    }
    usersourcetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMainServerRegisterSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useraccount().data(), this->useraccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userPasswd;
        break;
      }
      
      // optional string userPasswd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userpasswd().data(), this->userpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userSourceType;
        break;
      }
      
      // optional int32 userSourceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userSourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usersourcetype_)));
          set_has_usersourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMainServerRegisterSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userAccount = 1;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->useraccount(), output);
  }
  
  // optional string userPasswd = 2;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userpasswd(), output);
  }
  
  // optional int32 userSourceType = 3;
  if (has_usersourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usersourcetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMainServerRegisterSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userAccount = 1;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }
  
  // optional string userPasswd = 2;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpasswd(), target);
  }
  
  // optional int32 userSourceType = 3;
  if (has_usersourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usersourcetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMainServerRegisterSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userAccount = 1;
    if (has_useraccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useraccount());
    }
    
    // optional string userPasswd = 2;
    if (has_userpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpasswd());
    }
    
    // optional int32 userSourceType = 3;
    if (has_usersourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usersourcetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMainServerRegisterSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMainServerRegisterSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMainServerRegisterSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMainServerRegisterSend::MergeFrom(const PBMainServerRegisterSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useraccount()) {
      set_useraccount(from.useraccount());
    }
    if (from.has_userpasswd()) {
      set_userpasswd(from.userpasswd());
    }
    if (from.has_usersourcetype()) {
      set_usersourcetype(from.usersourcetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMainServerRegisterSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMainServerRegisterSend::CopyFrom(const PBMainServerRegisterSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMainServerRegisterSend::IsInitialized() const {
  
  return true;
}

void PBMainServerRegisterSend::Swap(PBMainServerRegisterSend* other) {
  if (other != this) {
    std::swap(useraccount_, other->useraccount_);
    std::swap(userpasswd_, other->userpasswd_);
    std::swap(usersourcetype_, other->usersourcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMainServerRegisterSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMainServerRegisterSend_descriptor_;
  metadata.reflection = PBMainServerRegisterSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMainServerRegisterReceive::kRegisterResultFieldNumber;
#endif  // !_MSC_VER

PBMainServerRegisterReceive::PBMainServerRegisterReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMainServerRegisterReceive::InitAsDefaultInstance() {
}

PBMainServerRegisterReceive::PBMainServerRegisterReceive(const PBMainServerRegisterReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMainServerRegisterReceive::SharedCtor() {
  _cached_size_ = 0;
  registerresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMainServerRegisterReceive::~PBMainServerRegisterReceive() {
  SharedDtor();
}

void PBMainServerRegisterReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMainServerRegisterReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMainServerRegisterReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMainServerRegisterReceive_descriptor_;
}

const PBMainServerRegisterReceive& PBMainServerRegisterReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMainServerRegisterReceive* PBMainServerRegisterReceive::default_instance_ = NULL;

PBMainServerRegisterReceive* PBMainServerRegisterReceive::New() const {
  return new PBMainServerRegisterReceive;
}

void PBMainServerRegisterReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    registerresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMainServerRegisterReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 registerResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &registerresult_)));
          set_has_registerresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMainServerRegisterReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 registerResult = 1;
  if (has_registerresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->registerresult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMainServerRegisterReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 registerResult = 1;
  if (has_registerresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->registerresult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMainServerRegisterReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 registerResult = 1;
    if (has_registerresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->registerresult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMainServerRegisterReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMainServerRegisterReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMainServerRegisterReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMainServerRegisterReceive::MergeFrom(const PBMainServerRegisterReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registerresult()) {
      set_registerresult(from.registerresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMainServerRegisterReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMainServerRegisterReceive::CopyFrom(const PBMainServerRegisterReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMainServerRegisterReceive::IsInitialized() const {
  
  return true;
}

void PBMainServerRegisterReceive::Swap(PBMainServerRegisterReceive* other) {
  if (other != this) {
    std::swap(registerresult_, other->registerresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMainServerRegisterReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMainServerRegisterReceive_descriptor_;
  metadata.reflection = PBMainServerRegisterReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMainServerLoginSend::kUserAccountFieldNumber;
const int PBMainServerLoginSend::kUserPasswdFieldNumber;
const int PBMainServerLoginSend::kUserSourceTypeFieldNumber;
#endif  // !_MSC_VER

PBMainServerLoginSend::PBMainServerLoginSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMainServerLoginSend::InitAsDefaultInstance() {
}

PBMainServerLoginSend::PBMainServerLoginSend(const PBMainServerLoginSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMainServerLoginSend::SharedCtor() {
  _cached_size_ = 0;
  useraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usersourcetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMainServerLoginSend::~PBMainServerLoginSend() {
  SharedDtor();
}

void PBMainServerLoginSend::SharedDtor() {
  if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
    delete useraccount_;
  }
  if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpasswd_;
  }
  if (this != default_instance_) {
  }
}

void PBMainServerLoginSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMainServerLoginSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMainServerLoginSend_descriptor_;
}

const PBMainServerLoginSend& PBMainServerLoginSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMainServerLoginSend* PBMainServerLoginSend::default_instance_ = NULL;

PBMainServerLoginSend* PBMainServerLoginSend::New() const {
  return new PBMainServerLoginSend;
}

void PBMainServerLoginSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_useraccount()) {
      if (useraccount_ != &::google::protobuf::internal::kEmptyString) {
        useraccount_->clear();
      }
    }
    if (has_userpasswd()) {
      if (userpasswd_ != &::google::protobuf::internal::kEmptyString) {
        userpasswd_->clear();
      }
    }
    usersourcetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMainServerLoginSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useraccount().data(), this->useraccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userPasswd;
        break;
      }
      
      // optional string userPasswd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userpasswd().data(), this->userpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userSourceType;
        break;
      }
      
      // optional int32 userSourceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userSourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usersourcetype_)));
          set_has_usersourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMainServerLoginSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userAccount = 1;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->useraccount(), output);
  }
  
  // optional string userPasswd = 2;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userpasswd(), output);
  }
  
  // optional int32 userSourceType = 3;
  if (has_usersourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usersourcetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMainServerLoginSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userAccount = 1;
  if (has_useraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useraccount().data(), this->useraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->useraccount(), target);
  }
  
  // optional string userPasswd = 2;
  if (has_userpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpasswd().data(), this->userpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpasswd(), target);
  }
  
  // optional int32 userSourceType = 3;
  if (has_usersourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usersourcetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMainServerLoginSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userAccount = 1;
    if (has_useraccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useraccount());
    }
    
    // optional string userPasswd = 2;
    if (has_userpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpasswd());
    }
    
    // optional int32 userSourceType = 3;
    if (has_usersourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usersourcetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMainServerLoginSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMainServerLoginSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMainServerLoginSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMainServerLoginSend::MergeFrom(const PBMainServerLoginSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useraccount()) {
      set_useraccount(from.useraccount());
    }
    if (from.has_userpasswd()) {
      set_userpasswd(from.userpasswd());
    }
    if (from.has_usersourcetype()) {
      set_usersourcetype(from.usersourcetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMainServerLoginSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMainServerLoginSend::CopyFrom(const PBMainServerLoginSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMainServerLoginSend::IsInitialized() const {
  
  return true;
}

void PBMainServerLoginSend::Swap(PBMainServerLoginSend* other) {
  if (other != this) {
    std::swap(useraccount_, other->useraccount_);
    std::swap(userpasswd_, other->userpasswd_);
    std::swap(usersourcetype_, other->usersourcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMainServerLoginSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMainServerLoginSend_descriptor_;
  metadata.reflection = PBMainServerLoginSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMainServerLoginReceive::kLoginResultFieldNumber;
#endif  // !_MSC_VER

PBMainServerLoginReceive::PBMainServerLoginReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMainServerLoginReceive::InitAsDefaultInstance() {
}

PBMainServerLoginReceive::PBMainServerLoginReceive(const PBMainServerLoginReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMainServerLoginReceive::SharedCtor() {
  _cached_size_ = 0;
  loginresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMainServerLoginReceive::~PBMainServerLoginReceive() {
  SharedDtor();
}

void PBMainServerLoginReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMainServerLoginReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMainServerLoginReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMainServerLoginReceive_descriptor_;
}

const PBMainServerLoginReceive& PBMainServerLoginReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBMainServerLoginReceive* PBMainServerLoginReceive::default_instance_ = NULL;

PBMainServerLoginReceive* PBMainServerLoginReceive::New() const {
  return new PBMainServerLoginReceive;
}

void PBMainServerLoginReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loginresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMainServerLoginReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 loginResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginresult_)));
          set_has_loginresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMainServerLoginReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 loginResult = 1;
  if (has_loginresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->loginresult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMainServerLoginReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 loginResult = 1;
  if (has_loginresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->loginresult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMainServerLoginReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 loginResult = 1;
    if (has_loginresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginresult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMainServerLoginReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMainServerLoginReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMainServerLoginReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMainServerLoginReceive::MergeFrom(const PBMainServerLoginReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginresult()) {
      set_loginresult(from.loginresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMainServerLoginReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMainServerLoginReceive::CopyFrom(const PBMainServerLoginReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMainServerLoginReceive::IsInitialized() const {
  
  return true;
}

void PBMainServerLoginReceive::Swap(PBMainServerLoginReceive* other) {
  if (other != this) {
    std::swap(loginresult_, other->loginresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMainServerLoginReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMainServerLoginReceive_descriptor_;
  metadata.reflection = PBMainServerLoginReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRankSend::kRankWaysFieldNumber;
const int PBRankSend::kReqWaysFieldNumber;
const int PBRankSend::kCountFieldNumber;
#endif  // !_MSC_VER

PBRankSend::PBRankSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRankSend::InitAsDefaultInstance() {
}

PBRankSend::PBRankSend(const PBRankSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRankSend::SharedCtor() {
  _cached_size_ = 0;
  rankways_ = 0;
  reqways_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRankSend::~PBRankSend() {
  SharedDtor();
}

void PBRankSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRankSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRankSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRankSend_descriptor_;
}

const PBRankSend& PBRankSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBRankSend* PBRankSend::default_instance_ = NULL;

PBRankSend* PBRankSend::New() const {
  return new PBRankSend;
}

void PBRankSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankways_ = 0;
    reqways_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRankSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rankWays = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankways_)));
          set_has_rankways();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqWays;
        break;
      }
      
      // optional int32 reqWays = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqWays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqways_)));
          set_has_reqways();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRankSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rankWays = 1;
  if (has_rankways()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankways(), output);
  }
  
  // optional int32 reqWays = 2;
  if (has_reqways()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reqways(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRankSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rankWays = 1;
  if (has_rankways()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankways(), target);
  }
  
  // optional int32 reqWays = 2;
  if (has_reqways()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reqways(), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRankSend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rankWays = 1;
    if (has_rankways()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankways());
    }
    
    // optional int32 reqWays = 2;
    if (has_reqways()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqways());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRankSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRankSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRankSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRankSend::MergeFrom(const PBRankSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankways()) {
      set_rankways(from.rankways());
    }
    if (from.has_reqways()) {
      set_reqways(from.reqways());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRankSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRankSend::CopyFrom(const PBRankSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRankSend::IsInitialized() const {
  
  return true;
}

void PBRankSend::Swap(PBRankSend* other) {
  if (other != this) {
    std::swap(rankways_, other->rankways_);
    std::swap(reqways_, other->reqways_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRankSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRankSend_descriptor_;
  metadata.reflection = PBRankSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRankPlayerInfo::kUserNameFieldNumber;
const int PBRankPlayerInfo::kUserLevelFieldNumber;
const int PBRankPlayerInfo::kUserCardFieldNumber;
const int PBRankPlayerInfo::kFightCapacityFieldNumber;
const int PBRankPlayerInfo::kCapitorCardFightCapacityFieldNumber;
const int PBRankPlayerInfo::kPlayerRankFieldNumber;
#endif  // !_MSC_VER

PBRankPlayerInfo::PBRankPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRankPlayerInfo::InitAsDefaultInstance() {
  usercard_ = const_cast< ::PBCard*>(&::PBCard::default_instance());
}

PBRankPlayerInfo::PBRankPlayerInfo(const PBRankPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRankPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userlevel_ = 0;
  usercard_ = NULL;
  fightcapacity_ = 0;
  capitorcardfightcapacity_ = 0;
  playerrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRankPlayerInfo::~PBRankPlayerInfo() {
  SharedDtor();
}

void PBRankPlayerInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
    delete usercard_;
  }
}

void PBRankPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRankPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRankPlayerInfo_descriptor_;
}

const PBRankPlayerInfo& PBRankPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBRankPlayerInfo* PBRankPlayerInfo::default_instance_ = NULL;

PBRankPlayerInfo* PBRankPlayerInfo::New() const {
  return new PBRankPlayerInfo;
}

void PBRankPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    userlevel_ = 0;
    if (has_usercard()) {
      if (usercard_ != NULL) usercard_->::PBCard::Clear();
    }
    fightcapacity_ = 0;
    capitorcardfightcapacity_ = 0;
    playerrank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRankPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userLevel;
        break;
      }
      
      // optional int32 userLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userCard;
        break;
      }
      
      // optional .PBCard userCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fightCapacity;
        break;
      }
      
      // optional int32 fightCapacity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcapacity_)));
          set_has_fightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_capitorCardFightCapacity;
        break;
      }
      
      // optional int32 capitorCardFightCapacity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capitorCardFightCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capitorcardfightcapacity_)));
          set_has_capitorcardfightcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerRank;
        break;
      }
      
      // optional int32 playerRank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerrank_)));
          set_has_playerrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRankPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional int32 userLevel = 2;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userlevel(), output);
  }
  
  // optional .PBCard userCard = 3;
  if (has_usercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usercard(), output);
  }
  
  // optional int32 fightCapacity = 4;
  if (has_fightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fightcapacity(), output);
  }
  
  // optional int32 capitorCardFightCapacity = 5;
  if (has_capitorcardfightcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->capitorcardfightcapacity(), output);
  }
  
  // optional int32 playerRank = 6;
  if (has_playerrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playerrank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRankPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // optional int32 userLevel = 2;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userlevel(), target);
  }
  
  // optional .PBCard userCard = 3;
  if (has_usercard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->usercard(), target);
  }
  
  // optional int32 fightCapacity = 4;
  if (has_fightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fightcapacity(), target);
  }
  
  // optional int32 capitorCardFightCapacity = 5;
  if (has_capitorcardfightcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->capitorcardfightcapacity(), target);
  }
  
  // optional int32 playerRank = 6;
  if (has_playerrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playerrank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRankPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional int32 userLevel = 2;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userlevel());
    }
    
    // optional .PBCard userCard = 3;
    if (has_usercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercard());
    }
    
    // optional int32 fightCapacity = 4;
    if (has_fightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcapacity());
    }
    
    // optional int32 capitorCardFightCapacity = 5;
    if (has_capitorcardfightcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capitorcardfightcapacity());
    }
    
    // optional int32 playerRank = 6;
    if (has_playerrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerrank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRankPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRankPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRankPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRankPlayerInfo::MergeFrom(const PBRankPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_usercard()) {
      mutable_usercard()->::PBCard::MergeFrom(from.usercard());
    }
    if (from.has_fightcapacity()) {
      set_fightcapacity(from.fightcapacity());
    }
    if (from.has_capitorcardfightcapacity()) {
      set_capitorcardfightcapacity(from.capitorcardfightcapacity());
    }
    if (from.has_playerrank()) {
      set_playerrank(from.playerrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRankPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRankPlayerInfo::CopyFrom(const PBRankPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRankPlayerInfo::IsInitialized() const {
  
  return true;
}

void PBRankPlayerInfo::Swap(PBRankPlayerInfo* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(usercard_, other->usercard_);
    std::swap(fightcapacity_, other->fightcapacity_);
    std::swap(capitorcardfightcapacity_, other->capitorcardfightcapacity_);
    std::swap(playerrank_, other->playerrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRankPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRankPlayerInfo_descriptor_;
  metadata.reflection = PBRankPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRankRecv::kRandPlayerInfoFieldNumber;
const int PBRankRecv::kResultStatusFieldNumber;
#endif  // !_MSC_VER

PBRankRecv::PBRankRecv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRankRecv::InitAsDefaultInstance() {
}

PBRankRecv::PBRankRecv(const PBRankRecv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRankRecv::SharedCtor() {
  _cached_size_ = 0;
  resultstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRankRecv::~PBRankRecv() {
  SharedDtor();
}

void PBRankRecv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRankRecv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRankRecv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRankRecv_descriptor_;
}

const PBRankRecv& PBRankRecv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBRankRecv* PBRankRecv::default_instance_ = NULL;

PBRankRecv* PBRankRecv::New() const {
  return new PBRankRecv;
}

void PBRankRecv::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    resultstatus_ = 0;
  }
  randplayerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRankRecv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBRankPlayerInfo randPlayerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randPlayerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randplayerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_randPlayerInfo;
        if (input->ExpectTag(16)) goto parse_resultStatus;
        break;
      }
      
      // optional int32 resultStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultstatus_)));
          set_has_resultstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRankRecv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBRankPlayerInfo randPlayerInfo = 1;
  for (int i = 0; i < this->randplayerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->randplayerinfo(i), output);
  }
  
  // optional int32 resultStatus = 2;
  if (has_resultstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resultstatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRankRecv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBRankPlayerInfo randPlayerInfo = 1;
  for (int i = 0; i < this->randplayerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->randplayerinfo(i), target);
  }
  
  // optional int32 resultStatus = 2;
  if (has_resultstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resultstatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRankRecv::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 resultStatus = 2;
    if (has_resultstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultstatus());
    }
    
  }
  // repeated .PBRankPlayerInfo randPlayerInfo = 1;
  total_size += 1 * this->randplayerinfo_size();
  for (int i = 0; i < this->randplayerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randplayerinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRankRecv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRankRecv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRankRecv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRankRecv::MergeFrom(const PBRankRecv& from) {
  GOOGLE_CHECK_NE(&from, this);
  randplayerinfo_.MergeFrom(from.randplayerinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_resultstatus()) {
      set_resultstatus(from.resultstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRankRecv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRankRecv::CopyFrom(const PBRankRecv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRankRecv::IsInitialized() const {
  
  return true;
}

void PBRankRecv::Swap(PBRankRecv* other) {
  if (other != this) {
    randplayerinfo_.Swap(&other->randplayerinfo_);
    std::swap(resultstatus_, other->resultstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRankRecv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRankRecv_descriptor_;
  metadata.reflection = PBRankRecv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBFiveSixStarCard::kUserNameFieldNumber;
const int PBFiveSixStarCard::kCardIdFieldNumber;
const int PBFiveSixStarCard::kCardStarFieldNumber;
#endif  // !_MSC_VER

PBFiveSixStarCard::PBFiveSixStarCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFiveSixStarCard::InitAsDefaultInstance() {
}

PBFiveSixStarCard::PBFiveSixStarCard(const PBFiveSixStarCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFiveSixStarCard::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardstar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFiveSixStarCard::~PBFiveSixStarCard() {
  SharedDtor();
}

void PBFiveSixStarCard::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (this != default_instance_) {
  }
}

void PBFiveSixStarCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFiveSixStarCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFiveSixStarCard_descriptor_;
}

const PBFiveSixStarCard& PBFiveSixStarCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBFiveSixStarCard* PBFiveSixStarCard::default_instance_ = NULL;

PBFiveSixStarCard* PBFiveSixStarCard::New() const {
  return new PBFiveSixStarCard;
}

void PBFiveSixStarCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_cardid()) {
      if (cardid_ != &::google::protobuf::internal::kEmptyString) {
        cardid_->clear();
      }
    }
    cardstar_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFiveSixStarCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cardId;
        break;
      }
      
      // optional string cardId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardid().data(), this->cardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cardStar;
        break;
      }
      
      // optional int32 cardStar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardstar_)));
          set_has_cardstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFiveSixStarCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional string cardId = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cardid(), output);
  }
  
  // optional int32 cardStar = 3;
  if (has_cardstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardstar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFiveSixStarCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // optional string cardId = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cardid(), target);
  }
  
  // optional int32 cardStar = 3;
  if (has_cardstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardstar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFiveSixStarCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string cardId = 2;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }
    
    // optional int32 cardStar = 3;
    if (has_cardstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardstar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFiveSixStarCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFiveSixStarCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFiveSixStarCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFiveSixStarCard::MergeFrom(const PBFiveSixStarCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_cardstar()) {
      set_cardstar(from.cardstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFiveSixStarCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFiveSixStarCard::CopyFrom(const PBFiveSixStarCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFiveSixStarCard::IsInitialized() const {
  
  return true;
}

void PBFiveSixStarCard::Swap(PBFiveSixStarCard* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(cardid_, other->cardid_);
    std::swap(cardstar_, other->cardstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFiveSixStarCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFiveSixStarCard_descriptor_;
  metadata.reflection = PBFiveSixStarCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEvolutionSuccess::kUserNameFieldNumber;
const int PBEvolutionSuccess::kPreCardIdFieldNumber;
const int PBEvolutionSuccess::kCardIdFieldNumber;
#endif  // !_MSC_VER

PBEvolutionSuccess::PBEvolutionSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEvolutionSuccess::InitAsDefaultInstance() {
}

PBEvolutionSuccess::PBEvolutionSuccess(const PBEvolutionSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEvolutionSuccess::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  precardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEvolutionSuccess::~PBEvolutionSuccess() {
  SharedDtor();
}

void PBEvolutionSuccess::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (precardid_ != &::google::protobuf::internal::kEmptyString) {
    delete precardid_;
  }
  if (cardid_ != &::google::protobuf::internal::kEmptyString) {
    delete cardid_;
  }
  if (this != default_instance_) {
  }
}

void PBEvolutionSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEvolutionSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEvolutionSuccess_descriptor_;
}

const PBEvolutionSuccess& PBEvolutionSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBEvolutionSuccess* PBEvolutionSuccess::default_instance_ = NULL;

PBEvolutionSuccess* PBEvolutionSuccess::New() const {
  return new PBEvolutionSuccess;
}

void PBEvolutionSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_precardid()) {
      if (precardid_ != &::google::protobuf::internal::kEmptyString) {
        precardid_->clear();
      }
    }
    if (has_cardid()) {
      if (cardid_ != &::google::protobuf::internal::kEmptyString) {
        cardid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEvolutionSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_preCardId;
        break;
      }
      
      // optional string preCardId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preCardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_precardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->precardid().data(), this->precardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardId;
        break;
      }
      
      // optional string cardId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardid().data(), this->cardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEvolutionSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional string preCardId = 2;
  if (has_precardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->precardid().data(), this->precardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->precardid(), output);
  }
  
  // optional string cardId = 3;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cardid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEvolutionSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // optional string preCardId = 2;
  if (has_precardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->precardid().data(), this->precardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->precardid(), target);
  }
  
  // optional string cardId = 3;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cardid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEvolutionSuccess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string preCardId = 2;
    if (has_precardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->precardid());
    }
    
    // optional string cardId = 3;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEvolutionSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEvolutionSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEvolutionSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEvolutionSuccess::MergeFrom(const PBEvolutionSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_precardid()) {
      set_precardid(from.precardid());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEvolutionSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEvolutionSuccess::CopyFrom(const PBEvolutionSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEvolutionSuccess::IsInitialized() const {
  
  return true;
}

void PBEvolutionSuccess::Swap(PBEvolutionSuccess* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(precardid_, other->precardid_);
    std::swap(cardid_, other->cardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEvolutionSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEvolutionSuccess_descriptor_;
  metadata.reflection = PBEvolutionSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPassLevelPlayerInfo::kUserNameFieldNumber;
const int PBPassLevelPlayerInfo::kRankFieldNumber;
const int PBPassLevelPlayerInfo::kLevelNameFieldNumber;
#endif  // !_MSC_VER

PBPassLevelPlayerInfo::PBPassLevelPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPassLevelPlayerInfo::InitAsDefaultInstance() {
}

PBPassLevelPlayerInfo::PBPassLevelPlayerInfo(const PBPassLevelPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPassLevelPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPassLevelPlayerInfo::~PBPassLevelPlayerInfo() {
  SharedDtor();
}

void PBPassLevelPlayerInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    delete levelname_;
  }
  if (this != default_instance_) {
  }
}

void PBPassLevelPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPassLevelPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPassLevelPlayerInfo_descriptor_;
}

const PBPassLevelPlayerInfo& PBPassLevelPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBPassLevelPlayerInfo* PBPassLevelPlayerInfo::default_instance_ = NULL;

PBPassLevelPlayerInfo* PBPassLevelPlayerInfo::New() const {
  return new PBPassLevelPlayerInfo;
}

void PBPassLevelPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    rank_ = 0;
    if (has_levelname()) {
      if (levelname_ != &::google::protobuf::internal::kEmptyString) {
        levelname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPassLevelPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_levelName;
        break;
      }
      
      // optional string levelName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_levelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->levelname().data(), this->levelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPassLevelPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // optional string levelName = 3;
  if (has_levelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->levelname().data(), this->levelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->levelname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPassLevelPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // optional string levelName = 3;
  if (has_levelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->levelname().data(), this->levelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->levelname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPassLevelPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional string levelName = 3;
    if (has_levelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->levelname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPassLevelPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPassLevelPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPassLevelPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPassLevelPlayerInfo::MergeFrom(const PBPassLevelPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_levelname()) {
      set_levelname(from.levelname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPassLevelPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPassLevelPlayerInfo::CopyFrom(const PBPassLevelPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPassLevelPlayerInfo::IsInitialized() const {
  
  return true;
}

void PBPassLevelPlayerInfo::Swap(PBPassLevelPlayerInfo* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(rank_, other->rank_);
    std::swap(levelname_, other->levelname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPassLevelPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPassLevelPlayerInfo_descriptor_;
  metadata.reflection = PBPassLevelPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBCapacity::kUserNameFieldNumber;
const int PBCapacity::kCapacityTypeFieldNumber;
const int PBCapacity::kCapacityFieldNumber;
#endif  // !_MSC_VER

PBCapacity::PBCapacity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBCapacity::InitAsDefaultInstance() {
}

PBCapacity::PBCapacity(const PBCapacity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBCapacity::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capacitytype_ = 0;
  capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBCapacity::~PBCapacity() {
  SharedDtor();
}

void PBCapacity::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void PBCapacity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBCapacity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBCapacity_descriptor_;
}

const PBCapacity& PBCapacity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBCapacity* PBCapacity::default_instance_ = NULL;

PBCapacity* PBCapacity::New() const {
  return new PBCapacity;
}

void PBCapacity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    capacitytype_ = 0;
    capacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBCapacity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_capacityType;
        break;
      }
      
      // optional int32 capacityType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacityType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacitytype_)));
          set_has_capacitytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_capacity;
        break;
      }
      
      // optional int32 capacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBCapacity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional int32 capacityType = 2;
  if (has_capacitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->capacitytype(), output);
  }
  
  // optional int32 capacity = 3;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBCapacity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // optional int32 capacityType = 2;
  if (has_capacitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->capacitytype(), target);
  }
  
  // optional int32 capacity = 3;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBCapacity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional int32 capacityType = 2;
    if (has_capacitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacitytype());
    }
    
    // optional int32 capacity = 3;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBCapacity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBCapacity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBCapacity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBCapacity::MergeFrom(const PBCapacity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_capacitytype()) {
      set_capacitytype(from.capacitytype());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBCapacity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBCapacity::CopyFrom(const PBCapacity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBCapacity::IsInitialized() const {
  
  return true;
}

void PBCapacity::Swap(PBCapacity* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(capacitytype_, other->capacitytype_);
    std::swap(capacity_, other->capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBCapacity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBCapacity_descriptor_;
  metadata.reflection = PBCapacity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGameNotice::kFiveSixStarCardNoticeFieldNumber;
const int PBGameNotice::kEvolutionSuccessNoticeFieldNumber;
const int PBGameNotice::kPassLevelNoticeFieldNumber;
const int PBGameNotice::kCapacityNoticeFieldNumber;
const int PBGameNotice::kGameActiveInfoFieldNumber;
#endif  // !_MSC_VER

PBGameNotice::PBGameNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGameNotice::InitAsDefaultInstance() {
}

PBGameNotice::PBGameNotice(const PBGameNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGameNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGameNotice::~PBGameNotice() {
  SharedDtor();
}

void PBGameNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGameNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGameNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGameNotice_descriptor_;
}

const PBGameNotice& PBGameNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MagicCard_2eproto();  return *default_instance_;
}

PBGameNotice* PBGameNotice::default_instance_ = NULL;

PBGameNotice* PBGameNotice::New() const {
  return new PBGameNotice;
}

void PBGameNotice::Clear() {
  fivesixstarcardnotice_.Clear();
  evolutionsuccessnotice_.Clear();
  passlevelnotice_.Clear();
  capacitynotice_.Clear();
  gameactiveinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGameNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBFiveSixStarCard fiveSixStarCardNotice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fiveSixStarCardNotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fivesixstarcardnotice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fiveSixStarCardNotice;
        if (input->ExpectTag(18)) goto parse_evolutionSuccessNotice;
        break;
      }
      
      // repeated .PBEvolutionSuccess evolutionSuccessNotice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_evolutionSuccessNotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_evolutionsuccessnotice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_evolutionSuccessNotice;
        if (input->ExpectTag(26)) goto parse_passLevelNotice;
        break;
      }
      
      // repeated .PBPassLevelPlayerInfo passLevelNotice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passLevelNotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passlevelnotice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passLevelNotice;
        if (input->ExpectTag(34)) goto parse_capacityNotice;
        break;
      }
      
      // repeated .PBCapacity capacityNotice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capacityNotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capacitynotice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_capacityNotice;
        if (input->ExpectTag(42)) goto parse_gameActiveInfo;
        break;
      }
      
      // repeated string gameActiveInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameActiveInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gameactiveinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameactiveinfo(0).data(), this->gameactiveinfo(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gameActiveInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGameNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PBFiveSixStarCard fiveSixStarCardNotice = 1;
  for (int i = 0; i < this->fivesixstarcardnotice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fivesixstarcardnotice(i), output);
  }
  
  // repeated .PBEvolutionSuccess evolutionSuccessNotice = 2;
  for (int i = 0; i < this->evolutionsuccessnotice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->evolutionsuccessnotice(i), output);
  }
  
  // repeated .PBPassLevelPlayerInfo passLevelNotice = 3;
  for (int i = 0; i < this->passlevelnotice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->passlevelnotice(i), output);
  }
  
  // repeated .PBCapacity capacityNotice = 4;
  for (int i = 0; i < this->capacitynotice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->capacitynotice(i), output);
  }
  
  // repeated string gameActiveInfo = 5;
  for (int i = 0; i < this->gameactiveinfo_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->gameactiveinfo(i).data(), this->gameactiveinfo(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gameactiveinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGameNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PBFiveSixStarCard fiveSixStarCardNotice = 1;
  for (int i = 0; i < this->fivesixstarcardnotice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fivesixstarcardnotice(i), target);
  }
  
  // repeated .PBEvolutionSuccess evolutionSuccessNotice = 2;
  for (int i = 0; i < this->evolutionsuccessnotice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->evolutionsuccessnotice(i), target);
  }
  
  // repeated .PBPassLevelPlayerInfo passLevelNotice = 3;
  for (int i = 0; i < this->passlevelnotice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->passlevelnotice(i), target);
  }
  
  // repeated .PBCapacity capacityNotice = 4;
  for (int i = 0; i < this->capacitynotice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->capacitynotice(i), target);
  }
  
  // repeated string gameActiveInfo = 5;
  for (int i = 0; i < this->gameactiveinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameactiveinfo(i).data(), this->gameactiveinfo(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->gameactiveinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGameNotice::ByteSize() const {
  int total_size = 0;
  
  // repeated .PBFiveSixStarCard fiveSixStarCardNotice = 1;
  total_size += 1 * this->fivesixstarcardnotice_size();
  for (int i = 0; i < this->fivesixstarcardnotice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fivesixstarcardnotice(i));
  }
  
  // repeated .PBEvolutionSuccess evolutionSuccessNotice = 2;
  total_size += 1 * this->evolutionsuccessnotice_size();
  for (int i = 0; i < this->evolutionsuccessnotice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evolutionsuccessnotice(i));
  }
  
  // repeated .PBPassLevelPlayerInfo passLevelNotice = 3;
  total_size += 1 * this->passlevelnotice_size();
  for (int i = 0; i < this->passlevelnotice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passlevelnotice(i));
  }
  
  // repeated .PBCapacity capacityNotice = 4;
  total_size += 1 * this->capacitynotice_size();
  for (int i = 0; i < this->capacitynotice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capacitynotice(i));
  }
  
  // repeated string gameActiveInfo = 5;
  total_size += 1 * this->gameactiveinfo_size();
  for (int i = 0; i < this->gameactiveinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gameactiveinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGameNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGameNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGameNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGameNotice::MergeFrom(const PBGameNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  fivesixstarcardnotice_.MergeFrom(from.fivesixstarcardnotice_);
  evolutionsuccessnotice_.MergeFrom(from.evolutionsuccessnotice_);
  passlevelnotice_.MergeFrom(from.passlevelnotice_);
  capacitynotice_.MergeFrom(from.capacitynotice_);
  gameactiveinfo_.MergeFrom(from.gameactiveinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGameNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGameNotice::CopyFrom(const PBGameNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGameNotice::IsInitialized() const {
  
  return true;
}

void PBGameNotice::Swap(PBGameNotice* other) {
  if (other != this) {
    fivesixstarcardnotice_.Swap(&other->fivesixstarcardnotice_);
    evolutionsuccessnotice_.Swap(&other->evolutionsuccessnotice_);
    passlevelnotice_.Swap(&other->passlevelnotice_);
    capacitynotice_.Swap(&other->capacitynotice_);
    gameactiveinfo_.Swap(&other->gameactiveinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGameNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGameNotice_descriptor_;
  metadata.reflection = PBGameNotice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
